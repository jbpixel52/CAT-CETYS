import { Config } from '@redux-devtools/extension';
import { StateCreator, StoreApi, StoreMutatorIdentifier } from '../vanilla';
declare module '../vanilla' {
    interface StoreMutators<S, A> {
        'zustand/devtools': WithDevtools<S>;
    }
}
declare type Write<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;
declare type TakeTwo<T> = T extends [
] ? [
    undefined,
    undefined
] : T extends [
    unknown
] ? [
    /*a0*/ ...T,
    /*a1*/ undefined
] : T extends [
    unknown?
] ? [
    /*a0*/ ...T,
    /*a1*/ undefined
] : T extends [
    unknown,
    unknown
] ? T : T extends [
    unknown,
    unknown?
] ? T : T extends [
    unknown?,
    unknown?
] ? T : T extends [
    infer A0,
    infer A1,
    ...unknown[]
] ? [
    A0,
    A1
] : T extends [
    infer A0,
    (infer A1)?,
    ...unknown[]
] ? [
    A0,
    A1?
] : T extends [
    (infer A0)?,
    (infer A1)?,
    ...unknown[]
] ? [
    A0?,
    A1?
] : never;
declare type WithDevtools<S> = Write<S, StoreDevtools<S>>;
declare type StoreDevtools<S> = S extends {
    setState: (...a: infer Sa) => infer Sr;
} ? {
    setState<A extends string | {
        type: unknown;
    }>(...a: [
        /*a*/ ...TakeTwo<Sa>,
        /*action*/ A
    ]): Sr;
} : never;
export interface DevtoolsOptions extends Config {
    enabled?: boolean;
    anonymousActionType?: string;
}
declare type Devtools = <T, Mps extends [
    StoreMutatorIdentifier,
    unknown
][] = [
], Mcs extends [
    StoreMutatorIdentifier,
    unknown
][] = [
]>(initializer: StateCreator<T, [
    ...Mps,
    [
        'zustand/devtools',
        never
    ]
], Mcs>, devtoolsOptions?: DevtoolsOptions) => StateCreator<T, Mps, [
    [
        'zustand/devtools',
        never
    ],
    ...Mcs
]>;
declare module '../vanilla' {
    interface StoreMutators<S, A> {
        'zustand/devtools': WithDevtools<S>;
    }
}
export declare type NamedSet<T> = WithDevtools<StoreApi<T>>['setState'];
export declare const devtools: Devtools;
export {};
