{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import { TaggedTemplateExpression } from '@babel/types'\nimport {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            throw new Error(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue<string>(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue<string>(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n} & (keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    })\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData, TValue> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n} & (keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    })\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n} & (keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    })\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping, GroupingColumnDef } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport type CellContext<TData extends RowData, TValue> = {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport type CoreCell<TData extends RowData, TValue> = {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","Error","column","columns","getFlatColumns","flatMap","process","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getLeftTotalSize","getCenterTotalSize","getRightTotalSize","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","warn","getRenderValue","renderFallbackValue","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","pass","resolvedColumnFilters","resolvedGlobalFilters","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}