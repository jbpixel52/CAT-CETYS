{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import { TaggedTemplateExpression } from '@babel/types'\nimport {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            throw new Error(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue<string>(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue<string>(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n} & (keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    })\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData, TValue> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n} & (keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    })\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n} & (keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    })\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping, GroupingColumnDef } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport type CellContext<TData extends RowData, TValue> = {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport type CoreCell<TData extends RowData, TValue> = {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","Error","column","columns","getFlatColumns","_column$columns","flatMap","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","headerGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","center","_left$","_center$","_right$","columnsToGroup","headerFamily","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","_ref","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_ref2","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","_table$getHeaderGroup","getLeftTotalSize","_table$getLeftHeaderG","getCenterTotalSize","_table$getCenterHeade","getRightTotalSize","_table$getRightHeader","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","_table$options$filter","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter2","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_props$getValue","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","setPageIndex","maxPageIndex","pageCount","_table$initialState$p","resetPageSize","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","renderValue","renderFallbackValue","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","defaultOptions","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aUndefined","bUndefined","sortInt"],"mappings":";;;;;;;;;;iPA2EO,SAASA,EAAoBC,EAAqBC,GACvD,MAA0B,mBAAZD,EACTA,EAA4BC,GAC7BD,CACN,CAMO,SAASE,EACdC,EACAC,GAEA,OAAQJ,IACJI,EAAiBC,UAAuBC,IACjC,IACFA,EACHH,CAACA,GAAMJ,EAAiBC,EAAUM,EAAYH,OAEhD,CAEN,CAIO,SAASI,EAAkCC,GAChD,OAAOA,aAAaC,QACtB,CAEO,SAASC,EACdC,EACAC,GAEA,MAAMC,EAAgB,GAEhBC,EAAWC,IACfA,EAAOC,SAAQC,IACbJ,EAAKK,KAAKD,GACV,MAAME,EAAWP,EAAYK,GACjB,MAARE,GAAAA,EAAUC,QACZN,EAAQK,EACV,GACA,EAKJ,OAFAL,EAAQH,GAEDE,CACT,CAEO,SAASQ,EACdC,EACAC,EACAC,GAMA,IACIC,EADAC,EAAc,GAGlB,MAAO,KACL,IAAIC,EACAH,EAAKrB,KAAOqB,EAAKI,QAAOD,EAAUE,KAAKC,OAE3C,MAAMC,EAAUT,IAMhB,KAHES,EAAQX,SAAWM,EAAKN,QACxBW,EAAQC,MAAK,CAACC,EAAUC,IAAkBR,EAAKQ,KAAWD,KAG1D,OAAOR,EAKT,IAAIU,EAMJ,GARAT,EAAOK,EAGHP,EAAKrB,KAAOqB,EAAKI,QAAOO,EAAaN,KAAKC,OAE9CL,EAASF,KAAMQ,GACX,MAAJP,GAAc,MAAdA,EAAMY,UAANZ,EAAMY,SAAWX,GAEbD,EAAKrB,KAAOqB,EAAKI,OACfJ,MAAAA,GAAAA,EAAMI,QAAS,CACjB,MAAMS,EAAaC,KAAKC,MAAgC,KAAzBV,KAAKC,MAAQH,IAAmB,IACzDa,EAAgBF,KAAKC,MAAmC,KAA5BV,KAAKC,MAAQK,IAAsB,IAC/DM,EAAsBD,EAAgB,GAEtCE,EAAM,CAACC,EAAsBC,KAEjC,IADAD,EAAME,OAAOF,GACNA,EAAIvB,OAASwB,GAClBD,EAAM,IAAMA,EAEd,OAAOA,CAAG,EAGZG,QAAQC,KACL,OAAML,EAAIF,EAAe,OAAOE,EAAIL,EAAY,QAChD,2FAGcC,KAAKU,IAChB,EACAV,KAAKW,IAAI,IAAM,IAAMR,EAAqB,sBAE9CjB,MAAAA,OAAAA,EAAAA,EAAMrB,IAEV,CAGF,OAAOsB,CAAM,CAEjB,CCtKO,SAASyB,EACdC,EACAC,EACAC,EACAC,GAEA,MAEMC,EAAoB,IAFJJ,EAAMK,0BAIvBJ,GAGCK,EAAcF,EAAkBE,YAEtC,IAOIC,EAPAC,EACFJ,EAAkBI,KACjBF,EAAcA,EAAYG,QAAQ,IAAK,UAAOC,KACV,iBAA7BN,EAAkBO,OACtBP,EAAkBO,YAClBD,GA6BN,GAzBIN,EAAkBG,WACpBA,EAAaH,EAAkBG,WACtBD,IAGPC,EADED,EAAYM,SAAS,KACTC,IACZ,IAAIvC,EAASuC,EAEb,IAAK,MAAM7D,KAAOsD,EAAYQ,MAAM,KAClCxC,EAASA,EAAOtB,GAQlB,OAAOsB,CAAM,EAGDuC,GACXA,EAAoBT,EAAkBE,eAIxCE,EAQH,MAAM,IAAIO,MAGZ,IAAIC,EAAiC,CACnCR,GAAK,GAAEd,OAAOc,KACdD,aACAJ,OAAQA,EACRD,QACAD,UAAWG,EACXa,QAAS,GACTC,eAAgBhD,GACd,IAAM,EAAC,KACP,KAAM,IAAAiD,EACJ,MAAO,CACLH,KACG,SAAAA,EAAOC,cAAP,EAAAE,EAAgBC,SAAQ/D,GAAKA,EAAE6D,mBACnC,GAEH,CACElE,IAA8C,wBAC9CyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,eAGzDC,eAAgBtD,GACd,IAAM,CAAC8B,EAAMyB,wBACbC,IAAgB,IAAAC,EACd,GAAI,OAAJA,EAAIX,EAAOC,UAAPU,EAAgB1D,OAAQ,CAC1B,IAAI2D,EAAcZ,EAAOC,QAAQG,SAAQJ,GACvCA,EAAOQ,mBAGT,OAAOE,EAAaE,EACtB,CAEA,MAAO,CAACZ,EAAgC,GAE1C,CACEhE,IAA8C,wBAC9CyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,gBAU3D,OALAP,EAAShB,EAAM6B,UAAUC,QAAO,CAACC,EAAKC,IAC7BC,OAAOC,OAAOH,EAAKC,MAAAA,EAAQjC,kBAARiC,EAAAA,EAAQjC,aAAeiB,EAAQhB,KACxDgB,GAGIA,CACT,CC3EA,SAASmB,EACPnC,EACAgB,EACAK,GAUA,IAAIV,EAAoC,CACtCH,GAHSa,EAAQb,IAAMQ,EAAOR,GAI9BQ,SACAjC,MAAOsC,EAAQtC,MACfqD,gBAAiBf,EAAQe,cACzBC,cAAehB,EAAQgB,cACvBnC,MAAOmB,EAAQnB,MACfoC,WAAY,GACZC,QAAS,EACTC,QAAS,EACTC,YAAa,KACbC,eAAgB,KACd,MAAMC,EAAwC,GAExCC,EAAiBC,IACjBA,EAAEP,YAAcO,EAAEP,WAAWrE,QAC/B4E,EAAEP,WAAWQ,IAAIF,GAEnBD,EAAY5E,KAAK8E,EAA4B,EAK/C,OAFAD,EAAcjC,GAEPgC,CAAW,EAEpBI,WAAY,KAAO,CACjB/C,QACAW,OAAQA,EACRK,YAQJ,OAJAhB,EAAM6B,UAAUhE,SAAQmE,IACtBC,OAAOC,OAAOvB,EAAQqB,MAAAA,EAAQG,kBAARH,EAAAA,EAAQG,aAAexB,EAAQX,GAAO,IAGvDW,CACT,CAEO,MAAMqC,EAAwB,CACnCC,YACEjD,IAEO,CAGLkD,gBAAiBhF,GACf,IAAM,CACJ8B,EAAMmD,gBACNnD,EAAMoD,wBACNpD,EAAMqD,WAAWC,cAAcC,KAC/BvD,EAAMqD,WAAWC,cAAcE,SAEjC,CAACC,EAAY7B,EAAa2B,EAAMC,KAC9B,MAAME,GACJH,MAAAA,OAAAA,EAAAA,EACIT,KAAIa,GAAY/B,EAAYgC,MAAKvG,GAAKA,EAAEmD,KAAOmD,MAChDE,OAAOC,WAAY,GAElBC,GACJP,MAAAA,OAAAA,EAAAA,EACIV,KAAIa,GAAY/B,EAAYgC,MAAKvG,GAAKA,EAAEmD,KAAOmD,MAChDE,OAAOC,WAAY,GAYxB,OANqBE,EACnBP,EACA,IAAIC,KANgB9B,EAAYiC,QAChC7C,KAAWuC,MAAAA,GAAAA,EAAM3C,SAASI,EAAOR,KAAQgD,MAAAA,GAAAA,EAAO5C,SAASI,EAAOR,UAK1BuD,GACtC/D,EAGiB,GAErB,CACEhD,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDC,sBAAuBjG,GACrB,IAAM,CACJ8B,EAAMmD,gBACNnD,EAAMoD,wBACNpD,EAAMqD,WAAWC,cAAcC,KAC/BvD,EAAMqD,WAAWC,cAAcE,SAEjC,CAACC,EAAY7B,EAAa2B,EAAMC,IAIvBQ,EAAkBP,EAHzB7B,EAAcA,EAAYiC,QACxB7C,KAAe,MAAJuC,GAAAA,EAAM3C,SAASI,EAAOR,KAAQgD,MAAAA,GAAAA,EAAO5C,SAASI,EAAOR,OAEhBR,EAAO,WAE3D,CACEhD,KACEiH,EACFxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDE,oBAAqBlG,GACnB,IAAM,CACJ8B,EAAMmD,gBACNnD,EAAMoD,wBACNpD,EAAMqD,WAAWC,cAAcC,QAEjC,CAACE,EAAY7B,EAAa2B,IAMjBS,EACLP,GALAF,MAAAA,OAAAA,EAAAA,EACIT,KAAIa,GAAY/B,EAAYgC,MAAKvG,GAAKA,EAAEmD,KAAOmD,MAChDE,OAAOC,WAAY,GAKtB9D,EACA,SAGJ,CACEhD,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDG,qBAAsBnG,GACpB,IAAM,CACJ8B,EAAMmD,gBACNnD,EAAMoD,wBACNpD,EAAMqD,WAAWC,cAAcE,SAEjC,CAACC,EAAY7B,EAAa4B,IAMjBQ,EACLP,GALAD,MAAAA,OAAAA,EAAAA,EACIV,KAAIa,GAAY/B,EAAYgC,MAAKvG,GAAKA,EAAEmD,KAAOmD,MAChDE,OAAOC,WAAY,GAKtB9D,EACA,UAGJ,CACEhD,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAMzDI,gBAAiBpG,GACf,IAAM,CAAC8B,EAAMkD,qBACbqB,GACS,IAAIA,GAAcC,WAE3B,CACExH,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDO,oBAAqBvG,GACnB,IAAM,CAAC8B,EAAMoE,yBACbG,GACS,IAAIA,GAAcC,WAE3B,CACExH,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDQ,sBAAuBxG,GACrB,IAAM,CAAC8B,EAAMmE,2BACbI,GACS,IAAIA,GAAcC,WAE3B,CACExH,KACEiH,EACFxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDS,qBAAsBzG,GACpB,IAAM,CAAC8B,EAAMqE,0BACbE,GACS,IAAIA,GAAcC,WAE3B,CACExH,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAMzDU,eAAgB1G,GACd,IAAM,CAAC8B,EAAMkD,qBACbqB,GACSA,EACJzB,KAAIL,GACIA,EAAYoC,UAEpBnH,QAEL,CACEV,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDY,mBAAoB5G,GAClB,IAAM,CAAC8B,EAAMoE,yBACbb,GACSA,EACJT,KAAIL,GACIA,EAAYoC,UAEpBnH,QAEL,CACEV,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDa,qBAAsB7G,GACpB,IAAM,CAAC8B,EAAMmE,2BACbZ,GACSA,EACJT,KAAIL,GACIA,EAAYoC,UAEpBnH,QAEL,CACEV,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDc,oBAAqB9G,GACnB,IAAM,CAAC8B,EAAMqE,0BACbd,GACSA,EACJT,KAAIL,GACIA,EAAYoC,UAEpBnH,QAEL,CACEV,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAMzDe,qBAAsB/G,GACpB,IAAM,CAAC8B,EAAM+E,0BACbG,GACSA,EAAYrB,QAAOlD,IAAM,IAAAwE,EAAA,QAAsB,SAAjBxE,EAAO2B,aAAP6C,EAAmBlH,OAAM,KAEhE,CACEjB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDkB,mBAAoBlH,GAClB,IAAM,CAAC8B,EAAM8E,wBACbI,GACSA,EAAYrB,QAAOlD,IAAM,IAAA0E,EAAA,QAAsB,SAAjB1E,EAAO2B,aAAP+C,EAAmBpH,OAAM,KAEhE,CACEjB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDoB,oBAAqBpH,GACnB,IAAM,CAAC8B,EAAMgF,yBACbE,GACSA,EAAYrB,QAAOlD,IAAM,IAAA4E,EAAA,QAAsB,SAAjB5E,EAAO2B,aAAPiD,EAAmBtH,OAAM,KAEhE,CACEjB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,eAIzDxB,eAAgBxE,GACd,IAAM,CACJ8B,EAAMoE,sBACNpE,EAAMmE,wBACNnE,EAAMqE,0BAER,CAACd,EAAMiC,EAAQhC,KAAU,IAAAiC,EAAAC,EAAAC,EACvB,MAAO,YACDpC,EAAAA,EAAK,WAALkC,EAASZ,UAAW,OACpB,OAAAa,EAAAF,EAAO,SAAP,EAAAE,EAAWb,UAAW,OACd,SAARrB,EAAM,SAAE,EAARmC,EAAUd,UAAW,IAExB/B,KAAInC,GACIA,EAAO+B,mBAEfhF,MAAM,GAEX,CACEV,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ6C,kBAOxD,SAASF,EACdP,EACAmC,EACA5F,EACA6F,GACA,IAAAC,EAOA,IAAIC,EAAW,EAEf,MAAMC,EAAe,SAAC/E,EAAmCf,QAAK,IAALA,IAAAA,EAAQ,GAC/D6F,EAAW5G,KAAKU,IAAIkG,EAAU7F,GAE9Be,EACG4C,QAAO7C,GAAUA,EAAOiF,iBACxBpI,SAAQmD,IAAU,IAAAG,EACb,OAAJA,EAAIH,EAAOC,UAAPE,EAAgBlD,QAClB+H,EAAahF,EAAOC,QAASf,EAAQ,EACvC,GACC,IAGP8F,EAAavC,GAEb,IAAIc,EAAqC,GAEzC,MAAM2B,EAAoB,CACxBC,EACAjG,KAGA,MAAMuC,EAAkC,CACtCvC,QACAM,GAAI,CAACqF,EAAe,GAAE3F,KAAS2D,OAAOC,SAASsC,KAAK,KACpDvB,QAAS,IAILwB,EAAiD,GAGvDF,EAAetI,SAAQyI,IAGrB,MAAMC,EAA4B,IAAIF,GAAsB7B,UAAU,GAItE,IAAIxD,EACAoB,GAAgB,EAWpB,GAdqBkE,EAActF,OAAOd,QAAUuC,EAAYvC,OAK5CoG,EAActF,OAAOb,OAEvCa,EAASsF,EAActF,OAAOb,QAG9Ba,EAASsF,EAActF,OACvBoB,GAAgB,GAIhBmE,IACyB,MAAzBA,OAAyB,EAAzBA,EAA2BvF,UAAWA,EAGtCuF,EAA0BjE,WAAWvE,KAAKuI,OACrC,CAEL,MAAM3F,EAASwB,EAAanC,EAAOgB,EAAQ,CACzCR,GAAI,CAACqF,EAAc3F,EAAOc,EAAOR,GAAiB,MAAb8F,OAAa,EAAbA,EAAe9F,IACjDqD,OAAOC,SACPsC,KAAK,KACRhE,gBACAC,cAAeD,EACV,GAAEiE,EAAqBxC,QAAOxG,GAAKA,EAAE2D,SAAWA,IAAQ/C,cACzDyC,EACJR,QACAnB,MAAOsH,EAAqBpI,SAI9B0C,EAAO2B,WAAWvE,KAAKuI,GAGvBD,EAAqBtI,KAAK4C,EAC5B,CAEA8B,EAAYoC,QAAQ9G,KAAKuI,GACzBA,EAAc7D,YAAcA,CAAW,IAGzC8B,EAAaxG,KAAK0E,GAEdvC,EAAQ,GACVgG,EAAkBG,EAAsBnG,EAAQ,EAClD,EAGIsG,EAAgBZ,EAAe9C,KAAI,CAAC9B,EAAQjC,IAChDoD,EAAanC,EAAOgB,EAAQ,CAC1Bd,MAAO6F,EACPhH,YAIJmH,EAAkBM,EAAeT,EAAW,GAE5CxB,EAAaC,UAMb,MAAMiC,EACJ5B,GAEwBA,EAAQhB,QAAOlD,GACrCA,EAAOK,OAAOiF,iBAGOnD,KAAInC,IACzB,IAAI4B,EAAU,EACVC,EAAU,EACVkE,EAAgB,CAAC,GAEjB/F,EAAO2B,YAAc3B,EAAO2B,WAAWrE,QACzCyI,EAAgB,GAEhBD,EAAuB9F,EAAO2B,YAAYzE,SACxC8I,IAAsD,IAAnDpE,QAASqE,EAAcpE,QAASqE,GAAcF,EAC/CpE,GAAWqE,EACXF,EAAc3I,KAAK8I,EAAa,KAIpCtE,EAAU,EASZ,OALAC,GADwBrD,KAAKW,OAAO4G,GAGpC/F,EAAO4B,QAAUA,EACjB5B,EAAO6B,QAAUA,EAEV,CAAED,UAASC,UAAS,IAM/B,OAFAiE,GAAsC,OAAflC,EAAAA,EAAa,SAAE,EAAfuB,EAAiBjB,UAAW,IAE5CN,CACT,CCzdO,MAAMuC,EAAsB,CACjCC,KAAM,IACNC,QAAS,GACTC,QAASC,OAAOC,kBAYLC,EAA6B,CACxCC,oBAAqB,IACZP,EAETQ,gBAAkBC,IACT,CACLC,aAAc,CAAE,EAChBC,iBAhBgE,CACpEC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,gBAAiB,KACjBC,kBAAkB,EAClBC,kBAAmB,OAWZR,IAIPS,kBACEhI,IAEO,CACLiI,iBAAkB,QAClBC,qBAAsBnL,EAAiB,eAAgBiD,GACvDmI,yBAA0BpL,EAAiB,mBAAoBiD,KAInED,aAAc,CACZiB,EACAhB,KAEO,CACLoI,QAAS,KACP,MAAMC,EAAarI,EAAMqD,WAAWmE,aAAaxG,EAAOR,IAExD,OAAOrB,KAAKW,IACVX,KAAKU,IACHmB,EAAOf,UAAU+G,SAAWF,EAAoBE,QAChDqB,GAAcrH,EAAOf,UAAU8G,MAAQD,EAAoBC,MAE7D/F,EAAOf,UAAUgH,SAAWH,EAAoBG,QACjD,EAEHqB,SAAUC,IACR,MAAMtH,EAAWsH,EAEA,SAAbA,EACAvI,EAAMwI,4BACNxI,EAAMyI,6BAHNzI,EAAMoD,wBAKJrE,EAAQkC,EAAQyH,WAAUrL,GAAKA,EAAEmD,KAAOQ,EAAOR,KAErD,GAAIzB,EAAQ,EAAG,CACb,MAAM4J,EAAoB1H,EAAQlC,EAAQ,GAE1C,OACE4J,EAAkBL,SAASC,GAAYI,EAAkBP,SAE7D,CAEA,OAAO,CAAC,EAEVQ,UAAW,KACT5I,EAAM6I,iBAAgBlC,IAAiC,IAA9B,CAAC3F,EAAOR,IAAKsI,KAAMC,GAAMpC,EAChD,OAAOoC,CAAI,GACX,EAEJC,aAAc,KAEThI,EAAOf,UAAUgJ,iBAAkB,KACnCjJ,EAAMqB,QAAQ6H,uBAAwB,GAG3CC,cAAe,IACNnJ,EAAMqD,WAAWoE,iBAAiBK,mBAAqB9G,EAAOR,KAK3E2B,aAAc,CACZxB,EACAX,KAEO,CACLoI,QAAS,KACP,IAAIgB,EAAM,EAEV,MAAMzL,EAAWgD,IACXA,EAAO2B,WAAWrE,OACpB0C,EAAO2B,WAAWzE,QAAQF,GAE1ByL,GAAOzI,EAAOK,OAAOoH,WAAa,CACpC,EAKF,OAFAzK,EAAQgD,GAEDyI,CAAG,EAEZd,SAAU,KACR,GAAI3H,EAAO5B,MAAQ,EAAG,CACpB,MAAMsK,EACJ1I,EAAO8B,YAAYoC,QAAQlE,EAAO5B,MAAQ,GAC5C,OAAOsK,EAAkBf,WAAae,EAAkBjB,SAC1D,CAEA,OAAO,CAAC,EAEVkB,iBAAkB,KAChB,MAAMtI,EAAShB,EAAMuJ,UAAU5I,EAAOK,OAAOR,IACvCgJ,EAAYxI,EAAOgI,eAEzB,OAAQS,IACN,IAAKD,EACH,OAKF,GAFmB,MAAjBC,EAAUC,SAAVD,EAAUC,UAERC,EAAkBF,IAEhBA,EAAEG,SAAWH,EAAEG,QAAQ3L,OAAS,EAClC,OAIJ,MAAM0J,EAAYhH,EAAOyH,UAEnBL,EAAwCpH,EAC1CA,EACG+B,iBACAI,KAAIzF,GAAK,CAACA,EAAE2D,OAAOR,GAAInD,EAAE2D,OAAOoH,aACnC,CAAC,CAACpH,EAAOR,GAAIQ,EAAOoH,YAElByB,EAAUF,EAAkBF,GAC9BtK,KAAKC,MAAMqK,EAAEG,QAAQ,GAAIC,SACxBJ,EAAiBI,QAEhBC,EAAe,CACnBC,EACAC,KAEA,GAA0B,iBAAfA,EACT,OAGF,IAAIC,EAAqC,CAAA,EAEzCjK,EAAMkK,qBAAoB/M,IACxB,MAAMyK,EAAcoC,IAAc7M,MAAAA,OAAAA,EAAAA,EAAKuK,cAAe,GAChDG,EAAkB1I,KAAKU,IAC3B+H,UAAezK,SAAAA,EAAKwK,YAAa,IAChC,SAUH,OAPAxK,EAAI4K,kBAAkBlK,SAAQsM,IAA4B,IAA1BxG,EAAUyG,GAAWD,EACnDF,EAAgBtG,GACdxE,KAAKC,MACsD,IAAzDD,KAAKU,IAAIuK,EAAaA,EAAavC,EAAiB,IAClD,GAAG,IAGJ,IACF1K,EACHyK,cACAC,kBACD,IAIkC,aAAnC7H,EAAMqB,QAAQ4G,kBACA,QAAd8B,GAEA/J,EAAM6I,iBAAgB1L,IAAQ,IACzBA,KACA8M,KAEP,EAGII,EAAUL,GACdF,EAAa,OAAQE,GAEjBM,EAASN,IACbF,EAAa,MAAOE,GAEpBhK,EAAMkK,qBAAoB/M,IAAQ,IAC7BA,EACH2K,kBAAkB,EAClBJ,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,gBAAiB,KACjBE,kBAAmB,MAClB,EAGCwC,EAAc,CAClBC,YAAcf,GAAkBY,EAAOZ,EAAEI,SACzCY,UAAYhB,IACViB,SAASC,oBAAoB,YAAaJ,EAAYC,aACtDE,SAASC,oBAAoB,UAAWJ,EAAYE,WACpDH,EAAMb,EAAEI,QAAQ,GAIde,EAAc,CAClBJ,YAAcf,IACRA,EAAEoB,aACJpB,EAAEqB,iBACFrB,EAAEsB,mBAEJV,EAAOZ,EAAEG,QAAQ,GAAIC,UACd,GAETY,UAAYhB,IAAkB,IAAAuB,EAC5BN,SAASC,oBAAoB,YAAaC,EAAYJ,aACtDE,SAASC,oBAAoB,WAAYC,EAAYH,WACjDhB,EAAEoB,aACJpB,EAAEqB,iBACFrB,EAAEsB,mBAEJT,EAAkB,OAAbU,EAACvB,EAAEG,QAAQ,SAAE,EAAZoB,EAAcnB,QAAQ,GAI1BoB,IAAqBC,KACvB,CAAEC,SAAS,GAGXxB,EAAkBF,IACpBiB,SAASU,iBACP,YACAR,EAAYJ,YACZS,GAEFP,SAASU,iBACP,WACAR,EAAYH,UACZQ,KAGFP,SAASU,iBACP,YACAb,EAAYC,YACZS,GAEFP,SAASU,iBACP,UACAb,EAAYE,UACZQ,IAIJjL,EAAMkK,qBAAoB/M,IAAQ,IAC7BA,EACHuK,YAAamC,EACblC,YACAC,YAAa,EACbC,gBAAiB,EACjBE,oBACAD,iBAAkB9G,EAAOR,MACxB,CACJ,IAKPyC,YACEjD,IAEO,CACL6I,gBAAiBhM,GAAWmD,MAAAA,EAAMqB,QAAQ6G,0BAAdlI,EAAAA,EAAMqB,QAAQ6G,qBAAuBrL,GACjEqN,oBAAqBrN,GACnBmD,MAAAA,EAAMqB,QAAQ8G,8BAAdnI,EAAAA,EAAMqB,QAAQ8G,yBAA2BtL,GAC3CwO,kBAAmBC,IACjBtL,EAAM6I,gBACJyC,EAAe,CAAE,EAAGtL,EAAMuL,aAAa/D,cAAgB,CAAA,EACxD,EAEHgE,oBAAqBF,IACnBtL,EAAMkK,oBACJoB,EA9R4D,CACpE5D,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,gBAAiB,KACjBC,kBAAkB,EAClBC,kBAAmB,IA0RP/H,EAAMuL,aAAa9D,kBAhSqC,CACpEC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,gBAAiB,KACjBC,kBAAkB,EAClBC,kBAAmB,IA4RZ,EAEH0D,aAAc,KAAA,IAAAC,EAAA,OACc,SAA1B1L,EAAMkD,kBAAkB,SAAE,EAA1BwI,EAA4B7G,QAAQ/C,QAAO,CAACsH,EAAKzI,IACxCyI,EAAMzI,EAAOyH,WACnB,KAAM,CAAC,EACZuD,iBAAkB,KAAA,IAAAC,EAAA,OACc,SAA9B5L,EAAMoE,sBAAsB,SAAE,EAA9BwH,EAAgC/G,QAAQ/C,QAAO,CAACsH,EAAKzI,IAC5CyI,EAAMzI,EAAOyH,WACnB,KAAM,CAAC,EACZyD,mBAAoB,KAAA,IAAAC,EAAA,OACc,SAAhC9L,EAAMmE,wBAAwB,SAAE,EAAhC2H,EAAkCjH,QAAQ/C,QAAO,CAACsH,EAAKzI,IAC9CyI,EAAMzI,EAAOyH,WACnB,KAAM,CAAC,EACZ2D,kBAAmB,KAAA,IAAAC,EAAA,OACc,SAA/BhM,EAAMqE,uBAAuB,SAAE,EAA/B2H,EAAiCnH,QAAQ/C,QAAO,CAACsH,EAAKzI,IAC7CyI,EAAMzI,EAAOyH,WACnB,KAAM,CAAC,KAKlB,IAAI6D,EAAmC,KAChC,SAASf,IACd,GAAgC,kBAArBe,EAAgC,OAAOA,EAElD,IAAIC,GAAY,EAChB,IACE,MAAM7K,EAAU,CACV8J,cAEF,OADAe,GAAY,GACL,CACT,GAGIC,EAAO,OAEbC,OAAOhB,iBAAiB,OAAQe,EAAM9K,GACtC+K,OAAOzB,oBAAoB,OAAQwB,EAGrC,CAFE,MAAOE,GACPH,GAAY,CACd,CAEA,OADAD,EAAmBC,EACZD,CACT,CAEA,SAAStC,EAAkBF,GACzB,MAAkC,eAA1BA,EAAiB6C,IAC3B,CClXO,MAAMC,EAA0B,CACrCjF,gBAAkBC,IACT,CACLiF,SAAU,CAAE,KACTjF,IAIPS,kBACEhI,IAEO,CACLyM,iBAAkB1P,EAAiB,WAAYiD,GAC/C0M,sBAAsB,IAI1BzJ,YACEjD,IAEA,IAAI2M,GAAa,EACbC,GAAS,EAEb,MAAO,CACLC,mBAAoB,KAClB,GAAKF,GAOL,GACE3M,EAAMqB,QAAQyL,cACd9M,EAAMqB,QAAQ0L,oBACb/M,EAAMqB,QAAQ2L,gBACf,CACA,GAAIJ,EAAQ,OACZA,GAAS,EACT5M,EAAMiN,QAAO,KACXjN,EAAMkN,gBACNN,GAAS,CAAK,GAElB,OAjBE5M,EAAMiN,QAAO,KACXN,GAAa,CAAI,GAgBrB,EAEFQ,YAAatQ,GAAWmD,MAAAA,EAAMqB,QAAQoL,sBAAdzM,EAAAA,EAAMqB,QAAQoL,iBAAmB5P,GACzDuQ,sBAAuBZ,IACjBA,IAAaxM,EAAMqN,uBACrBrN,EAAMmN,aAAY,GAElBnN,EAAMmN,YAAY,CAAA,EACpB,EAEFD,cAAe5B,IAAgB,IAAAgC,EAC7BtN,EAAMmN,YACJ7B,EAAe,CAAA,GAAK,OAAAgC,EAAAtN,EAAMuL,mBAAN,EAAA+B,EAAoBd,WAAY,CAAE,EACvD,EAEHe,qBAAsB,IACbvN,EAAMwN,cAAcC,SAAS5O,MAAK6O,GAAOA,EAAIC,iBAEtDC,gCAAiC,IACvBnE,IACa,MAAjBA,EAAUC,SAAVD,EAAUC,UACZ1J,EAAMoN,uBAAuB,EAGjCS,sBAAuB,KACrB,MAAMrB,EAAWxM,EAAMqD,WAAWmJ,SAClC,OAAoB,IAAbA,GAAqBvK,OAAO6L,OAAOtB,GAAU3N,KAAKiF,QAAQ,EAEnEuJ,qBAAsB,KACpB,MAAMb,EAAWxM,EAAMqD,WAAWmJ,SAGlC,MAAwB,kBAAbA,GACW,IAAbA,IAGJvK,OAAO8L,KAAKvB,GAAUvO,SAKvB+B,EAAMwN,cAAcC,SAAS5O,MAAK6O,IAAQA,EAAIM,iBAKvC,EAEbC,iBAAkB,KAChB,IAAIlI,EAAW,EAYf,QATgC,IAA9B/F,EAAMqD,WAAWmJ,SACbvK,OAAO8L,KAAK/N,EAAMwN,cAAcU,UAChCjM,OAAO8L,KAAK/N,EAAMqD,WAAWmJ,WAE5B3O,SAAQ2C,IACb,MAAM2N,EAAU3N,EAAGM,MAAM,KACzBiF,EAAW5G,KAAKU,IAAIkG,EAAUoI,EAAQlQ,OAAO,IAGxC8H,CAAQ,EAEjBqI,uBAAwB,IAAMpO,EAAMqO,oBACpCC,oBAAqB,MACdtO,EAAMuO,sBAAwBvO,EAAMqB,QAAQiN,sBAC/CtO,EAAMuO,qBAAuBvO,EAAMqB,QAAQiN,oBAAoBtO,IAG7DA,EAAMqB,QAAQ2L,kBAAoBhN,EAAMuO,qBACnCvO,EAAMoO,yBAGRpO,EAAMuO,wBAEhB,EAGHC,UAAW,CACTd,EACA1N,KAEO,CACLyO,eAAgBjC,IACdxM,EAAMmN,aAAYhQ,IAChB,MAAMuR,GAAiB,IAARvR,KAAwBA,MAAAA,IAAAA,EAAMuQ,EAAIlN,KAEjD,IAAImO,EAAiC,CAAA,EAYrC,IAVY,IAARxR,EACF8E,OAAO8L,KAAK/N,EAAMwN,cAAcU,UAAUrQ,SAAQ+Q,IAChDD,EAAYC,IAAS,CAAI,IAG3BD,EAAcxR,EAGhBqP,EAAWA,IAAakC,GAEnBA,GAAUlC,EACb,MAAO,IACFmC,EACH,CAACjB,EAAIlN,KAAK,GAId,GAAIkO,IAAWlC,EAAU,CACvB,MAAQ,CAACkB,EAAIlN,IAAKsI,KAAMC,GAAS4F,EACjC,OAAO5F,CACT,CAEA,OAAO5L,CAAG,GACV,EAEJ6Q,cAAe,KACb,MAAMxB,EAAWxM,EAAMqD,WAAWmJ,SAElC,UACExM,MAAAA,EAAMqB,QAAQwN,sBAAd7O,EAAAA,EAAMqB,QAAQwN,iBAAmBnB,OACnB,IAAblB,GAA6B,MAARA,GAAAA,EAAWkB,EAAIlN,KACtC,EAEHmN,aAAc,KAAM,IAAAmB,EAClB,OAC+B,MAA7B9O,EAAMqB,QAAQ0N,qBAAe,EAA7B/O,EAAMqB,QAAQ0N,gBAAkBrB,OAC9B1N,EAAMqB,QAAQ2N,kBAAmB,MAAW,OAADF,EAACpB,EAAIuB,WAAJH,EAAa7Q,QAAO,EAGtEiR,yBAA0B,KACxB,MAAMC,EAAYzB,EAAIC,eAEtB,MAAO,KACAwB,GACLzB,EAAIe,gBAAgB,CACrB,KC7NHW,EAAgC,CACpC1B,EACA/J,EACA0L,KACG,IAAAC,EACH,MAAMC,EAASF,EAAYG,cAC3B,OAAqC,OAArCF,EAAO5B,EAAI+B,SAAiB9L,SAAS,EAA9B2L,EAAgCE,cAAc5O,SAAS2O,EAAO,EAGvEH,EAAeM,WAAcC,GAAaC,EAAWD,GAErD,MAAME,EAAyC,CAC7CnC,EACA/J,EACA0L,KACG,IAAAS,EACH,OAAqC,OAA9BpC,EAAAA,EAAI+B,SAAiB9L,SAAS,EAA9BmM,EAAgClP,SAASyO,EAAY,EAG9DQ,EAAwBH,WAAcC,GAAaC,EAAWD,GAE9D,MAAMI,EAA8B,CAClCrC,EACA/J,EACA0L,KACG,IAAAW,EACH,OACE,OAAAtC,EAAAA,EAAI+B,SAAiB9L,SAArB,EAAAqM,EAAgCR,iBAAkBH,EAAYG,aAAa,EAI/EO,EAAaL,WAAcC,GAAaC,EAAWD,GAEnD,MAAMM,EAA6B,CACjCvC,EACA/J,EACA0L,KACG,IAAAa,EACH,OAAwC,OAAjCxC,EAAAA,EAAI+B,SAAoB9L,SAAS,EAAjCuM,EAAmCtP,SAASyO,EAAY,EAGjEY,EAAYP,WAAcC,GAAaC,EAAWD,MAASA,MAAAA,GAAAA,EAAK1R,QAEhE,MAAMkS,EAAgC,CACpCzC,EACA/J,EACA0L,KAEQA,EAAYxQ,MAClB8Q,IAAG,IAAAS,EAAA,QAAsC,OAAjC1C,EAAAA,EAAI+B,SAAoB9L,KAAxByM,EAAmCxP,SAAS+O,GAAI,IAI5DQ,EAAeT,WAAcC,GAAaC,EAAWD,MAASA,MAAAA,GAAAA,EAAK1R,QAEnE,MAAMoS,EAAiC,CACrC3C,EACA/J,EACA0L,IAEOA,EAAYxQ,MAAK8Q,IAAG,IAAAW,EAAA,OACQ,OAAjC5C,EAAAA,EAAI+B,SAAoB9L,SAAS,EAAjC2M,EAAmC1P,SAAS+O,EAAI,IAIpDU,EAAgBX,WAAcC,GAAaC,EAAWD,MAASA,MAAAA,GAAAA,EAAK1R,QAEpE,MAAMsS,EAAwB,CAAC7C,EAAK/J,EAAkB0L,IAC7C3B,EAAI+B,SAAS9L,KAAc0L,EAGpCkB,EAAOb,WAAcC,GAAaC,EAAWD,GAE7C,MAAMa,EAA4B,CAChC9C,EACA/J,EACA0L,IAEO3B,EAAI+B,SAAS9L,IAAa0L,EAGnCmB,EAAWd,WAAcC,GAAaC,EAAWD,GAEjD,MAAMc,EAA+B,CACnC/C,EACA/J,EACA0L,KAEA,IAAKvP,EAAKD,GAAOwP,EAEjB,MAAMqB,EAAWhD,EAAI+B,SAAiB9L,GACtC,OAAO+M,GAAY5Q,GAAO4Q,GAAY7Q,CAAG,EAG3C4Q,EAAcE,mBAAsBhB,IAClC,IAAKiB,EAAWC,GAAalB,EAEzBmB,EACmB,iBAAdF,EAAyBG,WAAWH,GAAuBA,EAChEI,EACmB,iBAAdH,EAAyBE,WAAWF,GAAuBA,EAEhE/Q,EACY,OAAd8Q,GAAsB1J,OAAO+J,MAAMH,IAAcI,IAAWJ,EAC1DjR,EAAoB,OAAdgR,GAAsB3J,OAAO+J,MAAMD,GAAaE,IAAWF,EAErE,GAAIlR,EAAMD,EAAK,CACb,MAAMsR,EAAOrR,EACbA,EAAMD,EACNA,EAAMsR,CACR,CAEA,MAAO,CAACrR,EAAKD,EAAI,EAGnB4Q,EAAcf,WAAcC,GAC1BC,EAAWD,IAASC,EAAWD,EAAI,KAAOC,EAAWD,EAAI,IAIpD,MAAMyB,EAAY,CACvBhC,iBACAS,0BACAE,eACAE,cACAE,iBACAE,kBACAE,SACAC,aACAC,iBAOF,SAASb,EAAWD,GAClB,OAAOA,SAA6C,KAARA,CAC9C,CCgBO,MAAM0B,EAAwB,CACnChK,oBAAqB,KACZ,CACLiK,SAAU,SAIdhK,gBAAkBC,IACT,CACLgK,cAAe,GACfC,kBAAc9Q,KAGX6G,IAIPS,kBACEhI,IAEO,CACLyR,sBAAuB1U,EAAiB,gBAAiBiD,GACzD0R,qBAAsB3U,EAAiB,eAAgBiD,GACvD2R,oBAAoB,EACpBC,eAAgB,OAChBC,yBAA0B7Q,IAAU,IAAA8Q,EAAAC,EAClC,MAAMC,WAAQhS,EACXiS,kBACAxE,SAAS,KACC,SAHCqE,EAEEI,yBACblR,EAAOR,YAHIuR,EAGCtC,WAEf,MAAwB,iBAAVuC,GAAuC,iBAAVA,CAAkB,IAKnEjS,aAAc,CACZiB,EACAhB,KAEO,CACLmS,gBAAiB,KACf,MAAMC,EAAWpS,EAAMiS,kBAAkBxE,SAAS,GAE5CuE,EAAQI,MAAAA,OAAAA,EAAAA,EAAU3C,SAASzO,EAAOR,IAExC,MAAqB,iBAAVwR,EACFZ,EAAUhC,eAGE,iBAAV4C,EACFZ,EAAUX,cAGE,kBAAVuB,GAIG,OAAVA,GAAmC,iBAAVA,EAHpBZ,EAAUb,OAOf8B,MAAMC,QAAQN,GACTZ,EAAUnB,YAGZmB,EAAUZ,UAAU,EAE7B+B,YAAa,KAAM,IAAAC,EACjB,OAAOpV,EAAW4D,EAAOf,UAAUqR,UAC/BtQ,EAAOf,UAAUqR,SACa,SAA9BtQ,EAAOf,UAAUqR,SACjBtQ,EAAOmR,mBACP,SAAAnS,EAAMqB,QAAQ+P,gBAAd,EAAAoB,EAA0BxR,EAAOf,UAAUqR,YAC3CF,EAAUpQ,EAAOf,UAAUqR,SAA4B,EAE7DmB,aAAc,KAETzR,EAAOf,UAAUyS,qBAAsB,KACvC1S,EAAMqB,QAAQsR,sBAAuB,KACrC3S,EAAMqB,QAAQuR,gBAAiB,MAC9B5R,EAAOT,WAIbsS,mBAAoB,KAEf7R,EAAOf,UAAU6S,qBAAsB,KACvC9S,EAAMqB,QAAQyR,qBAAsB,KACpC9S,EAAMqB,QAAQuR,gBAAiB,MACO,MAAtC5S,EAAMqB,QAAQwQ,8BAAwB,EAAtC7R,EAAMqB,QAAQwQ,yBAA2B7Q,MAAW,MACnDA,EAAOT,WAIbwS,cAAe,IAAM/R,EAAOgS,kBAAoB,EAEhDC,eAAgB,KAAA,IAAAC,EAAAC,EAAA,OACgB,OAA9BnT,EAAAA,EAAMqD,WAAWkO,gBAAjB,OAA8B4B,EAA9BD,EAAgCtP,MAAKvG,GAAKA,EAAEmD,KAAOQ,EAAOR,WAA5B,EAA9B2S,EAA+DnB,KAAK,EAEtEgB,eAAgB,KAAA,IAAAI,EAAA,OACd,OAAAA,EAAApT,EAAMqD,WAAWkO,oBAAjB,EAAA6B,EAAgC1K,WAAUrL,GAAKA,EAAEmD,KAAOQ,EAAOR,QAC9D,CAAC,EAEJ6S,eAAgBrB,IACdhS,EAAMsT,kBAAiBnW,IACrB,MAAMmU,EAAWtQ,EAAOuR,cAClBgB,EAAiBpW,MAAAA,OAAAA,EAAAA,EAAKyG,MAAKvG,GAAKA,EAAEmD,KAAOQ,EAAOR,KAEhDgT,EAAY5W,EAChBoV,EACAuB,EAAiBA,EAAevB,WAAQtR,GAI1C,GACE+S,EACEnC,EACAkC,EACAxS,GAGF,OAAU,MAAH7D,OAAG,EAAHA,EAAK0G,QAAOxG,GAAKA,EAAEmD,KAAOQ,EAAOR,OAAO,GAGjD,MAAMkT,EAAe,CAAElT,GAAIQ,EAAOR,GAAIwR,MAAOwB,GAE7C,OAAID,GAEApW,MAAAA,OAAAA,EAAAA,EAAK2F,KAAIzF,GACHA,EAAEmD,KAAOQ,EAAOR,GACXkT,EAEFrW,MACH,GAIH,MAAHF,GAAAA,EAAKc,OACA,IAAId,EAAKuW,GAGX,CAACA,EAAa,GACrB,EAEJC,oBACE3T,EAAMqB,QAAQuS,oBACd5T,EAAMqB,QAAQuS,mBAAmB5T,EAAOgB,EAAOR,IACjDoT,mBAAoB,IACb5S,EAAO2S,oBAIL3S,EAAO2S,sBAHL3T,EAAM6T,yBAKjBC,wBACE9T,EAAMqB,QAAQ0S,wBACd/T,EAAMqB,QAAQ0S,uBAAuB/T,EAAOgB,EAAOR,IACrDuT,uBAAwB,IACjB/S,EAAO8S,wBAIL9S,EAAO8S,0BAHL,IAAIE,IAKfC,wBACEjU,EAAMqB,QAAQ6S,wBACdlU,EAAMqB,QAAQ6S,uBAAuBlU,EAAOgB,EAAOR,IACrD0T,uBAAwB,KACtB,GAAKlT,EAAOiT,wBAIZ,OAAOjT,EAAOiT,yBAAyB,IAO7CzF,UAAW,CACTd,EACA1N,KAEO,CACLuR,cAAe,CAAE,EACjB4C,kBAAmB,CAAC,IAIxBlR,YACEjD,IAEO,CACLoU,sBAAuB,IACdhD,EAAUhC,eAGnBiF,kBAAmB,KAAM,IAAAC,EACvB,MAAQ1C,eAAgBA,GAAmB5R,EAAMqB,QAEjD,OAAOjE,EAAWwU,GACdA,EACmB,SAAnBA,EACA5R,EAAMoU,yBACiB,OAAvBE,EAAAtU,EAAMqB,QAAQ+P,gBAAS,EAAvBkD,EAA0B1C,KAC1BR,EAAUQ,EAAkC,EAGlD0B,iBAAmBzW,IACjB,MAAM+E,EAAc5B,EAAMuU,oBAkB1BvU,MAAAA,EAAMqB,QAAQoQ,uBAAdzR,EAAMqB,QAAQoQ,uBAhBItU,IAA4B,IAAAqX,EAC5C,OAAqC,OAA9B5X,EAAAA,EAAiBC,EAASM,SAAI,EAA9BqX,EAAgC3Q,QAAOA,IAC5C,MAAM7C,EAASY,EAAYgC,MAAKvG,GAAKA,EAAEmD,KAAOqD,EAAOrD,KAErD,GAAIQ,EAAQ,CAGV,GAAIyS,EAFazS,EAAOuR,cAEa1O,EAAOmO,MAAOhR,GACjD,OAAO,CAEX,CAEA,OAAO,CAAI,GACX,GAG2C,EAGjDyT,gBAAiB5X,IACfmD,MAAAA,EAAMqB,QAAQqQ,sBAAd1R,EAAMqB,QAAQqQ,qBAAuB7U,EAAQ,EAG/C6X,kBAAmBpJ,IACjBtL,EAAMyU,gBACJnJ,OAAe5K,EAAYV,EAAMuL,aAAaiG,aAC/C,EAGHmD,mBAAoBrJ,IAAgB,IAAAgC,EAClCtN,EAAMsT,iBACJhI,EAAe,IAAK,OAAAgC,EAAAtN,EAAMuL,mBAAN,EAAA+B,EAAoBiE,gBAAiB,GAC1D,EAGHsC,uBAAwB,IAAM7T,EAAMiS,kBACpC2C,oBAAqB,MACd5U,EAAM6U,sBAAwB7U,EAAMqB,QAAQuT,sBAC/C5U,EAAM6U,qBAAuB7U,EAAMqB,QAAQuT,oBAAoB5U,IAG7DA,EAAMqB,QAAQyT,kBAAoB9U,EAAM6U,qBACnC7U,EAAM6T,yBAGR7T,EAAM6U,wBAGfE,0BACE/U,EAAMqB,QAAQuS,oBACd5T,EAAMqB,QAAQuS,mBAAmB5T,EAAO,cAE1CgV,yBAA0B,IACpBhV,EAAMqB,QAAQyT,kBAAoB9U,EAAM+U,0BACnC/U,EAAM6T,yBAGR7T,EAAM+U,4BAGfE,8BACEjV,EAAMqB,QAAQ0S,wBACd/T,EAAMqB,QAAQ0S,uBAAuB/T,EAAO,cAC9CkV,6BAA8B,IACvBlV,EAAMiV,8BAIJjV,EAAMiV,gCAHJ,IAAIjB,IAMfmB,8BACEnV,EAAMqB,QAAQ6S,wBACdlU,EAAMqB,QAAQ6S,uBAAuBlU,EAAO,cAC9CoV,6BAA8B,KAC5B,GAAKpV,EAAMmV,8BAIX,OAAOnV,EAAMmV,+BAA+B,KAM7C,SAAS1B,EACdnC,EACAU,EACAhR,GAEA,SACGsQ,IAAYA,EAAS5B,aAClB4B,EAAS5B,WAAWsC,EAAOhR,SAEd,IAAVgR,GACW,iBAAVA,IAAuBA,CAEnC,CC/cA,MA4GaqD,EAAiB,CAC5BjM,IA7G8B,CAACzF,EAAU2R,EAAWC,IAG7CA,EAAUzT,QAAO,CAACsH,EAAKoM,KAC5B,MAAMC,EAAYD,EAAK/F,SAAS9L,GAChC,OAAOyF,GAA4B,iBAAdqM,EAAyBA,EAAY,EAAE,GAC3D,GAwGH3V,IArG8B,CAAC6D,EAAU2R,EAAWC,KACpD,IAAIzV,EAaJ,OAXAyV,EAAU1X,SAAQ6P,IAChB,MAAMsE,EAAQtE,EAAI+B,SAAiB9L,GAGxB,MAATqO,IACClS,EAAOkS,QAAkBtR,IAARZ,GAAqBkS,GAASA,KAEhDlS,EAAMkS,EACR,IAGKlS,CAAG,EAwFVD,IArF8B,CAAC8D,EAAU2R,EAAWC,KACpD,IAAI1V,EAYJ,OAVA0V,EAAU1X,SAAQ6P,IAChB,MAAMsE,EAAQtE,EAAI+B,SAAiB9L,GAExB,MAATqO,IACCnS,EAAOmS,QAAkBtR,IAARb,GAAqBmS,GAASA,KAEhDnS,EAAMmS,EACR,IAGKnS,CAAG,EAyEV6V,OAtEiC,CAAC/R,EAAU2R,EAAWC,KACvD,IAAIzV,EACAD,EAcJ,OAZA0V,EAAU1X,SAAQ6P,IAChB,MAAMsE,EAAQtE,EAAI+B,SAAiB9L,GACtB,MAATqO,SACUtR,IAARZ,EACEkS,GAASA,IAAOlS,EAAMD,EAAMmS,IAE5BlS,EAAMkS,IAAOlS,EAAMkS,GACnBnS,EAAOmS,IAAOnS,EAAMmS,IAE5B,IAGK,CAAClS,EAAKD,EAAI,EAuDjB8V,KApD+B,CAAChS,EAAUiS,KAC1C,IAAIC,EAAQ,EACRzM,EAAM,EASV,GAPAwM,EAAS/X,SAAQ6P,IACf,IAAIsE,EAAQtE,EAAI+B,SAAiB9L,GACpB,MAATqO,IAAkBA,GAASA,IAAUA,MACrC6D,EAAQzM,GAAO4I,EACnB,IAGE6D,EAAO,OAAOzM,EAAMyM,CAExB,EAwCAC,OArCiC,CAACnS,EAAUiS,KAC5C,IAAKA,EAAS3X,OACZ,OAGF,IAAI6B,EAAM,EACND,EAAM,EAUV,OARA+V,EAAS/X,SAAQ6P,IACf,IAAIsE,EAAQtE,EAAI+B,SAAS9L,GACJ,iBAAVqO,IACTlS,EAAMX,KAAKW,IAAIA,EAAKkS,GACpBnS,EAAMV,KAAKU,IAAIA,EAAKmS,GACtB,KAGMlS,EAAMD,GAAO,CAAC,EAsBtBkW,OAnBiC,CAACpS,EAAUiS,IACrCvD,MAAM2D,KAAK,IAAIC,IAAIL,EAAS9S,KAAIzF,GAAKA,EAAEoS,SAAS9L,MAAYmK,UAmBnEoI,YAhBsC,CAACvS,EAAUiS,IAC1C,IAAIK,IAAIL,EAAS9S,KAAIzF,GAAKA,EAAEoS,SAAS9L,MAAYoD,KAgBxD8O,MAbgC,CAACM,EAAWP,IACrCA,EAAS3X,QCRLmY,EAAyB,CACpC/O,oBAAqB,KAIZ,CACLgP,eAAgBC,IAAK,IAAAC,EAAA,OAAqB,OAAhBD,EAAAA,EAAM7G,aAAP,MAAA8G,EAA2BC,cAAV,EAAjBD,EAA2BC,aAAgB,IAAI,EACxEC,cAAe,SAInBnP,gBAAkBC,IACT,CACLmP,SAAU,MACPnP,IAIPS,kBACEhI,IAEO,CACL2W,iBAAkB5Z,EAAiB,WAAYiD,GAC/C4W,kBAAmB,YAIvB7W,aAAc,CACZiB,EACAhB,KAEO,CACL6W,eAAgB,KACd7W,EAAM8W,aAAY3Z,GAEZA,MAAAA,GAAAA,EAAKyD,SAASI,EAAOR,IAChBrD,EAAI0G,QAAOxG,GAAKA,IAAM2D,EAAOR,KAG/B,IAAKrD,GAAO,GAAK6D,EAAOR,KAC/B,EAGJuW,YAAa,IAET/V,EAAOf,UAAU+W,iBACjB,GACAhX,EAAMqB,QAAQ2V,iBACd,KACEhW,EAAOT,WAIb0W,aAAc,KAAM,IAAAC,EAClB,OAAO,OAAPA,EAAOlX,EAAMqD,WAAWqT,eAAjB,EAAAQ,EAA2BtW,SAASI,EAAOR,GAAG,EAGvD2W,gBAAiB,KAAA,IAAAC,EAAA,OAAM,OAANA,EAAMpX,EAAMqD,WAAWqT,eAAjB,EAAAU,EAA2BC,QAAQrW,EAAOR,GAAG,EAEpE8W,yBAA0B,KACxB,MAAMC,EAAWvW,EAAO+V,cAExB,MAAO,KACAQ,GACLvW,EAAO6V,gBAAgB,CACxB,EAEHW,qBAAsB,KACpB,MAAMpF,EAAWpS,EAAMiS,kBAAkBxE,SAAS,GAE5CuE,EAAQI,MAAAA,OAAAA,EAAAA,EAAU3C,SAASzO,EAAOR,IAExC,MAAqB,iBAAVwR,EACFqD,EAAejM,IAGsB,kBAA1CnH,OAAOwV,UAAUjB,SAASkB,KAAK1F,GAC1BqD,EAAeK,YADxB,CAEA,EAEFiC,iBAAkB,KAAM,IAAAC,EACtB,IAAK5W,EACH,MAAM,IAAID,MAGZ,OAAO3D,EAAW4D,EAAOf,UAAUwW,eAC/BzV,EAAOf,UAAUwW,cACkB,SAAnCzV,EAAOf,UAAUwW,cACjBzV,EAAOwW,wBACP,SAAAxX,EAAMqB,QAAQgU,qBAAd,EAAAuC,EACE5W,EAAOf,UAAUwW,iBAEnBpB,EACErU,EAAOf,UAAUwW,cAClB,IAKXxT,YACEjD,IAEO,CACL8W,YAAaja,GAAWmD,MAAAA,EAAMqB,QAAQsV,sBAAd3W,EAAAA,EAAMqB,QAAQsV,iBAAmB9Z,GAEzDgb,cAAevM,IAAgB,IAAAgC,EAC7BtN,EAAM8W,YACJxL,EAAe,IAAK,OAAAgC,EAAAtN,EAAMuL,mBAAN,EAAA+B,EAAoBoJ,WAAY,GACrD,EAGHoB,sBAAuB,IAAM9X,EAAM4U,sBACnCmD,mBAAoB,MACb/X,EAAMgY,qBAAuBhY,EAAMqB,QAAQ0W,qBAC9C/X,EAAMgY,oBAAsBhY,EAAMqB,QAAQ0W,mBAAmB/X,IAG3DA,EAAMqB,QAAQ4W,iBAAmBjY,EAAMgY,oBAClChY,EAAM8X,wBAGR9X,EAAMgY,yBAKnBxJ,UAAmCd,IAC1B,CACLuJ,aAAc,MAAQvJ,EAAIwK,iBAC1BC,qBAAsB,CAAC,IAI3BC,WAAY,CACVC,EACArX,EACA0M,EACA1N,KAKO,CACLiX,aAAc,IACZjW,EAAOiW,gBAAkBjW,EAAOR,KAAOkN,EAAIwK,iBAC7CI,iBAAkB,KAAOD,EAAKpB,gBAAkBjW,EAAOiW,eACvDsB,gBAAiB,KAAA,IAAAzJ,EAAA,OACduJ,EAAKpB,iBACLoB,EAAKC,sBACO,OAAX5K,EAAAA,EAAIuB,WAAJH,EAAa7Q,OAAM,KAKtB,SAASyD,EACdE,EACA8U,EACAE,GAEA,GAAKF,MAAAA,IAAAA,EAAUzY,SAAW2Y,EACxB,OAAOhV,EAGT,MAAM4W,EAAqB5W,EAAYiC,QACrC4U,IAAQ/B,EAAS9V,SAAS6X,EAAIjY,MAGhC,GAA0B,WAAtBoW,EACF,OAAO4B,EAOT,MAAO,IAJiB9B,EACrB5T,KAAI4V,GAAK9W,EAAYgC,MAAK6U,GAAOA,EAAIjY,KAAOkY,MAC5C7U,OAAOC,YAEqB0U,EACjC,CCpPO,MAAMG,EAAyB,CACpCrR,gBAAkBC,IACT,CACLqR,YAAa,MACVrR,IAIPS,kBACEhI,IAEO,CACL6Y,oBAAqB9b,EAAiB,cAAeiD,KAIzDiD,YACEjD,IAEO,CACL8Y,eAAgBjc,GAAWmD,MAAAA,EAAMqB,QAAQwX,yBAAd7Y,EAAAA,EAAMqB,QAAQwX,oBAAsBhc,GAC/Dkc,iBAAkBzN,IAChBtL,EAAM8Y,eACJxN,EAAe,GAAKtL,EAAMuL,aAAaqN,aAAe,GACvD,EAEHnX,mBAAoBvD,GAClB,IAAM,CACJ8B,EAAMqD,WAAWuV,YACjB5Y,EAAMqD,WAAWqT,SACjB1W,EAAMqB,QAAQuV,qBAEhB,CAACgC,EAAalC,EAAUE,IAAsB3V,IAG5C,IAAI+X,EAA2C,GAG/C,GAAgB,MAAXJ,GAAAA,EAAa3a,OAEX,CACL,MAAMgb,EAAkB,IAAIL,GAGtBM,EAAc,IAAIjY,GAKxB,KAAOiY,EAAYjb,QAAUgb,EAAgBhb,QAAQ,CACnD,MAAMkb,EAAiBF,EAAgBG,QACjCC,EAAaH,EAAYxQ,WAC7BrL,GAAKA,EAAEmD,KAAO2Y,IAEZE,GAAc,GAChBL,EAAejb,KAAKmb,EAAYI,OAAOD,EAAY,GAAG,GAE1D,CAGAL,EAAiB,IAAIA,KAAmBE,EAC1C,MAtBEF,EAAiB/X,EAwBnB,OAAOS,EAAasX,EAAgBtC,EAAUE,EAAkB,GAElE,CACE5Z,KAAKiH,OCtCFsV,EAA2B,CACtCjS,gBAAkBC,IACT,IACFA,EACHiS,WAAY,CARhBC,UAJuB,EAKvBC,SAJsB,MAaR,MAALnS,OAAK,EAALA,EAAOiS,cAKhBxR,kBACEhI,IAEO,CACL2Z,mBAAoB5c,EAAiB,aAAciD,KAIvDiD,YACEjD,IAEA,IAAI2M,GAAa,EACbC,GAAS,EAEb,MAAO,CACLgN,oBAAqB,KACnB,GAAKjN,GAOL,GACE3M,EAAMqB,QAAQyL,cACd9M,EAAMqB,QAAQwY,qBACb7Z,EAAMqB,QAAQyY,iBACf,CACA,GAAIlN,EAAQ,OACZA,GAAS,EACT5M,EAAMiN,QAAO,KACXjN,EAAM+Z,iBACNnN,GAAS,CAAK,GAElB,OAjBE5M,EAAMiN,QAAO,KACXN,GAAa,CAAI,GAgBrB,EAEFqN,cAAend,GAO0B,MAAhCmD,EAAMqB,QAAQsY,wBAAkB,EAAhC3Z,EAAMqB,QAAQsY,oBANyBxc,GAC7BP,EAAiBC,EAASM,KAO7C8c,gBAAiB3O,IACftL,EAAMga,cACJ1O,EA/DgD,CACxDmO,UAJuB,EAKvBC,SAJsB,IAmEV1Z,EAAMuL,aAAaiO,YAjEyB,CACxDC,UAJuB,EAKvBC,SAJsB,IAoEf,EAEHQ,aAAcrd,IACZmD,EAAMga,eAAc7c,IAClB,IAAIsc,EAAY7c,EAAiBC,EAASM,EAAIsc,WAE9C,MAAMU,OAC+B,IAA5Bna,EAAMqB,QAAQ+Y,YACQ,IAA7Bpa,EAAMqB,QAAQ+Y,UACVlT,OAAOC,iBACPnH,EAAMqB,QAAQ+Y,UAAY,EAIhC,OAFAX,EAAYta,KAAKW,IAAIX,KAAKU,IAAI,EAAG4Z,GAAYU,GAEtC,IACFhd,EACHsc,YACD,GACD,EAEJM,eAAgBzO,IAAgB,IAAAgC,EAAA+M,EAC9Bra,EAAMka,aACJ5O,EA3Fe,GA6FO,OAAlBtL,EAAAA,EAAMuL,eAAwB,OAAZ8O,EAAlB/M,EAAoBkM,iBAAF,EAAlBa,EAAgCZ,YA7FrB,EA8FhB,EAEHa,cAAehP,IAAgB,IAAAiP,EAAAC,EAC7Bxa,EAAMya,YACJnP,EAjGc,IAmGQ,OAAlBtL,EAAAA,EAAMuL,eAAwB,OAAZiP,EAAlBD,EAAoBf,iBAAF,EAAlBgB,EAAgCd,WAnGtB,GAoGf,EAEHe,YAAa5d,IACXmD,EAAMga,eAAc7c,IAClB,MAAMuc,EAAWva,KAAKU,IAAI,EAAGjD,EAAiBC,EAASM,EAAIuc,WACrDgB,EAAcvd,EAAIuc,SAAWvc,EAAIsc,UACjCA,EAAYta,KAAKwb,MAAMD,EAAchB,GAE3C,MAAO,IACFvc,EACHsc,YACAC,WACD,GACD,EAEJkB,aAAc/d,GACZmD,EAAMga,eAAc7c,IAClB,IAAI0d,EAAeje,EACjBC,EACAmD,EAAMqB,QAAQ+Y,YAAc,GAO9B,MAJ4B,iBAAjBS,IACTA,EAAe1b,KAAKU,KAAK,EAAGgb,IAGvB,IACF1d,EACHid,UAAWS,EACZ,IAGLC,eAAgB5c,GACd,IAAM,CAAC8B,EAAM+a,kBACbX,IACE,IAAIY,EAAwB,GAI5B,OAHIZ,GAAaA,EAAY,IAC3BY,EAAc,IAAI,IAAI3I,MAAM+H,IAAYa,KAAK,MAAMnY,KAAI,CAACgG,EAAGoS,IAAMA,KAE5DF,CAAW,GAEpB,CACEhe,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,aAIzDC,mBAAoB,IAAMpb,EAAMqD,WAAWmW,WAAWC,UAAY,EAElE4B,eAAgB,KACd,MAAM5B,UAAEA,GAAczZ,EAAMqD,WAAWmW,WAEjCY,EAAYpa,EAAM+a,eAExB,OAAmB,IAAfX,GAIc,IAAdA,GAIGX,EAAYW,EAAY,CAAC,EAGlCkB,aAAc,IACLtb,EAAMka,cAAa/c,GAAOA,EAAM,IAGzCoe,SAAU,IACDvb,EAAMka,cAAa/c,GACjBA,EAAM,IAIjBqe,yBAA0B,IAAMxb,EAAMsO,sBACtCmN,sBAAuB,MAElBzb,EAAM0b,wBACP1b,EAAMqB,QAAQoa,wBAEdzb,EAAM0b,uBACJ1b,EAAMqB,QAAQoa,sBAAsBzb,IAGpCA,EAAMqB,QAAQyY,mBAAqB9Z,EAAM0b,uBACpC1b,EAAMwb,2BAGRxb,EAAM0b,0BAGfX,aAAc,IAEV/a,EAAMqB,QAAQ+Y,WACdjb,KAAKwc,KACH3b,EAAMwb,2BAA2BI,KAAK3d,OACpC+B,EAAMqD,WAAWmW,WAAWE,UAIrC,GC5LQmC,EAAwB,CACnCvU,gBAAkBC,IACT,CACLjE,cARoD,CACxDC,KAAM,GACNC,MAAO,OAOA+D,IAIPS,kBACEhI,IAEO,CACL8b,sBAAuB/e,EAAiB,gBAAiBiD,KAI7DD,aAAc,CACZiB,EACAhB,KAEO,CACL+b,IAAKxT,IACH,MAAMyT,EAAYhb,EACfQ,iBACAsB,KAAIzF,GAAKA,EAAEmD,KACXqD,OAAOC,SAEV9D,EAAMic,kBAAiB9e,GACJ,UAAboL,EACK,CACLhF,OAAU,MAAHpG,OAAG,EAAHA,EAAKoG,OAAQ,IAAIM,QAAOxG,KAAM2e,MAAAA,GAAAA,EAAWpb,SAASvD,MACzDmG,MAAO,MACDrG,MAAAA,OAAAA,EAAAA,EAAKqG,QAAS,IAAIK,QAAOxG,KAAe,MAAT2e,GAAAA,EAAWpb,SAASvD,SACpD2e,IAKQ,SAAbzT,EACK,CACLhF,KAAM,MACApG,MAAAA,OAAAA,EAAAA,EAAKoG,OAAQ,IAAIM,QAAOxG,KAAM2e,MAAAA,GAAAA,EAAWpb,SAASvD,SACnD2e,GAELxY,cAAQrG,SAAAA,EAAKqG,QAAS,IAAIK,QAAOxG,KAAe,MAAT2e,GAAAA,EAAWpb,SAASvD,OAIxD,CACLkG,OAAU,MAAHpG,OAAG,EAAHA,EAAKoG,OAAQ,IAAIM,QAAOxG,KAAM2e,MAAAA,GAAAA,EAAWpb,SAASvD,MACzDmG,cAAQrG,SAAAA,EAAKqG,QAAS,IAAIK,QAAOxG,KAAe,MAAT2e,GAAAA,EAAWpb,SAASvD,QAE7D,EAGJ6e,UAAW,IACWlb,EAAOQ,iBAER3C,MACjBxB,IACGA,EAAE4C,UAAUkc,gBAAiB,KAC7Bnc,EAAMqB,QAAQ8a,gBAAiB,KAItCC,YAAa,KACX,MAAMC,EAAgBrb,EAAOQ,iBAAiBsB,KAAIzF,GAAKA,EAAEmD,MAEnD+C,KAAEA,EAAIC,MAAEA,GAAUxD,EAAMqD,WAAWC,cAEnCgZ,EAASD,EAAcxd,MAAKxB,GAAS,MAAJkG,OAAI,EAAJA,EAAM3C,SAASvD,KAChDkf,EAAUF,EAAcxd,MAAKxB,GAAU,MAALmG,OAAK,EAALA,EAAO5C,SAASvD,KAExD,OAAOif,EAAS,SAASC,GAAU,OAAe,EAGpDC,eAAgB,KAAM,IAAAtJ,EAAAC,EACpB,MAAM5K,EAAWvH,EAAOob,cAExB,OAAO7T,GAC2B,OAA9B2K,EAAAlT,EAAMqD,WAAWC,gBAAjB,OAA8B6P,EAA9BD,EAAiC3K,SAAH,EAA9B4K,EAA4CkE,QAAQrW,EAAOR,OAAQ,EACnE,CAAC,IAKXgO,UAAW,CACTd,EACA1N,KAEO,CACLyc,sBAAuBve,GACrB,IAAM,CACJwP,EAAIgP,sBACJ1c,EAAMqD,WAAWC,cAAcC,KAC/BvD,EAAMqD,WAAWC,cAAcE,SAEjC,CAACmZ,EAAUpZ,EAAMC,KACf,MAAMoZ,EAAyB,IAAKrZ,GAAQ,MAASC,GAAS,IAE9D,OAAOmZ,EAAS9Y,QAAOxG,IAAMuf,EAAahc,SAASvD,EAAE2D,OAAOR,KAAI,GAElE,CACExD,IAEE,4BACFyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQwb,YAGzDC,oBAAqB5e,GACnB,IAAM,CACJwP,EAAIgP,sBACJ1c,EAAMqD,WAAWC,cAAcC,KAEhC,KACD,CAACoZ,EAAUpZ,KACMA,GAAQ,IACpBT,KACCa,GAAYgZ,EAAS/Y,MAAKyU,GAAQA,EAAKrX,OAAOR,KAAOmD,MAEtDE,OAAOC,SACPhB,KAAIzF,IAAM,IAAKA,EAAGkL,SAAU,YAIjC,CACEvL,IAC2C,0BAC3CyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQwb,YAGzDE,qBAAsB7e,GACpB,IAAM,CAACwP,EAAIgP,sBAAuB1c,EAAMqD,WAAWC,cAAcE,SACjE,CAACmZ,EAAUnZ,KACMA,GAAS,IACrBV,KACCa,GAAYgZ,EAAS/Y,MAAKyU,GAAQA,EAAKrX,OAAOR,KAAOmD,MAEtDE,OAAOC,SACPhB,KAAIzF,IAAM,IAAKA,EAAGkL,SAAU,aAIjC,CACEvL,IAC2C,2BAC3CyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQwb,cAM7D5Z,YACEjD,IAEO,CACLic,iBAAkBpf,GAChBmD,MAAAA,EAAMqB,QAAQya,2BAAd9b,EAAAA,EAAMqB,QAAQya,sBAAwBjf,GAExCmgB,mBAAoB1R,IAAY,IAAAgC,EAAA,OAC9BtN,EAAMic,iBACJ3Q,EAtKgD,CACxD/H,KAAM,GACNC,MAAO,KAsKK,SAAAxD,EAAMuL,mBAAN,EAAA+B,EAAoBhK,gBAxKwB,CACxDC,KAAM,GACNC,MAAO,IAuKA,EAEHyZ,uBAAwB1U,IAAY,IAAA2U,EAClC,MAAMC,EAAend,EAAMqD,WAAWC,cAEvB,IAAA8Z,EAAAC,EAAf,OAAK9U,EAKEzE,QAA8B,SAAtBqZ,EAAa5U,SAAS,EAAtB2U,EAAwBjf,QAJ9B6F,SACL,OAAAsZ,EAAAD,EAAa5Z,WAAb,EAAA6Z,EAAmBnf,UAAU,OAAJof,EAAIF,EAAa3Z,YAAb,EAAA6Z,EAAoBpf,QAGP,EAGhDqf,mBAAoBpf,GAClB,IAAM,CAAC8B,EAAMuU,oBAAqBvU,EAAMqD,WAAWC,cAAcC,QACjE,CAACE,EAAYF,KACHA,GAAQ,IACbT,KAAIa,GAAYF,EAAWG,MAAK5C,GAAUA,EAAOR,KAAOmD,MACxDE,OAAOC,UAEZ,CACE9G,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,eAIzDgc,oBAAqBrf,GACnB,IAAM,CAAC8B,EAAMuU,oBAAqBvU,EAAMqD,WAAWC,cAAcE,SACjE,CAACC,EAAYD,KACHA,GAAS,IACdV,KAAIa,GAAYF,EAAWG,MAAK5C,GAAUA,EAAOR,KAAOmD,MACxDE,OAAOC,UAEZ,CACE9G,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,eAIzDic,qBAAsBtf,GACpB,IAAM,CACJ8B,EAAMuU,oBACNvU,EAAMqD,WAAWC,cAAcC,KAC/BvD,EAAMqD,WAAWC,cAAcE,SAEjC,CAACC,EAAYF,EAAMC,KACjB,MAAMoZ,EAAyB,IAAKrZ,GAAQ,MAASC,GAAS,IAE9D,OAAOC,EAAWI,QAAOxG,IAAMuf,EAAahc,SAASvD,EAAEmD,KAAI,GAE7D,CACExD,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,kBC/NlDkc,EAA6B,CACxCnW,gBAAkBC,IACT,CACLmW,aAAc,CAAE,KACbnW,IAIPS,kBACEhI,IAEO,CACL2d,qBAAsB5gB,EAAiB,eAAgBiD,GACvD4d,oBAAoB,EACpBC,yBAAyB,EACzBC,uBAAuB,IAO3B7a,YACEjD,IAEO,CACL+d,gBAAiBlhB,GAAWmD,MAAAA,EAAMqB,QAAQsc,0BAAd3d,EAAAA,EAAMqB,QAAQsc,qBAAuB9gB,GACjEmhB,kBAAmB1S,GACjBtL,EAAM+d,gBACJzS,EAAe,CAAE,EAAGtL,EAAMuL,aAAamS,cAAgB,IAE3DO,sBAAuBjM,IACrBhS,EAAM+d,iBAAgB5gB,IACpB6U,OACmB,IAAVA,EAAwBA,GAAShS,EAAMke,uBAEhD,MAAMR,EAAe,IAAKvgB,GAEpBghB,EAAqBne,EAAM8X,wBAAwBrK,SAiBzD,OAbIuE,EACFmM,EAAmBtgB,SAAQ6P,IACpBA,EAAI0Q,iBAGTV,EAAahQ,EAAIlN,KAAM,EAAI,IAG7B2d,EAAmBtgB,SAAQ6P,WAClBgQ,EAAahQ,EAAIlN,GAAG,IAIxBkd,CAAY,GACnB,EAEJW,0BAA2BrM,GACzBhS,EAAM+d,iBAAgB5gB,IACpB,MAAMmhB,OACa,IAAVtM,EACHA,GACChS,EAAMue,2BAEPb,EAAkC,IAAKvgB,GAM7C,OAJA6C,EAAMwN,cAAcoO,KAAK/d,SAAQ6P,IAC/B8Q,EAAoBd,EAAchQ,EAAIlN,GAAI8d,EAAete,EAAM,IAG1D0d,CAAY,IA6DvBe,uBAAwB,IAAMze,EAAMiS,kBACpCyM,oBAAqBxgB,GACnB,IAAM,CAAC8B,EAAMqD,WAAWqa,aAAc1d,EAAMiS,qBAC5C,CAACyL,EAAciB,IACR1c,OAAO8L,KAAK2P,GAAczf,OAQxB2gB,EAAa5e,EAAO2e,GAPlB,CACL/C,KAAM,GACNnO,SAAU,GACVS,SAAU,CAAC,IAMjB,CACElR,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,aAIzD0D,4BAA6B3gB,GAC3B,IAAM,CAAC8B,EAAMqD,WAAWqa,aAAc1d,EAAM4U,yBAC5C,CAAC8I,EAAciB,IACR1c,OAAO8L,KAAK2P,GAAczf,OAQxB2gB,EAAa5e,EAAO2e,GAPlB,CACL/C,KAAM,GACNnO,SAAU,GACVS,SAAU,CAAC,IAMjB,CACElR,IAEE,8BACFyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,aAIzD2D,2BAA4B5gB,GAC1B,IAAM,CAAC8B,EAAMqD,WAAWqa,aAAc1d,EAAMqO,uBAC5C,CAACqP,EAAciB,IACR1c,OAAO8L,KAAK2P,GAAczf,OAQxB2gB,EAAa5e,EAAO2e,GAPlB,CACL/C,KAAM,GACNnO,SAAU,GACVS,SAAU,CAAC,IAMjB,CACElR,IAEE,6BACFyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,aAoBzD+C,qBAAsB,KACpB,MAAMC,EAAqBne,EAAM4U,sBAAsBnH,UACjDiQ,aAAEA,GAAiB1d,EAAMqD,WAE/B,IAAI0b,EAAoBjb,QACtBqa,EAAmBlgB,QAAUgE,OAAO8L,KAAK2P,GAAczf,QAazD,OAVI8gB,GAEAZ,EAAmBtf,MACjB6O,GAAOA,EAAI0Q,iBAAmBV,EAAahQ,EAAIlN,QAGjDue,GAAoB,GAIjBA,CAAiB,EAG1BR,yBAA0B,KACxB,MAAMS,EAAqBhf,EAAMyb,wBAAwBhO,UACnDiQ,aAAEA,GAAiB1d,EAAMqD,WAE/B,IAAI4b,IAA0BD,EAAmB/gB,OASjD,OANEghB,GACAD,EAAmBngB,MAAK6O,IAAQgQ,EAAahQ,EAAIlN,QAEjDye,GAAwB,GAGnBA,CAAqB,EAG9BC,sBAAuB,KACrB,MAAMC,EAAgBld,OAAO8L,KAC3B/N,EAAMqD,WAAWqa,cAAgB,IACjCzf,OACF,OACEkhB,EAAgB,GAChBA,EAAgBnf,EAAM4U,sBAAsBnH,SAASxP,MAAM,EAI/DmhB,0BAA2B,KACzB,MAAMJ,EAAqBhf,EAAMyb,wBAAwBhO,SACzD,OAAOzN,EAAMue,4BAETS,EAAmBngB,MACjBxB,GAAKA,EAAEgiB,iBAAmBhiB,EAAEiiB,qBAC7B,EAGPC,gCAAiC,IACvB9V,IACNzJ,EAAMie,sBACFxU,EAAiB+V,OAA4BC,QAChD,EAILC,oCAAqC,IAC3BjW,IACNzJ,EAAMqe,0BACF5U,EAAiB+V,OAA4BC,QAChD,IAMTjR,UAAW,CACTd,EACA1N,KAEO,CACL2f,eAAgB3N,IACd,MAAM4N,EAAalS,EAAI2R,gBAEvBrf,EAAM+d,iBAAgB5gB,IAGpB,GAAIyiB,KAFJ5N,OAAyB,IAAVA,EAAwBA,GAAS4N,GAG9C,OAAOziB,EAGT,MAAM0iB,EAAiB,IAAK1iB,GAI5B,OAFAqhB,EAAoBqB,EAAgBnS,EAAIlN,GAAIwR,EAAOhS,GAE5C6f,CAAc,GACrB,EAEJR,cAAe,KACb,MAAM3B,aAAEA,GAAiB1d,EAAMqD,WAC/B,OAAOyc,EAAcpS,EAAKgQ,EAAa,EAGzC4B,kBAAmB,KACjB,MAAM5B,aAAEA,GAAiB1d,EAAMqD,WAC/B,MAAsD,SAA/C0c,EAAiBrS,EAAKgQ,EAA+B,EAG9DsC,wBAAyB,KACvB,MAAMtC,aAAEA,GAAiB1d,EAAMqD,WAC/B,MAAsD,QAA/C0c,EAAiBrS,EAAKgQ,EAA8B,EAG7DU,aAAc,IACoC,mBAArCpe,EAAMqB,QAAQuc,mBAChB5d,EAAMqB,QAAQuc,mBAAmBlQ,GAGnC1N,EAAMqB,QAAQuc,qBAAsB,EAG7CqC,oBAAqB,IACgC,mBAAxCjgB,EAAMqB,QAAQyc,sBAChB9d,EAAMqB,QAAQyc,sBAAsBpQ,GAGtC1N,EAAMqB,QAAQyc,wBAAyB,EAGhDoC,kBAAmB,IACoC,mBAA1ClgB,EAAMqB,QAAQwc,wBAChB7d,EAAMqB,QAAQwc,wBAAwBnQ,GAGxC1N,EAAMqB,QAAQwc,0BAA2B,EAElDsC,yBAA0B,KACxB,MAAMC,EAAY1S,EAAI0Q,eAEtB,OAAQ3U,IAAe,IAAA4W,EAChBD,GACL1S,EAAIiS,eACuB,OAAvBlW,EAAAA,EAAiB+V,aAAM,EAAzBa,EAAgDZ,QACjD,CACF,KAMHjB,EAAsB,CAC1BqB,EACArf,EACAwR,EACAhS,KACG,IAAA8O,EACH,MAAMpB,EAAM1N,EAAMsgB,OAAO9f,GAQrBwR,GACGtE,EAAIwS,qBACPje,OAAO8L,KAAK8R,GAAgBhiB,SAAQb,UAAc6iB,EAAe7iB,KAE/D0Q,EAAI0Q,iBACNyB,EAAerf,IAAM,WAGhBqf,EAAerf,GAIpB,OAAAkN,EAAAA,EAAIuB,UAAJH,EAAa7Q,QAAUyP,EAAIuS,uBAC7BvS,EAAIuB,QAAQpR,SAAQ6P,GAClB8Q,EAAoBqB,EAAgBnS,EAAIlN,GAAIwR,EAAOhS,IAEvD,EAGK,SAAS4e,EACd5e,EACA2e,GAEA,MAAMjB,EAAe1d,EAAMqD,WAAWqa,aAEhC6C,EAAoC,GACpCC,EAAkD,CAAA,EAGlDC,EAAc,SAAC7E,EAAoB1b,GACvC,OAAO0b,EACJ9Y,KAAI4K,IAAO,IAAAgT,EACV,MAAMd,EAAaE,EAAcpS,EAAKgQ,GActC,GAZIkC,IACFW,EAAoBxiB,KAAK2P,GACzB8S,EAAoB9S,EAAIlN,IAAMkN,GAG5B,OAAJgT,EAAIhT,EAAIuB,UAAJyR,EAAaziB,SACfyP,EAAM,IACDA,EACHuB,QAASwR,EAAY/S,EAAIuB,WAIzB2Q,EACF,OAAOlS,CACT,IAED7J,OAAOC,UAGZ,MAAO,CACL8X,KAAM6E,EAAY9B,EAAS/C,MAC3BnO,SAAU8S,EACVrS,SAAUsS,EAEd,CAEO,SAASV,EACdpS,EACAiT,GAEA,OAAOA,EAAUjT,EAAIlN,MAAO,CAC9B,CAEO,SAASuf,EACdrS,EACAiT,EACA3gB,GAEA,GAAI0N,EAAIuB,SAAWvB,EAAIuB,QAAQhR,OAAQ,CACrC,IAAI2iB,GAAsB,EACtBC,GAAe,EAenB,OAbAnT,EAAIuB,QAAQpR,SAAQijB,IAEdD,IAAiBD,IAIjBd,EAAcgB,EAAQH,GACxBE,GAAe,EAEfD,GAAsB,EACxB,IAGKA,EAAsB,QAAQC,GAAe,MACtD,CAEA,OAAO,CACT,CCzgBaE,MAAAA,EAAsB,aAkDnC,SAASC,EAAaC,EAAQC,GAC5B,OAAOD,IAAMC,EAAI,EAAID,EAAIC,EAAI,GAAK,CACpC,CAEA,SAAS1K,EAASyK,GAChB,MAAiB,iBAANA,EACLhQ,MAAMgQ,IAAMA,IAAM/P,KAAY+P,KAAO/P,IAChC,GAEFxR,OAAOuhB,GAEC,iBAANA,EACFA,EAEF,EACT,CAKA,SAASE,EAAoBC,EAAcC,GAGzC,MAAMJ,EAAIG,EAAKtgB,MAAMigB,GAAqBld,OAAOC,SAC3Cod,EAAIG,EAAKvgB,MAAMigB,GAAqBld,OAAOC,SAGjD,KAAOmd,EAAEhjB,QAAUijB,EAAEjjB,QAAQ,CAC3B,MAAMqjB,EAAKL,EAAE7H,QACPmI,EAAKL,EAAE9H,QAEPoI,EAAKC,SAASH,EAAI,IAClBI,EAAKD,SAASF,EAAI,IAElBI,EAAQ,CAACH,EAAIE,GAAIE,OAGvB,GAAI3Q,MAAM0Q,EAAM,IAAhB,CACE,GAAIL,EAAKC,EACP,OAAO,EAET,GAAIA,EAAKD,EACP,OAAQ,CAGZ,KARA,CAWA,GAAIrQ,MAAM0Q,EAAM,IACd,OAAO1Q,MAAMuQ,IAAO,EAAI,EAI1B,GAAIA,EAAKE,EACP,OAAO,EAET,GAAIA,EAAKF,EACP,OAAQ,CAZV,CAcF,CAEA,OAAOP,EAAEhjB,OAASijB,EAAEjjB,MACtB,CAIO,MAAM4jB,EAAa,CACxBC,aAnHmC,CAACC,EAAMC,EAAMre,IACzCwd,EACL3K,EAASuL,EAAKtS,SAAS9L,IAAW6L,cAClCgH,EAASwL,EAAKvS,SAAS9L,IAAW6L,eAiHpCyS,0BA7GgD,CAACF,EAAMC,EAAMre,IACtDwd,EACL3K,EAASuL,EAAKtS,SAAS9L,IACvB6S,EAASwL,EAAKvS,SAAS9L,KA2GzBue,KArG2B,CAACH,EAAMC,EAAMre,IACjCqd,EACLxK,EAASuL,EAAKtS,SAAS9L,IAAW6L,cAClCgH,EAASwL,EAAKvS,SAAS9L,IAAW6L,eAmGpC2S,kBA7FwC,CAACJ,EAAMC,EAAMre,IAC9Cqd,EACLxK,EAASuL,EAAKtS,SAAS9L,IACvB6S,EAASwL,EAAKvS,SAAS9L,KA2FzBye,SAvF+B,CAACL,EAAMC,EAAMre,KAC5C,MAAMsd,EAAIc,EAAKtS,SAAe9L,GACxBud,EAAIc,EAAKvS,SAAe9L,GAK9B,OAAOsd,EAAIC,EAAI,EAAID,EAAIC,GAAK,EAAI,CAAC,EAiFjCmB,MA9E4B,CAACN,EAAMC,EAAMre,IAClCqd,EAAae,EAAKtS,SAAS9L,GAAWqe,EAAKvS,SAAS9L,KCsDhD2e,EAAwB,CACnChb,gBAAkBC,IACT,CACLgb,QAAS,MACNhb,IAIPF,oBAAqB,KACZ,CACLmb,UAAW,SAIfxa,kBACEhI,IAEO,CACLyiB,gBAAiB1lB,EAAiB,UAAWiD,GAC7C0iB,iBAAmBjZ,GACTA,EAAiBkZ,WAK/B5iB,aAAc,CACZiB,EACAhB,KAEO,CACL4iB,iBAAkB,KAChB,MAAMC,EAAY7iB,EAAM4U,sBAAsBnH,SAASqV,MAAM,IAE7D,IAAIC,GAAW,EAEf,IAAK,MAAMrV,KAAOmV,EAAW,CAC3B,MAAM7Q,EAAQtE,MAAAA,OAAAA,EAAAA,EAAK+B,SAASzO,EAAOR,IAEnC,GAA8C,kBAA1CyB,OAAOwV,UAAUjB,SAASkB,KAAK1F,GACjC,OAAO6P,EAAWO,SAGpB,GAAqB,iBAAVpQ,IACT+Q,GAAW,EAEP/Q,EAAMlR,MAAMigB,GAAqB9iB,OAAS,GAC5C,OAAO4jB,EAAWC,YAGxB,CAEA,OAAIiB,EACKlB,EAAWK,KAGbL,EAAWQ,KAAK,EAEzBW,eAAgB,KACd,MAAM5Q,EAAWpS,EAAM4U,sBAAsBnH,SAAS,GAItD,MAAqB,iBAFP2E,MAAAA,OAAAA,EAAAA,EAAU3C,SAASzO,EAAOR,KAG/B,MAGF,MAAM,EAEfyiB,aAAc,KAAM,IAAAC,EAClB,IAAKliB,EACH,MAAM,IAAID,MAGZ,OAAO3D,EAAW4D,EAAOf,UAAUuiB,WAC/BxhB,EAAOf,UAAUuiB,UACc,SAA/BxhB,EAAOf,UAAUuiB,UACjBxhB,EAAO4hB,oBACP,SAAA5iB,EAAMqB,QAAQwgB,iBAAd,EAAAqB,EAA2BliB,EAAOf,UAAUuiB,aAC5CX,EAAW7gB,EAAOf,UAAUuiB,UAA8B,EAEhEW,cAAe,CAACC,EAAMC,KAWpB,MAAMC,EAAmBtiB,EAAOuiB,sBAC1BC,EAAiB,MAAOJ,EAE9BpjB,EAAMyjB,YAAWtmB,IAEf,MAAMumB,EAAkBvmB,MAAAA,OAAAA,EAAAA,EAAKyG,MAAKvG,GAAKA,EAAEmD,KAAOQ,EAAOR,KACjDmjB,EAAgBxmB,MAAAA,OAAAA,EAAAA,EAAKuL,WAAUrL,GAAKA,EAAEmD,KAAOQ,EAAOR,KAE1D,IAGIojB,EAHAC,EAA2B,GAI3BC,EAAWN,EAAiBJ,EAA4B,SAArBE,EAmEvC,OA9DIM,EAFG,MAAHzmB,GAAAA,EAAKc,QAAU+C,EAAO+iB,mBAAqBV,EACzCK,EACW,SAEA,MAIR,MAAHvmB,GAAAA,EAAKc,QAAU0lB,IAAkBxmB,EAAIc,OAAS,EACnC,UACJylB,EACI,SAEA,UAKE,WAAfE,IAEGJ,GAEEF,IACHM,EAAa,WAKA,QAAfA,GACFC,EAAa,IACR1mB,EACH,CACEqD,GAAIQ,EAAOR,GACX4iB,KAAMU,IAIVD,EAAWvK,OACT,EACAuK,EAAW5lB,QACR+B,EAAMqB,QAAQ2iB,sBAAwB9c,OAAOC,oBAIlD0c,EAFwB,WAAfD,EAEIzmB,EAAI2F,KAAIzF,GACfA,EAAEmD,KAAOQ,EAAOR,GACX,IACFnD,EACH+lB,KAAMU,GAGHzmB,IAEe,WAAfumB,EACIzmB,EAAI0G,QAAOxG,GAAKA,EAAEmD,KAAOQ,EAAOR,KAEhC,CACX,CACEA,GAAIQ,EAAOR,GACX4iB,KAAMU,IAKLD,CAAU,GACjB,EAGJI,gBAAiB,IAEbjjB,EAAOf,UAAUikB,eACjBlkB,EAAMqB,QAAQ6iB,eACc,SAA5BljB,EAAOgiB,iBACc,OAAS,MAGlCO,oBAAsBF,IACpB,MAAMc,EAAqBnjB,EAAOijB,kBAC5BG,EAAWpjB,EAAOqjB,cAExB,OAAKD,IAKHA,IAAaD,IACZnkB,EAAMqB,QAAQijB,sBAAwB,MACtCjB,IAAQrjB,EAAMqB,QAAQkjB,mBAAqB,OAI1B,SAAbH,EAAsB,MAAQ,QAV5BD,CAUkC,EAG7CK,WAAY,KAEPxjB,EAAOf,UAAUwkB,gBAAiB,KAClCzkB,EAAMqB,QAAQojB,gBAAiB,MAC9BzjB,EAAOT,WAIbwjB,gBAAiB,IAEb/iB,EAAOf,UAAUykB,iBACjB1kB,EAAMqB,QAAQqjB,mBACZ1jB,EAAOT,WAIb8jB,YAAa,KAAM,IAAAM,EACjB,MAAMC,EAAa,SAAA5kB,EAChBqD,WACAkf,cAFgB,EAAAoC,EAEP/gB,MAAKvG,GAAKA,EAAEmD,KAAOQ,EAAOR,KAEtC,QAAQokB,IAAqBA,EAAWxB,KAAO,OAAS,MAAK,EAG/DyB,aAAc,KAAA,IAAAC,EAAA,OACZ,OAAAA,EAAA9kB,EAAMqD,WAAWkf,cAAjB,EAAAuC,EAA0Bpc,WAAUrL,GAAKA,EAAEmD,KAAOQ,EAAOR,QAAQ,CAAC,EAEpEukB,aAAc,KAEZ/kB,EAAMyjB,YAAWtmB,GACZ,MAAHA,GAAAA,EAAKc,OAASd,EAAI0G,QAAOxG,GAAKA,EAAEmD,KAAOQ,EAAOR,KAAM,IACrD,EAGHwkB,wBAAyB,KACvB,MAAMC,EAAUjkB,EAAOwjB,aAEvB,OAAQ/a,IACDwb,IACc,MAAjBxb,EAAUC,SAAVD,EAAUC,UACZ1I,MAAAA,EAAOmiB,eAAPniB,EAAOmiB,mBACLziB,IACAM,EAAO+iB,oBACH/jB,MAAAA,EAAMqB,QAAQqhB,sBAAd1iB,EAAAA,EAAMqB,QAAQqhB,iBAAmBjZ,KAEtC,CACF,IAKPxG,YACEjD,IAEO,CACLyjB,WAAY5mB,GAAWmD,MAAAA,EAAMqB,QAAQohB,qBAAdziB,EAAAA,EAAMqB,QAAQohB,gBAAkB5lB,GACvDqoB,aAAc5Z,IAAgB,IAAAgC,EAC5BtN,EAAMyjB,WAAWnY,EAAe,IAAK,OAAAgC,EAAAtN,EAAMuL,mBAAN,EAAA+B,EAAoBiV,UAAW,GAAG,EAEzE4C,qBAAsB,IAAMnlB,EAAM+X,qBAClC1J,kBAAmB,MACZrO,EAAMolB,oBAAsBplB,EAAMqB,QAAQgN,oBAC7CrO,EAAMolB,mBAAqBplB,EAAMqB,QAAQgN,kBAAkBrO,IAGzDA,EAAMqB,QAAQgkB,gBAAkBrlB,EAAMolB,mBACjCplB,EAAMmlB,uBAGRnlB,EAAMolB,yBCvTRE,EAA2B,CACtChe,gBAAkBC,IACT,CACLge,iBAAkB,CAAE,KACjBhe,IAIPS,kBACEhI,IAEO,CACLwlB,yBAA0BzoB,EAAiB,mBAAoBiD,KAInED,aAAc,CACZiB,EACAhB,KAEO,CACLylB,iBAAkBzT,IACZhR,EAAO0kB,cACT1lB,EAAM2lB,qBAAoBxoB,IAAQ,IAC7BA,EACH,CAAC6D,EAAOR,IAAKwR,IAAUhR,EAAOiF,kBAElC,EAEFA,aAAc,KAAM,IAAAiN,EAClB,OAAO,OAAAlT,EAAAA,EAAMqD,WAAWkiB,uBAAjB,EAAArS,EAAoClS,EAAOR,OAAO,CAAI,EAG/DklB,WAAY,KAEP1kB,EAAOf,UAAU2lB,eAAgB,KACjC5lB,EAAMqB,QAAQukB,eAAgB,GAGnCC,2BAA4B,IAClBpc,IACNzI,MAAAA,EAAOykB,kBAAPzkB,EAAOykB,iBACHhc,EAAiB+V,OAA4BC,QAChD,IAMTjR,UAAW,CACTd,EACA1N,KAEO,CACL0c,oBAAqBxe,GACnB,IAAM,CAACwP,EAAIoY,cAAe9lB,EAAMqD,WAAWkiB,oBAC3CQ,GACSA,EAAMliB,QAAOwU,GAAQA,EAAKrX,OAAOiF,kBAE1C,CACEjJ,IAC2C,0BAC3CyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQwb,YAGzDmJ,gBAAiB9nB,GACf,IAAM,CACJwP,EAAIoP,sBACJpP,EAAI+O,wBACJ/O,EAAIqP,0BAEN,CAACxZ,EAAMiC,EAAQhC,IAAU,IAAID,KAASiC,KAAWhC,IACjD,CACExG,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQwb,cAM7D5Z,YACEjD,IAEA,MAAMimB,EAA2B,CAC/BjpB,EACAkpB,IAEOhoB,GACL,IAAM,CACJgoB,IACAA,IACGriB,QAAOxG,GAAKA,EAAE4I,iBACdnD,KAAIzF,GAAKA,EAAEmD,KACX4F,KAAK,QAEVnF,GACSA,EAAQ4C,QAAOxG,GAAKA,MAAAA,EAAE4I,kBAAF5I,EAAAA,EAAE4I,kBAE/B,CACEjJ,MACAyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,eAK3D,MAAO,CACL4kB,sBAAuBF,EACrB,yBACA,IAAMjmB,EAAMomB,sBAEdhjB,sBAAuB6iB,EACrB,yBACA,IAAMjmB,EAAMuU,sBAEd/L,0BAA2Byd,EACzB,6BACA,IAAMjmB,EAAMsd,uBAEd7U,2BAA4Bwd,EAC1B,8BACA,IAAMjmB,EAAMud,wBAEd8I,4BAA6BJ,EAC3B,+BACA,IAAMjmB,EAAMwd,yBAGdmI,oBAAqB9oB,GACnBmD,MAAAA,EAAMqB,QAAQmkB,8BAAdxlB,EAAAA,EAAMqB,QAAQmkB,yBAA2B3oB,GAE3CypB,sBAAuBhb,IACrBtL,EAAM2lB,oBACJra,EAAe,CAAE,EAAGtL,EAAMuL,aAAaga,kBAAoB,CAAA,EAC5D,EAGHgB,wBAAyBvU,IACvBA,EAAQA,IAAUhS,EAAMwmB,yBAExBxmB,EAAM2lB,oBACJ3lB,EAAMuU,oBAAoBzS,QACxB,CAACC,EAAKf,KAAY,IACbe,EACH,CAACf,EAAOR,IAAMwR,KAAShR,MAAAA,EAAO0kB,YAAP1kB,EAAO0kB,iBAEhC,CAAE,GAEL,EAGHc,uBAAwB,KACrBxmB,EAAMuU,oBAAoB1V,MAAKmC,WAAWA,EAAOiF,cAAPjF,EAAOiF,kBAEpDwgB,wBAAyB,IACvBzmB,EAAMuU,oBAAoB1V,MAAKmC,GAA6B,MAAnBA,EAAOiF,kBAAY,EAAnBjF,EAAOiF,iBAElDygB,qCAAsC,IAC5Bjd,IAAe,IAAA4W,EACrBrgB,EAAMumB,wBACqB,OAAvB9c,EAAAA,EAAiB+V,aAAM,EAAzBa,EAAgDZ,QACjD,EAGN,GC/KCkH,EAAW,CACf3jB,EACAsiB,EACA3M,EACAkD,EACAxK,EACAiR,EACAlM,EACA7J,EACAgN,EACAkE,EACArW,GCrCK,SAASgR,EACdpY,EACA0N,EACA1M,EACA2C,GAEA,MAGM0U,EAAgC,CACpC7X,GAAK,GAAEkN,EAAIlN,MAAMQ,EAAOR,KACxBkN,MACA1M,SACAyO,SAAU,IAAM/B,EAAI+B,SAAS9L,GAC7BijB,YARqB,IACrBvO,EAAK5I,YAAczP,EAAMqB,QAAQwlB,oBAQjC9jB,WAAY7E,GACV,IAAM,CAAC8B,EAAOgB,EAAQ0M,EAAK2K,KAC3B,CAACrY,EAAOgB,EAAQ0M,EAAK2K,KAAU,CAC7BrY,QACAgB,SACA0M,MACA2K,KAAMA,EACN5I,SAAU4I,EAAK5I,SACfmX,YAAavO,EAAKuO,eAEpB,CACE5pB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,YAiBjC,OAZAtB,EAAM6B,UAAUhE,SAAQmE,IACtBC,OAAOC,OACLmW,EACArW,MAAAA,EAAQoW,gBAARpW,EAAAA,EAAQoW,WACNC,EACArX,EACA0M,EACA1N,GAEH,GACA,CAAE,GAEEqY,CACT,CC7Ca7J,MAAAA,EAAY,CACvBxO,EACAQ,EACAsmB,EACAC,EACA7mB,EACA+O,KAEA,IAAIvB,EAAsB,CACxBlN,KACAzB,MAAOgoB,EACPD,WACA5mB,QACA8mB,aAAc,CAAE,EAChBC,mBAAoB,CAAE,EACtBxX,SAAU9L,IACR,GAAI+J,EAAIsZ,aAAaE,eAAevjB,GAClC,OAAO+J,EAAIsZ,aAAarjB,GAG1B,MAAM3C,EAAShB,EAAMuJ,UAAU5F,GAE/B,OAAK3C,EAAOT,YAIZmN,EAAIsZ,aAAarjB,GAAY3C,EAAOT,WAClCmN,EAAIoZ,SACJC,GAGKrZ,EAAIsZ,aAAarjB,SATxB,CASiC,EAEnCwjB,gBAAiBxjB,IACf,GAAI+J,EAAIuZ,mBAAmBC,eAAevjB,GACxC,OAAO+J,EAAIuZ,mBAAmBtjB,GAGhC,MAAM3C,EAAShB,EAAMuJ,UAAU5F,GAE/B,OAAK3C,EAAOT,WAIPS,EAAOf,UAAUknB,iBAKtBzZ,EAAIuZ,mBAAmBtjB,GAAY3C,EAAOf,UAAUknB,gBAClDzZ,EAAIoZ,SACJC,GAGKrZ,EAAIuZ,mBAAmBtjB,KAT5B+J,EAAIuZ,mBAAmBtjB,GAAY,CAAC+J,EAAI+B,SAAS9L,IAC1C+J,EAAIuZ,mBAAmBtjB,SANhC,CAcuC,EAEzCijB,YAAajjB,GACX+J,EAAI+B,SAAS9L,IAAa3D,EAAMqB,QAAQwlB,oBAC1C5X,QAASA,GAAW,GACpBmY,YAAa,IAAM7pB,EAAUmQ,EAAIuB,SAAS5R,GAAKA,EAAE4R,UACjD6W,YAAa5nB,GACX,IAAM,CAAC8B,EAAMuU,uBACb3S,GACSA,EAAYkB,KAAI9B,GACdoX,EAAWpY,EAAO0N,EAAmB1M,EAAQA,EAAOR,OAG/D,CACExD,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQwb,YAIzD3K,uBAAwBhU,GACtB,IAAM,CAACwP,EAAIoY,iBACXnJ,GACSA,EAAS7a,QAAO,CAACulB,EAAKhP,KAC3BgP,EAAIhP,EAAKrX,OAAOR,IAAM6X,EACfgP,IACN,CAAE,IAEP,CACErqB,IAC2C,4BAC3CyB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQwb,aAK3D,IAAK,IAAI3B,EAAI,EAAGA,EAAIlb,EAAM6B,UAAU5D,OAAQid,IAAK,CAC/C,MAAMlZ,EAAUhC,EAAM6B,UAAUqZ,GAChCjZ,OAAOC,OAAOwL,QAAK1L,GAAAA,MAAAA,EAASwM,iBAATxM,EAASwM,UAAYd,EAAK1N,GAC/C,CAEA,OAAO0N,CAAG,EChHL,SAAS4Z,EACd1L,EACA2L,EACAvnB,GAEA,OAAIA,EAAMqB,QAAQsQ,mBAOb,SACL6V,EACAC,EACAznB,GAEA,MAAM0nB,EAAoC,GACpCC,EAAkD,CAAA,EAElDC,EAAoB,SAACJ,EAA4BtnB,GACrD,MAAM0b,EAAqB,GAG3B,IAAK,IAAIV,EAAI,EAAGA,EAAIsM,EAAavpB,OAAQid,IAAK,CAAA,IAAApM,EAC5C,IAAIpB,EAAM8Z,EAAatM,GAEvB,GAAI,OAAJpM,EAAIpB,EAAIuB,UAAJH,EAAa7Q,OAAQ,CACvB,MAAM4pB,EAASrZ,EACbxO,EACA0N,EAAIlN,GACJkN,EAAIoZ,SACJpZ,EAAI3O,MACJ2O,EAAIxN,OAIN,GAFA2nB,EAAOtW,cAAgB7D,EAAI6D,cAC3BsW,EAAO5Y,QAAU2Y,EAAkBla,EAAIuB,UAClC4Y,EAAO5Y,QAAQhR,OAClB,SAEFyP,EAAMma,CACR,CAEIJ,EAAU/Z,KACZkO,EAAK7d,KAAK2P,GACVia,EAAoBja,EAAIlN,IAAMkN,EAC9Bia,EAAoBzM,GAAKxN,EAE7B,CAEA,OAAOkO,GAGT,MAAO,CACLA,KAAMgM,EAAkBJ,GACxB/Z,SAAUia,EACVxZ,SAAUyZ,EAEd,CApDWG,CAAwBlM,EAAM2L,EAAevnB,GAsDjD,SACLwnB,EACAC,EACAznB,GAEA,MAAM0nB,EAAoC,GACpCC,EAAkD,CAAA,EAGlDC,EAAoB,SAACJ,EAA4BtnB,GAGrD,MAAM0b,EAAO,GAGb,IAAK,IAAIV,EAAI,EAAGA,EAAIsM,EAAavpB,OAAQid,IAAK,CAC5C,IAAIxN,EAAM8Z,EAAatM,GAIvB,GAFauM,EAAU/Z,GAEb,CAAA,IAAAgT,EACR,GAAI,OAAJA,EAAIhT,EAAIuB,UAAJyR,EAAaziB,OAAQ,CACvB,MAAM4pB,EAASrZ,EACbxO,EACA0N,EAAIlN,GACJkN,EAAIoZ,SACJpZ,EAAI3O,MACJ2O,EAAIxN,OAEN2nB,EAAO5Y,QAAU2Y,EAAkBla,EAAIuB,SACvCvB,EAAMma,CACR,CAEAjM,EAAK7d,KAAK2P,GACVga,EAAoB3pB,KAAK2P,GACzBia,EAAoBja,EAAIlN,IAAMkN,CAChC,CACF,CAEA,OAAOkO,GAGT,MAAO,CACLA,KAAMgM,EAAkBJ,GACxB/Z,SAAUia,EACVxZ,SAAUyZ,EAEd,CAlGSI,CAAuBnM,EAAM2L,EAAevnB,EACrD,CCsBO,SAASgoB,EAAkCrJ,GAChD,MAAMsJ,EAA6B,GAE7BC,EAAaxa,IAAoB,IAAAoB,EACrCmZ,EAAalqB,KAAK2P,GAEd,OAAAA,EAAAA,EAAIuB,UAAJH,EAAa7Q,QAAUyP,EAAIM,iBAC7BN,EAAIuB,QAAQpR,QAAQqqB,EACtB,EAKF,OAFAvJ,EAAS/C,KAAK/d,QAAQqqB,GAEf,CACLtM,KAAMqM,EACNxa,SAAUkR,EAASlR,SACnBS,SAAUyQ,EAASzQ,SAEvB,uPCgBO,WAGL,MAAO,CACLia,SAAU,CAACA,EAAUnnB,IACQ,mBAAbmnB,EACT,IACInnB,EACHT,WAAY4nB,GAEd,IACKnnB,EACHV,YAAa6nB,GAGrBC,QAASpnB,GAAUA,EACnBqnB,MAAOrnB,GAAUA,EAErB,8BLyBO,SACLK,IAEIA,EAAQC,UAAYD,EAAQ8Z,aAC9Bxb,QAAQC,KAAK,8BAGf,IAAII,EAAQ,CAAE6B,UAAW8kB,GAEzB,MAAM2B,EAAiBtoB,EAAM6B,UAAUC,QAAO,CAACC,EAAKC,IAC3CC,OAAOC,OAAOH,EAA8B,MAAzBC,EAAQgG,uBAAiB,EAAzBhG,EAAQgG,kBAAoBhI,KACrD,CAAE,GAeL,IAAIuL,EAAe,IAEblK,EAAQkK,cAAgB,IAG9BvL,EAAM6B,UAAUhE,SAAQmE,IACtBuJ,GAAsC,MAAvBvJ,EAAQsF,qBAAe,EAAvBtF,EAAQsF,gBAAkBiE,KAAiBA,CAAY,IAGxE,MAAMqB,EAAyB,GAC/B,IAAI2b,GAAgB,EAEpB,MAAMC,EAAoC,CACxC3mB,UAAW8kB,EACXtlB,QAAS,IACJinB,KACAjnB,GAELkK,eACA0B,OAAQwb,IACN7b,EAAO7O,KAAK0qB,GAEPF,IACHA,GAAgB,EAIhBG,QAAQC,UACLC,MAAK,KACJ,KAAOhc,EAAO3O,QACZ2O,EAAOwM,OAAPxM,GAEF2b,GAAgB,CAAK,IAEtBM,OAAMC,GACLC,YAAW,KACT,MAAMD,CAAK,MAGnB,EAEFE,MAAO,KACLhpB,EAAM9C,SAAS8C,EAAMuL,aAAa,EAEpC0d,WAAYpsB,IACV,MAAMqsB,EAAatsB,EAAiBC,EAASmD,EAAMqB,SACnDrB,EAAMqB,QA3DYA,IAChBrB,EAAMqB,QAAQ8nB,aACTnpB,EAAMqB,QAAQ8nB,aAAab,EAAgBjnB,GAG7C,IACFinB,KACAjnB,GAoDa8nB,CAAaD,EAG5B,EAGH7lB,SAAU,IACDrD,EAAMqB,QAAQkG,MAGvBrK,SAAWL,IACTmD,MAAAA,EAAMqB,QAAQ+nB,eAAdppB,EAAMqB,QAAQ+nB,cAAgBvsB,EAAQ,EAGxCwsB,UAAW,CAAC3b,EAAY3O,EAAeoB,KACrCH,MAAAA,EAAMqB,QAAQioB,cAAdtpB,EAAAA,EAAMqB,QAAQioB,SAAW5b,EAAK3O,EAAOoB,KACpC,GAAEA,EAAS,CAACA,EAAOK,GAAIzB,GAAOqH,KAAK,KAAOrH,IAE7CkT,gBAAiB,KACVjS,EAAMupB,mBACTvpB,EAAMupB,iBAAmBvpB,EAAMqB,QAAQ4Q,gBAAgBjS,IAGlDA,EAAMupB,oBAMf/b,YAAa,IACJxN,EAAMyb,wBAEf6E,OAAS9f,IACP,MAAMkN,EAAM1N,EAAMwN,cAAcU,SAAS1N,GAEzC,IAAKkN,EAIH,MAAM,IAAI3M,MAGZ,OAAO2M,CAAG,EAEZrN,qBAAsBnC,GACpB,IAAM,CAAC8B,EAAMqB,QAAQmoB,iBACrBA,IACEA,EAAiBA,GAAiB,GAI3B,CACL7oB,OAAQ2V,IACN,MAAMlW,EAAoBkW,EAAM3V,OAAOK,OACpCf,UAEH,OAAIG,EAAkBE,YACbF,EAAkBE,YAGvBF,EAAkBG,WACbH,EAAkBI,GAGpB,IAAI,EAGb6X,KAAM/B,IAAK,IAAAmT,EAAA,OAA4B,OAAxBnT,EAAAA,EAAMsQ,gBAAN,MAAA6C,EAA0BjT,cAAF,EAAxBiT,EAA0BjT,aAAgB,IAAI,KAC1DxW,EAAM6B,UAAUC,QAAO,CAACC,EAAKC,IACvBC,OAAOC,OAAOH,EAAKC,MAAAA,EAAQqF,yBAARrF,EAAAA,EAAQqF,wBACjC,OACAmiB,KAGP,CACE/qB,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,aACrDvE,KAAKiH,IAITylB,eAAgB,IAAM1pB,EAAMqB,QAAQJ,QAEpCkC,cAAejF,GACb,IAAM,CAAC8B,EAAM0pB,oBACbC,IACE,MAAMC,EAAiB,SACrBD,EACAxpB,EACAD,GAEA,YAFK,IAALA,IAAAA,EAAQ,GAEDypB,EAAW7mB,KAAI7C,IACpB,MAAMe,EAASjB,EAAaC,EAAOC,EAAWC,EAAOC,GAE/C0pB,EAAoB5pB,EAS1B,OAJAe,EAAOC,QAAU4oB,EAAkB5oB,QAC/B2oB,EAAeC,EAAkB5oB,QAASD,EAAQd,EAAQ,GAC1D,GAEGc,CAAM,KAIjB,OAAO4oB,EAAeD,EAAW,GAEnC,CACE3sB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,eAIzD6kB,kBAAmBloB,GACjB,IAAM,CAAC8B,EAAMmD,mBACbM,GACSA,EAAWrC,SAAQJ,GACjBA,EAAOE,oBAGlB,CACElE,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,eAIzDuoB,uBAAwB5rB,GACtB,IAAM,CAAC8B,EAAMomB,uBACb2D,GACSA,EAAYjoB,QAAO,CAACulB,EAAKrmB,KAC9BqmB,EAAIrmB,EAAOR,IAAMQ,EACVqmB,IACN,CAAE,IAEP,CACErqB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,eAIzDgT,kBAAmBrW,GACjB,IAAM,CAAC8B,EAAMmD,gBAAiBnD,EAAMyB,wBACpC,CAACgC,EAAY/B,IAEJA,EADW+B,EAAWrC,SAAQJ,GAAUA,EAAOQ,qBAGxD,CACExE,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQE,eAIzDgI,UAAW5F,IACT,MAAM3C,EAAShB,EAAM8pB,yBAAyBnmB,GAE9C,IAAK3C,EAIH,MAAM,IAAID,MAGZ,OAAOC,CAAM,GAUjB,OANAiB,OAAOC,OAAOlC,EAAOwoB,GAErBxoB,EAAM6B,UAAUhE,SAAQmE,GACfC,OAAOC,OAAOlC,EAA0B,MAAnBgC,EAAQiB,iBAAW,EAAnBjB,EAAQiB,YAAcjD,MAG7CA,CACT,4GMlWO,WAGL,OAAOA,GACL9B,GACE,IAAM,CAAC8B,EAAMqB,QAAQ2oB,QAEnBA,IAMA,MAAMrL,EAA4B,CAChC/C,KAAM,GACNnO,SAAU,GACVS,SAAU,CAAC,GAGP+b,EAAa,SACjBC,EACAhqB,EACAC,QADK,IAALD,IAAAA,EAAQ,GAGR,MAAM0b,EAAO,GAEb,IAAK,IAAIV,EAAI,EAAGA,EAAIgP,EAAajsB,OAAQid,IAAK,CAS5C,MAAMxN,EAAMc,EACVxO,EACAA,EAAMqpB,UAAUa,EAAahP,GAAKA,EAAG/a,GACrC+pB,EAAahP,GACbA,EACAhb,GAW4B,IAAAiqB,EAA9B,GAPAxL,EAASlR,SAAS1P,KAAK2P,GAEvBiR,EAASzQ,SAASR,EAAIlN,IAAMkN,EAE5BkO,EAAK7d,KAAK2P,GAGN1N,EAAMqB,QAAQ+oB,WAChB1c,EAAI2c,gBAAkBrqB,EAAMqB,QAAQ+oB,WAClCF,EAAahP,GACbA,GAIE,OAAJiP,EAAIzc,EAAI2c,kBAAJF,EAAqBlsB,SACvByP,EAAIuB,QAAUgb,EAAWvc,EAAI2c,gBAAiBnqB,EAAQ,EAAGwN,GAG/D,CAEA,OAAOkO,GAKT,OAFA+C,EAAS/C,KAAOqO,EAAWD,GAEpBrL,CAAQ,GAEjB,CACE3hB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,WACrDlc,SAAU,KACRe,EAAM4Z,qBAAqB,GAIrC,wBFhFO,WAGL,OAAO5Z,GACL9B,GACE,IAAM,CACJ8B,EAAMqD,WAAWmJ,SACjBxM,EAAMoO,yBACNpO,EAAMqB,QAAQqL,wBAEhB,CAACF,EAAUmS,EAAUjS,KAEhBiS,EAAS/C,KAAK3d,SACD,IAAbuO,IAAsBvK,OAAO8L,KAAKvB,GAAY,CAAE,GAAEvO,OAE5C0gB,EAGJjS,EAKEsb,EAAWrJ,GAHTA,GAKX,CACE3hB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,YAG7D,2BG9BO,WAIL,MAAO,CAACnb,EAAO2D,IACbzF,GACE,IAAM,CAAC8B,EAAMuJ,UAAU5F,GAAUiQ,wBACjC0W,IAAmB,IAAAC,EACjB,MAAMC,EACJ,OADcD,EACdD,EAAgB7c,SAAS,SAAzB,EAAA8c,EAA6BpD,gBAAgBxjB,GAE/C,QAA0B,IAAf6mB,EACT,OAGF,IAAIC,EAAkC,CAACD,EAAYA,GAEnD,IAAK,IAAItP,EAAI,EAAGA,EAAIoP,EAAgB7c,SAASxP,OAAQid,IAAK,CACxD,MAAMpN,EACJwc,EAAgB7c,SAASyN,GAAIiM,gBAAwBxjB,GAEvD,IAAK,IAAI+mB,EAAI,EAAGA,EAAI5c,EAAO7P,OAAQysB,IAAK,CACtC,MAAM1Y,EAAQlE,EAAO4c,GAEjB1Y,EAAQyY,EAAoB,GAC9BA,EAAoB,GAAKzY,EAChBA,EAAQyY,EAAoB,KACrCA,EAAoB,GAAKzY,EAE7B,CACF,CAEA,OAAOyY,CAAmB,GAE5B,CACEztB,KACEiH,EAEFxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,WACrDlc,SAAU,QAGlB,uBCzCO,WAIL,MAAO,CAACe,EAAO2D,IACbzF,GACE,IAAM,CACJ8B,EAAM6T,yBACN7T,EAAMqD,WAAWkO,cACjBvR,EAAMqD,WAAWmO,aACjBxR,EAAM4U,yBAER,CAAC+V,EAAapZ,EAAeC,KAC3B,IACGmZ,EAAY/O,KAAK3d,SACH,MAAbsT,IAAAA,EAAetT,UAAWuT,EAE5B,OAAOmZ,EAGT,MAAMC,EAAgB,IACjBrZ,EAAczO,KAAIzF,GAAKA,EAAEmD,KAAIqD,QAAOxG,GAAKA,IAAMsG,IAClD6N,EAAe,kBAAe9Q,GAC9BmD,OAAOC,SAYT,OAAOwjB,EAAWqD,EAAY/O,MAVNlO,IAEtB,IAAK,IAAIwN,EAAI,EAAGA,EAAI0P,EAAc3sB,OAAQid,IACxC,IAA6C,IAAzCxN,EAAI6D,cAAcqZ,EAAc1P,IAClC,OAAO,EAGX,OAAO,CAAI,GAGuClb,EAAM,GAE5D,CACEhD,KACEiH,EAEFxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,WACrDlc,SAAU,QAGlB,2BC9CO,WAIL,MAAO,CAACe,EAAO2D,IACbzF,GACE,IAAM,CAAC8B,EAAMuJ,UAAU5F,GAAUiQ,wBACjC0W,IACE,IAAIO,EAAsB,IAAI7W,IAE9B,IAAK,IAAIkH,EAAI,EAAGA,EAAIoP,EAAgB7c,SAASxP,OAAQid,IAAK,CACxD,MAAMpN,EACJwc,EAAgB7c,SAASyN,GAAIiM,gBAAwBxjB,GAEvD,IAAK,IAAI+mB,EAAI,EAAGA,EAAI5c,EAAO7P,OAAQysB,IAAK,CACtC,MAAM1Y,EAAQlE,EAAO4c,GAEjBG,EAAoBC,IAAI9Y,GAC1B6Y,EAAoBE,IAClB/Y,GACC6Y,EAAoBG,IAAIhZ,IAAU,GAAK,GAG1C6Y,EAAoBE,IAAI/Y,EAAO,EAEnC,CACF,CAEA,OAAO6Y,CAAmB,GAE5B,CACE7tB,KACEiH,EAEFxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,WACrDlc,SAAU,QAGlB,wBCpCO,WAGL,OAAOe,GACL9B,GACE,IAAM,CACJ8B,EAAM6T,yBACN7T,EAAMqD,WAAWkO,cACjBvR,EAAMqD,WAAWmO,gBAEnB,CAACmN,EAAUpN,EAAeC,KACxB,IACGmN,EAAS/C,KAAK3d,SACA,MAAbsT,IAAAA,EAAetT,UAAWuT,EAC5B,CACA,IAAK,IAAI0J,EAAI,EAAGA,EAAIyD,EAASlR,SAASxP,OAAQid,IAC5CyD,EAASlR,SAASyN,GAAI3J,cAAgB,CAAA,EACtCoN,EAASlR,SAASyN,GAAI/G,kBAAoB,CAAA,EAE5C,OAAOwK,CACT,CAEA,MAAMsM,EAAuD,GACvDC,EAAuD,IAE3D3Z,GAAiB,IAAI1T,SAAQR,IAC7B,MAUMiU,EAVStR,EAAMuJ,UAAUlM,EAAEmD,IAUT+R,cAEnBjB,GASL2Z,EAAsBltB,KAAK,CACzByC,GAAInD,EAAEmD,GACN8Q,WACAgN,qBAAehN,EAASX,0BAATW,EAASX,mBAAqBtT,EAAE2U,SAAU3U,EAAE2U,OAC3D,IAGJ,MAAM4Y,EAAgBrZ,EAAczO,KAAIzF,GAAKA,EAAEmD,KAEzCoR,EAAiB5R,EAAMqU,oBAEvB8W,EAA4BnrB,EAC/BuU,oBACA1Q,QAAO7C,GAAUA,EAAO6R,uBAoB3B,IAAIuY,EACAC,EAlBF7Z,GACAI,GACAuZ,EAA0BltB,SAE1B2sB,EAAc7sB,KAAK,cAEnBotB,EAA0BttB,SAAQmD,IAChCkqB,EAAsBntB,KAAK,CACzByC,GAAIQ,EAAOR,GACX8Q,SAAUM,EACV0M,eACmC,MAAjC1M,EAAejB,wBAAkB,EAAjCiB,EAAejB,mBAAqBa,KACpCA,GACF,KAQN,IAAK,IAAIkZ,EAAI,EAAGA,EAAI/L,EAASlR,SAASxP,OAAQysB,IAAK,CACjD,MAAMhd,EAAMiR,EAASlR,SAASid,GAI9B,GAFAhd,EAAI6D,cAAgB,GAEhB0Z,EAAsBhtB,OACxB,IAAK,IAAIid,EAAI,EAAGA,EAAI+P,EAAsBhtB,OAAQid,IAAK,CACrDkQ,EAAsBH,EAAsB/P,GAC5C,MAAM1a,EAAK4qB,EAAoB5qB,GAG/BkN,EAAI6D,cAAc/Q,GAAM4qB,EAAoB9Z,SAC1C5D,EACAlN,EACA4qB,EAAoB9M,eACpBgN,IACE5d,EAAIyG,kBAAkB3T,GAAM8qB,CAAU,GAG5C,CAGF,GAAIJ,EAAsBjtB,OAAQ,CAChC,IAAK,IAAIid,EAAI,EAAGA,EAAIgQ,EAAsBjtB,OAAQid,IAAK,CACrDmQ,EAAsBH,EAAsBhQ,GAC5C,MAAM1a,EAAK6qB,EAAoB7qB,GAE/B,GACE6qB,EAAoB/Z,SAClB5D,EACAlN,EACA6qB,EAAoB/M,eACpBgN,IACE5d,EAAIyG,kBAAkB3T,GAAM8qB,CAAU,IAG1C,CACA5d,EAAI6D,cAAcga,YAAa,EAC/B,KACF,CACF,EAEqC,IAAjC7d,EAAI6D,cAAcga,aACpB7d,EAAI6D,cAAcga,YAAa,EAEnC,CACF,CAaA,OAAOjE,EAAW3I,EAAS/C,MAXHlO,IAEtB,IAAK,IAAIwN,EAAI,EAAGA,EAAI0P,EAAc3sB,OAAQid,IACxC,IAA6C,IAAzCxN,EAAI6D,cAAcqZ,EAAc1P,IAClC,OAAO,EAGX,OAAO,CAAI,GAIoClb,EAAM,GAEzD,CACEhD,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,WACrDlc,SAAU,KACRe,EAAM4Z,qBAAqB,GAIrC,uBC1JO,WAGL,OAAO5Z,GACL9B,GACE,IAAM,CAAC8B,EAAMqD,WAAWqT,SAAU1W,EAAM8X,2BACxC,CAACpB,EAAUiI,KACT,IAAKA,EAAS/C,KAAK3d,SAAWyY,EAASzY,OACrC,OAAO0gB,EAIT,MAAM6M,EAAmB9U,EAAS7S,QAAOF,GACvC3D,EAAMuJ,UAAU5F,KAGZ8nB,EAAgC,GAChCC,EAA8C,CAAA,EAO9CC,EAAqB,SACzB/P,EACA1b,EACA0rB,GAIA,QALK,IAAL1rB,IAAAA,EAAQ,GAKJA,GAASsrB,EAAiBvtB,OAC5B,OAAO2d,EAAK9Y,KAAI4K,IACdA,EAAIxN,MAAQA,EAEZurB,EAAgB1tB,KAAK2P,GACrBge,EAAgBhe,EAAIlN,IAAMkN,EAEtBA,EAAIuB,UACNvB,EAAIuB,QAAU0c,EAAmBje,EAAIuB,QAAS/O,EAAQ,IAGjDwN,KAIX,MAAM/J,EAAW6nB,EAAiBtrB,GAG5B2rB,EAoHhB,SAAwCjQ,EAAoBjY,GAC1D,MAAMmoB,EAAW,IAAI9X,IAErB,OAAO4H,EAAK9Z,QAAO,CAACgB,EAAK4K,KACvB,MAAMqe,EAAU,GAAEre,EAAI+B,SAAS9L,KACzBqoB,EAAWlpB,EAAIkoB,IAAIe,GAMzB,OALKC,EAGHlpB,EAAIioB,IAAIgB,EAAQ,IAAIC,EAAUte,IAF9B5K,EAAIioB,IAAIgB,EAAQ,CAACre,IAIZ5K,CAAG,GACTgpB,EACL,CAjI+BG,CAAQrQ,EAAMjY,GAG7BuoB,EAAwB7Z,MAAM2D,KAAK6V,EAAaM,WAAWrpB,KAC/D,CAAA6D,EAA+B5H,KAAU,IAAvCqtB,EAAeC,GAAY1lB,EACvBnG,EAAM,GAAEmD,KAAYyoB,IACxB5rB,EAAKorB,EAAY,GAAEA,KAAYprB,IAAOA,EAGtC,MAAMyO,EAAU0c,EAAmBU,EAAansB,EAAQ,EAAGM,GAGrDoV,EAAW1V,EACb3C,EAAU8uB,GAAa3e,GAAOA,EAAIuB,UAClCod,EAEE3e,EAAMc,EACVxO,EACAQ,EACAoV,EAAS,GAAIkR,SACb/nB,EACAmB,GAuDF,OApDA+B,OAAOC,OAAOwL,EAAK,CACjBwK,iBAAkBvU,EAClByoB,gBACAnd,UACA2G,WACAnG,SAAW9L,IAET,GAAI6nB,EAAiB5qB,SAAS+C,GAC5B,OAAI+J,EAAIsZ,aAAaE,eAAevjB,IAIhC0oB,EAAY,KACd3e,EAAIsZ,aAAarjB,GACf0oB,EAAY,GAAG5c,SAAS9L,SAAajD,GALhCgN,EAAIsZ,aAAarjB,GAW5B,GAAI+J,EAAIyK,qBAAqB+O,eAAevjB,GAC1C,OAAO+J,EAAIyK,qBAAqBxU,GAIlC,MACM2oB,EADStsB,EAAMuJ,UAAU5F,GACJgU,mBAE3B,OAAI2U,GACF5e,EAAIyK,qBAAqBxU,GAAY2oB,EACnC3oB,EACAiS,EACAyW,GAGK3e,EAAIyK,qBAAqBxU,SAPlC,CAQA,IAIJsL,EAAQpR,SAAQijB,IACd2K,EAAgB1tB,KAAK+iB,GACrB4K,EAAgB5K,EAAOtgB,IAAMsgB,CAAM,IAU9BpT,CAAG,IAId,OAAOwe,GAGHG,EAAcV,EAAmBhN,EAAS/C,KAAM,EAAG,IAczD,OAZAyQ,EAAYxuB,SAAQijB,IAClB2K,EAAgB1tB,KAAK+iB,GACrB4K,EAAgB5K,EAAOtgB,IAAMsgB,CAAM,IAU9B,CACLlF,KAAMyQ,EACN5e,SAAUge,EACVvd,SAAUwd,EACX,GAEH,CACE1uB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,WACrDlc,SAAU,KACRe,EAAMiN,QAAO,KACXjN,EAAM6M,qBACN7M,EAAM4Z,qBAAqB,GAC3B,GAIZ,0BCnKO,SAAsDvb,GAG3D,OAAO2B,GACL9B,GACE,IAAM,CACJ8B,EAAMqD,WAAWmW,WACjBxZ,EAAMwb,2BACNxb,EAAMqB,QAAQqL,0BACVhM,EACAV,EAAMqD,WAAWmJ,YAEvB,CAACgN,EAAYmF,KACX,IAAKA,EAAS/C,KAAK3d,OACjB,OAAO0gB,EAGT,MAAMjF,SAAEA,EAAQD,UAAEA,GAAcD,EAChC,IAAIoC,KAAEA,EAAInO,SAAEA,EAAQS,SAAEA,GAAayQ,EACnC,MAAM4N,EAAY7S,EAAWD,EACvB+S,EAAUD,EAAY7S,EAI5B,IAAI+S,EAFJ7Q,EAAOA,EAAKkH,MAAMyJ,EAAWC,GAW3BC,EAPGzsB,EAAMqB,QAAQqL,qBAOG,CAClBkP,OACAnO,WACAS,YATkB8Z,EAAW,CAC7BpM,OACAnO,WACAS,aAUJue,EAAkBhf,SAAW,GAE7B,MAAMya,EAAaxa,IACjB+e,EAAkBhf,SAAS1P,KAAK2P,GAC5BA,EAAIuB,QAAQhR,QACdyP,EAAIuB,QAAQpR,QAAQqqB,EACtB,EAKF,OAFAuE,EAAkB7Q,KAAK/d,QAAQqqB,GAExBuE,CAAiB,GAE1B,CACEzvB,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,YAG7D,sBC1DO,WAGL,OAAOnb,GACL9B,GACE,IAAM,CAAC8B,EAAMqD,WAAWkf,QAASviB,EAAMmlB,0BACvC,CAAC5C,EAAS5D,KACR,IAAKA,EAAS/C,KAAK3d,QAAkB,MAAPskB,IAAAA,EAAStkB,OACrC,OAAO0gB,EAGT,MAAM+N,EAAe1sB,EAAMqD,WAAWkf,QAEhCoK,EAA+B,GAG/BC,EAAmBF,EAAa7oB,QAAO+d,GAC3C5hB,EAAMuJ,UAAUqY,EAAKphB,IAAIgkB,eAGrBqI,EAOF,CAAA,EAEJD,EAAiB/uB,SAAQivB,IACvB,MAAM9rB,EAAShB,EAAMuJ,UAAUujB,EAAUtsB,IAEzCqsB,EAAeC,EAAUtsB,IAAM,CAC7BusB,cAAe/rB,EAAOf,UAAU8sB,cAChCC,cAAehsB,EAAOf,UAAU+sB,cAChCxK,UAAWxhB,EAAOiiB,eACnB,IAGH,MAAMgK,EAAYrR,IAGhB,MAAMsR,EAAa,IAAItR,GAoDvB,OAlDAsR,EAAWtL,MAAK,CAACG,EAAMC,KACrB,IAAK,IAAI9G,EAAI,EAAGA,EAAI0R,EAAiB3uB,OAAQid,GAAK,EAAG,CACnD,MAAM4R,EAAYF,EAAiB1R,GAC7BiS,EAAaN,EAAeC,EAAUtsB,IACtC4sB,SAASN,SAAAA,EAAW1J,QAAQ,EAElC,GAAI+J,EAAWJ,cAAe,CAC5B,MAGMM,OAA+B,IAHtBtL,EAAKtS,SAASqd,EAAUtsB,IAIjC8sB,OAA+B,IAHtBtL,EAAKvS,SAASqd,EAAUtsB,IAKvC,GAAI6sB,GAAcC,EAChB,OAAOD,GAAcC,EACjB,EACAD,EACAF,EAAWJ,eACVI,EAAWJ,aAEpB,CAGA,IAAIQ,EAAUJ,EAAW3K,UAAUT,EAAMC,EAAM8K,EAAUtsB,IAEzD,GAAgB,IAAZ+sB,EASF,OARIH,IACFG,IAAY,GAGVJ,EAAWH,gBACbO,IAAY,GAGPA,CAEX,CAEA,OAAOxL,EAAKhjB,MAAQijB,EAAKjjB,KAAK,IAIhCmuB,EAAWrvB,SAAQ6P,IACjBif,EAAe5uB,KAAK2P,IACfA,EAAIuB,SAAWvB,EAAIuB,QAAQhR,QAAU,IAG1CyP,EAAIuB,QAAUge,EAASvf,EAAIuB,SAAQ,IAG9Bie,CAAU,EAGnB,MAAO,CACLtR,KAAMqR,EAAStO,EAAS/C,MACxBnO,SAAUkf,EACVze,SAAUyQ,EAASzQ,SACpB,GAEH,CACElR,KAAKiH,EACLxF,MAAO,IAAMuB,EAAMqB,QAAQC,UAAYtB,EAAMqB,QAAQ8Z,WACrDlc,SAAU,KACRe,EAAM4Z,qBAAqB,GAIrC,6F7BlCO,WAEP"}