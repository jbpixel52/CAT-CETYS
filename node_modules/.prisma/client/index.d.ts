
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model NombresCampo
 * 
 */
export type NombresCampo = {
  CETYS: string
  CACEI: string
  WASC: string
  ABET: string
}

/**
 * Model ContenidosCampo
 * 
 */
export type ContenidosCampo = {
  CETYS: string
  CACEI: string
  WASC: string
  ABET: string
}

/**
 * Model Cartas
 * 
 */
export type Cartas = {
  id: string
  ANIO_PROGRAMA: number
  IDs_FILAS_CARTAS: string[]
  MATERIA: string
  NOMBRE_CARRERA: string
  NOMBRE_CARTA: string
  PROFESOR: string
  SEMESTRE: number
}

/**
 * Model camposBase
 * 
 */
export type camposBase = {
  id: string
  NOMBRE_CAMPO: NombresCampo
  DESCRIPCION_CAMPO: string
  TIPO_CAMPO: string
}

/**
 * Model camposCartas
 * 
 */
export type camposCartas = {
  id: string
  NOMBRE_CAMPO: NombresCampo
  DESCRIPCION_CAMPO: string
  TIPO_CAMPO: string
  CONTENIDO_CAMPO: ContenidosCampo
}

/**
 * Model filasCartas
 * 
 */
export type filasCartas = {
  id: string
  ACREDITADORA: string
  HIDE_FLAG: boolean
  filaJSON: string
  campoBase: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cartas
 * const cartas = await prisma.cartas.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cartas
   * const cartas = await prisma.cartas.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): PrismaPromise<Prisma.JsonObject>;

      /**
   * `prisma.cartas`: Exposes CRUD operations for the **Cartas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cartas
    * const cartas = await prisma.cartas.findMany()
    * ```
    */
  get cartas(): Prisma.CartasDelegate<GlobalReject>;

  /**
   * `prisma.camposBase`: Exposes CRUD operations for the **camposBase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CamposBases
    * const camposBases = await prisma.camposBase.findMany()
    * ```
    */
  get camposBase(): Prisma.camposBaseDelegate<GlobalReject>;

  /**
   * `prisma.camposCartas`: Exposes CRUD operations for the **camposCartas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CamposCartas
    * const camposCartas = await prisma.camposCartas.findMany()
    * ```
    */
  get camposCartas(): Prisma.camposCartasDelegate<GlobalReject>;

  /**
   * `prisma.filasCartas`: Exposes CRUD operations for the **filasCartas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FilasCartas
    * const filasCartas = await prisma.filasCartas.findMany()
    * ```
    */
  get filasCartas(): Prisma.filasCartasDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Cartas: 'Cartas',
    camposBase: 'camposBase',
    camposCartas: 'camposCartas',
    filasCartas: 'filasCartas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model NombresCampo
   */





  export type NombresCampoSelect = {
    CETYS?: boolean
    CACEI?: boolean
    WASC?: boolean
    ABET?: boolean
  }

  export type NombresCampoGetPayload<
    S extends boolean | null | undefined | NombresCampoArgs,
    U = keyof S
      > = S extends true
        ? NombresCampo
    : S extends undefined
    ? never
    : S extends NombresCampoArgs
    ?'include' extends U
    ? NombresCampo 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof NombresCampo ? NombresCampo[P] : never
  } 
    : NombresCampo
  : NombresCampo



  export interface NombresCampoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {






  }

  /**
   * The delegate class that acts as a "Promise-like" for NombresCampo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NombresCampoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * NombresCampo without action
   */
  export type NombresCampoArgs = {
    /**
     * Select specific fields to fetch from the NombresCampo
     * 
    **/
    select?: NombresCampoSelect | null
  }



  /**
   * Model ContenidosCampo
   */





  export type ContenidosCampoSelect = {
    CETYS?: boolean
    CACEI?: boolean
    WASC?: boolean
    ABET?: boolean
  }

  export type ContenidosCampoGetPayload<
    S extends boolean | null | undefined | ContenidosCampoArgs,
    U = keyof S
      > = S extends true
        ? ContenidosCampo
    : S extends undefined
    ? never
    : S extends ContenidosCampoArgs
    ?'include' extends U
    ? ContenidosCampo 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ContenidosCampo ? ContenidosCampo[P] : never
  } 
    : ContenidosCampo
  : ContenidosCampo



  export interface ContenidosCampoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {






  }

  /**
   * The delegate class that acts as a "Promise-like" for ContenidosCampo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContenidosCampoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ContenidosCampo without action
   */
  export type ContenidosCampoArgs = {
    /**
     * Select specific fields to fetch from the ContenidosCampo
     * 
    **/
    select?: ContenidosCampoSelect | null
  }



  /**
   * Model Cartas
   */


  export type AggregateCartas = {
    _count: CartasCountAggregateOutputType | null
    _avg: CartasAvgAggregateOutputType | null
    _sum: CartasSumAggregateOutputType | null
    _min: CartasMinAggregateOutputType | null
    _max: CartasMaxAggregateOutputType | null
  }

  export type CartasAvgAggregateOutputType = {
    ANIO_PROGRAMA: number | null
    SEMESTRE: number | null
  }

  export type CartasSumAggregateOutputType = {
    ANIO_PROGRAMA: number | null
    SEMESTRE: number | null
  }

  export type CartasMinAggregateOutputType = {
    id: string | null
    ANIO_PROGRAMA: number | null
    MATERIA: string | null
    NOMBRE_CARRERA: string | null
    NOMBRE_CARTA: string | null
    PROFESOR: string | null
    SEMESTRE: number | null
  }

  export type CartasMaxAggregateOutputType = {
    id: string | null
    ANIO_PROGRAMA: number | null
    MATERIA: string | null
    NOMBRE_CARRERA: string | null
    NOMBRE_CARTA: string | null
    PROFESOR: string | null
    SEMESTRE: number | null
  }

  export type CartasCountAggregateOutputType = {
    id: number
    ANIO_PROGRAMA: number
    IDs_FILAS_CARTAS: number
    MATERIA: number
    NOMBRE_CARRERA: number
    NOMBRE_CARTA: number
    PROFESOR: number
    SEMESTRE: number
    _all: number
  }


  export type CartasAvgAggregateInputType = {
    ANIO_PROGRAMA?: true
    SEMESTRE?: true
  }

  export type CartasSumAggregateInputType = {
    ANIO_PROGRAMA?: true
    SEMESTRE?: true
  }

  export type CartasMinAggregateInputType = {
    id?: true
    ANIO_PROGRAMA?: true
    MATERIA?: true
    NOMBRE_CARRERA?: true
    NOMBRE_CARTA?: true
    PROFESOR?: true
    SEMESTRE?: true
  }

  export type CartasMaxAggregateInputType = {
    id?: true
    ANIO_PROGRAMA?: true
    MATERIA?: true
    NOMBRE_CARRERA?: true
    NOMBRE_CARTA?: true
    PROFESOR?: true
    SEMESTRE?: true
  }

  export type CartasCountAggregateInputType = {
    id?: true
    ANIO_PROGRAMA?: true
    IDs_FILAS_CARTAS?: true
    MATERIA?: true
    NOMBRE_CARRERA?: true
    NOMBRE_CARTA?: true
    PROFESOR?: true
    SEMESTRE?: true
    _all?: true
  }

  export type CartasAggregateArgs = {
    /**
     * Filter which Cartas to aggregate.
     * 
    **/
    where?: CartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartas to fetch.
     * 
    **/
    orderBy?: Enumerable<CartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cartas
    **/
    _count?: true | CartasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartasMaxAggregateInputType
  }

  export type GetCartasAggregateType<T extends CartasAggregateArgs> = {
        [P in keyof T & keyof AggregateCartas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartas[P]>
      : GetScalarType<T[P], AggregateCartas[P]>
  }




  export type CartasGroupByArgs = {
    where?: CartasWhereInput
    orderBy?: Enumerable<CartasOrderByWithAggregationInput>
    by: Array<CartasScalarFieldEnum>
    having?: CartasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartasCountAggregateInputType | true
    _avg?: CartasAvgAggregateInputType
    _sum?: CartasSumAggregateInputType
    _min?: CartasMinAggregateInputType
    _max?: CartasMaxAggregateInputType
  }


  export type CartasGroupByOutputType = {
    id: string
    ANIO_PROGRAMA: number
    IDs_FILAS_CARTAS: string[]
    MATERIA: string
    NOMBRE_CARRERA: string
    NOMBRE_CARTA: string
    PROFESOR: string
    SEMESTRE: number
    _count: CartasCountAggregateOutputType | null
    _avg: CartasAvgAggregateOutputType | null
    _sum: CartasSumAggregateOutputType | null
    _min: CartasMinAggregateOutputType | null
    _max: CartasMaxAggregateOutputType | null
  }

  type GetCartasGroupByPayload<T extends CartasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CartasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartasGroupByOutputType[P]>
            : GetScalarType<T[P], CartasGroupByOutputType[P]>
        }
      >
    >


  export type CartasSelect = {
    id?: boolean
    ANIO_PROGRAMA?: boolean
    IDs_FILAS_CARTAS?: boolean
    MATERIA?: boolean
    NOMBRE_CARRERA?: boolean
    NOMBRE_CARTA?: boolean
    PROFESOR?: boolean
    SEMESTRE?: boolean
  }

  export type CartasGetPayload<
    S extends boolean | null | undefined | CartasArgs,
    U = keyof S
      > = S extends true
        ? Cartas
    : S extends undefined
    ? never
    : S extends CartasArgs | CartasFindManyArgs
    ?'include' extends U
    ? Cartas 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Cartas ? Cartas[P] : never
  } 
    : Cartas
  : Cartas


  type CartasCountArgs = Merge<
    Omit<CartasFindManyArgs, 'select' | 'include'> & {
      select?: CartasCountAggregateInputType | true
    }
  >

  export interface CartasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Cartas that matches the filter.
     * @param {CartasFindUniqueArgs} args - Arguments to find a Cartas
     * @example
     * // Get one Cartas
     * const cartas = await prisma.cartas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CartasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CartasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cartas'> extends True ? CheckSelect<T, Prisma__CartasClient<Cartas>, Prisma__CartasClient<CartasGetPayload<T>>> : CheckSelect<T, Prisma__CartasClient<Cartas | null >, Prisma__CartasClient<CartasGetPayload<T> | null >>

    /**
     * Find the first Cartas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartasFindFirstArgs} args - Arguments to find a Cartas
     * @example
     * // Get one Cartas
     * const cartas = await prisma.cartas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CartasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CartasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cartas'> extends True ? CheckSelect<T, Prisma__CartasClient<Cartas>, Prisma__CartasClient<CartasGetPayload<T>>> : CheckSelect<T, Prisma__CartasClient<Cartas | null >, Prisma__CartasClient<CartasGetPayload<T> | null >>

    /**
     * Find zero or more Cartas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cartas
     * const cartas = await prisma.cartas.findMany()
     * 
     * // Get first 10 Cartas
     * const cartas = await prisma.cartas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartasWithIdOnly = await prisma.cartas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CartasFindManyArgs>(
      args?: SelectSubset<T, CartasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cartas>>, PrismaPromise<Array<CartasGetPayload<T>>>>

    /**
     * Create a Cartas.
     * @param {CartasCreateArgs} args - Arguments to create a Cartas.
     * @example
     * // Create one Cartas
     * const Cartas = await prisma.cartas.create({
     *   data: {
     *     // ... data to create a Cartas
     *   }
     * })
     * 
    **/
    create<T extends CartasCreateArgs>(
      args: SelectSubset<T, CartasCreateArgs>
    ): CheckSelect<T, Prisma__CartasClient<Cartas>, Prisma__CartasClient<CartasGetPayload<T>>>

    /**
     * Create many Cartas.
     *     @param {CartasCreateManyArgs} args - Arguments to create many Cartas.
     *     @example
     *     // Create many Cartas
     *     const cartas = await prisma.cartas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CartasCreateManyArgs>(
      args?: SelectSubset<T, CartasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cartas.
     * @param {CartasDeleteArgs} args - Arguments to delete one Cartas.
     * @example
     * // Delete one Cartas
     * const Cartas = await prisma.cartas.delete({
     *   where: {
     *     // ... filter to delete one Cartas
     *   }
     * })
     * 
    **/
    delete<T extends CartasDeleteArgs>(
      args: SelectSubset<T, CartasDeleteArgs>
    ): CheckSelect<T, Prisma__CartasClient<Cartas>, Prisma__CartasClient<CartasGetPayload<T>>>

    /**
     * Update one Cartas.
     * @param {CartasUpdateArgs} args - Arguments to update one Cartas.
     * @example
     * // Update one Cartas
     * const cartas = await prisma.cartas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartasUpdateArgs>(
      args: SelectSubset<T, CartasUpdateArgs>
    ): CheckSelect<T, Prisma__CartasClient<Cartas>, Prisma__CartasClient<CartasGetPayload<T>>>

    /**
     * Delete zero or more Cartas.
     * @param {CartasDeleteManyArgs} args - Arguments to filter Cartas to delete.
     * @example
     * // Delete a few Cartas
     * const { count } = await prisma.cartas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartasDeleteManyArgs>(
      args?: SelectSubset<T, CartasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cartas
     * const cartas = await prisma.cartas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartasUpdateManyArgs>(
      args: SelectSubset<T, CartasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cartas.
     * @param {CartasUpsertArgs} args - Arguments to update or create a Cartas.
     * @example
     * // Update or create a Cartas
     * const cartas = await prisma.cartas.upsert({
     *   create: {
     *     // ... data to create a Cartas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cartas we want to update
     *   }
     * })
    **/
    upsert<T extends CartasUpsertArgs>(
      args: SelectSubset<T, CartasUpsertArgs>
    ): CheckSelect<T, Prisma__CartasClient<Cartas>, Prisma__CartasClient<CartasGetPayload<T>>>

    /**
     * Find zero or more Cartas that matches the filter.
     * @param {CartasFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const cartas = await prisma.cartas.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: CartasFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Cartas.
     * @param {CartasAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const cartas = await prisma.cartas.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: CartasAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Cartas that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CartasFindUniqueOrThrowArgs} args - Arguments to find a Cartas
     * @example
     * // Get one Cartas
     * const cartas = await prisma.cartas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CartasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CartasFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CartasClient<Cartas>, Prisma__CartasClient<CartasGetPayload<T>>>

    /**
     * Find the first Cartas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartasFindFirstOrThrowArgs} args - Arguments to find a Cartas
     * @example
     * // Get one Cartas
     * const cartas = await prisma.cartas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CartasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CartasFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CartasClient<Cartas>, Prisma__CartasClient<CartasGetPayload<T>>>

    /**
     * Count the number of Cartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartasCountArgs} args - Arguments to filter Cartas to count.
     * @example
     * // Count the number of Cartas
     * const count = await prisma.cartas.count({
     *   where: {
     *     // ... the filter for the Cartas we want to count
     *   }
     * })
    **/
    count<T extends CartasCountArgs>(
      args?: Subset<T, CartasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartasAggregateArgs>(args: Subset<T, CartasAggregateArgs>): PrismaPromise<GetCartasAggregateType<T>>

    /**
     * Group by Cartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartasGroupByArgs['orderBy'] }
        : { orderBy?: CartasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Cartas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CartasClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Cartas base type for findUnique actions
   */
  export type CartasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Cartas
     * 
    **/
    select?: CartasSelect | null
    /**
     * Filter, which Cartas to fetch.
     * 
    **/
    where: CartasWhereUniqueInput
  }

  /**
   * Cartas: findUnique
   */
  export interface CartasFindUniqueArgs extends CartasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cartas base type for findFirst actions
   */
  export type CartasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Cartas
     * 
    **/
    select?: CartasSelect | null
    /**
     * Filter, which Cartas to fetch.
     * 
    **/
    where?: CartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartas to fetch.
     * 
    **/
    orderBy?: Enumerable<CartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cartas.
     * 
    **/
    cursor?: CartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cartas.
     * 
    **/
    distinct?: Enumerable<CartasScalarFieldEnum>
  }

  /**
   * Cartas: findFirst
   */
  export interface CartasFindFirstArgs extends CartasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cartas findMany
   */
  export type CartasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cartas
     * 
    **/
    select?: CartasSelect | null
    /**
     * Filter, which Cartas to fetch.
     * 
    **/
    where?: CartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartas to fetch.
     * 
    **/
    orderBy?: Enumerable<CartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cartas.
     * 
    **/
    cursor?: CartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CartasScalarFieldEnum>
  }


  /**
   * Cartas create
   */
  export type CartasCreateArgs = {
    /**
     * Select specific fields to fetch from the Cartas
     * 
    **/
    select?: CartasSelect | null
    /**
     * The data needed to create a Cartas.
     * 
    **/
    data: XOR<CartasCreateInput, CartasUncheckedCreateInput>
  }


  /**
   * Cartas createMany
   */
  export type CartasCreateManyArgs = {
    /**
     * The data used to create many Cartas.
     * 
    **/
    data: Enumerable<CartasCreateManyInput>
  }


  /**
   * Cartas update
   */
  export type CartasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cartas
     * 
    **/
    select?: CartasSelect | null
    /**
     * The data needed to update a Cartas.
     * 
    **/
    data: XOR<CartasUpdateInput, CartasUncheckedUpdateInput>
    /**
     * Choose, which Cartas to update.
     * 
    **/
    where: CartasWhereUniqueInput
  }


  /**
   * Cartas updateMany
   */
  export type CartasUpdateManyArgs = {
    /**
     * The data used to update Cartas.
     * 
    **/
    data: XOR<CartasUpdateManyMutationInput, CartasUncheckedUpdateManyInput>
    /**
     * Filter which Cartas to update
     * 
    **/
    where?: CartasWhereInput
  }


  /**
   * Cartas upsert
   */
  export type CartasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cartas
     * 
    **/
    select?: CartasSelect | null
    /**
     * The filter to search for the Cartas to update in case it exists.
     * 
    **/
    where: CartasWhereUniqueInput
    /**
     * In case the Cartas found by the `where` argument doesn't exist, create a new Cartas with this data.
     * 
    **/
    create: XOR<CartasCreateInput, CartasUncheckedCreateInput>
    /**
     * In case the Cartas was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CartasUpdateInput, CartasUncheckedUpdateInput>
  }


  /**
   * Cartas delete
   */
  export type CartasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cartas
     * 
    **/
    select?: CartasSelect | null
    /**
     * Filter which Cartas to delete.
     * 
    **/
    where: CartasWhereUniqueInput
  }


  /**
   * Cartas deleteMany
   */
  export type CartasDeleteManyArgs = {
    /**
     * Filter which Cartas to delete
     * 
    **/
    where?: CartasWhereInput
  }


  /**
   * Cartas findRaw
   */
  export type CartasFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Cartas aggregateRaw
   */
  export type CartasAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Cartas: findUniqueOrThrow
   */
  export type CartasFindUniqueOrThrowArgs = CartasFindUniqueArgsBase
      

  /**
   * Cartas: findFirstOrThrow
   */
  export type CartasFindFirstOrThrowArgs = CartasFindFirstArgsBase
      

  /**
   * Cartas without action
   */
  export type CartasArgs = {
    /**
     * Select specific fields to fetch from the Cartas
     * 
    **/
    select?: CartasSelect | null
  }



  /**
   * Model camposBase
   */


  export type AggregateCamposBase = {
    _count: CamposBaseCountAggregateOutputType | null
    _min: CamposBaseMinAggregateOutputType | null
    _max: CamposBaseMaxAggregateOutputType | null
  }

  export type CamposBaseMinAggregateOutputType = {
    id: string | null
    DESCRIPCION_CAMPO: string | null
    TIPO_CAMPO: string | null
  }

  export type CamposBaseMaxAggregateOutputType = {
    id: string | null
    DESCRIPCION_CAMPO: string | null
    TIPO_CAMPO: string | null
  }

  export type CamposBaseCountAggregateOutputType = {
    id: number
    DESCRIPCION_CAMPO: number
    TIPO_CAMPO: number
    _all: number
  }


  export type CamposBaseMinAggregateInputType = {
    id?: true
    DESCRIPCION_CAMPO?: true
    TIPO_CAMPO?: true
  }

  export type CamposBaseMaxAggregateInputType = {
    id?: true
    DESCRIPCION_CAMPO?: true
    TIPO_CAMPO?: true
  }

  export type CamposBaseCountAggregateInputType = {
    id?: true
    DESCRIPCION_CAMPO?: true
    TIPO_CAMPO?: true
    _all?: true
  }

  export type CamposBaseAggregateArgs = {
    /**
     * Filter which camposBase to aggregate.
     * 
    **/
    where?: camposBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of camposBases to fetch.
     * 
    **/
    orderBy?: Enumerable<camposBaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: camposBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` camposBases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` camposBases.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned camposBases
    **/
    _count?: true | CamposBaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CamposBaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CamposBaseMaxAggregateInputType
  }

  export type GetCamposBaseAggregateType<T extends CamposBaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCamposBase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCamposBase[P]>
      : GetScalarType<T[P], AggregateCamposBase[P]>
  }




  export type CamposBaseGroupByArgs = {
    where?: camposBaseWhereInput
    orderBy?: Enumerable<camposBaseOrderByWithAggregationInput>
    by: Array<CamposBaseScalarFieldEnum>
    having?: camposBaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CamposBaseCountAggregateInputType | true
    _min?: CamposBaseMinAggregateInputType
    _max?: CamposBaseMaxAggregateInputType
  }


  export type CamposBaseGroupByOutputType = {
    id: string
    DESCRIPCION_CAMPO: string
    TIPO_CAMPO: string
    _count: CamposBaseCountAggregateOutputType | null
    _min: CamposBaseMinAggregateOutputType | null
    _max: CamposBaseMaxAggregateOutputType | null
  }

  type GetCamposBaseGroupByPayload<T extends CamposBaseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CamposBaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CamposBaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CamposBaseGroupByOutputType[P]>
            : GetScalarType<T[P], CamposBaseGroupByOutputType[P]>
        }
      >
    >


  export type camposBaseSelect = {
    id?: boolean
    NOMBRE_CAMPO?: boolean | NombresCampoArgs
    DESCRIPCION_CAMPO?: boolean
    TIPO_CAMPO?: boolean
  }

  export type camposBaseInclude = {

  }

  export type camposBaseGetPayload<
    S extends boolean | null | undefined | camposBaseArgs,
    U = keyof S
      > = S extends true
        ? camposBase
    : S extends undefined
    ? never
    : S extends camposBaseArgs | camposBaseFindManyArgs
    ?'include' extends U
    ? camposBase 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'NOMBRE_CAMPO' ? NombresCampoGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof camposBase ? camposBase[P] : never
  } 
    : camposBase
  : camposBase


  type camposBaseCountArgs = Merge<
    Omit<camposBaseFindManyArgs, 'select' | 'include'> & {
      select?: CamposBaseCountAggregateInputType | true
    }
  >

  export interface camposBaseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one CamposBase that matches the filter.
     * @param {camposBaseFindUniqueArgs} args - Arguments to find a CamposBase
     * @example
     * // Get one CamposBase
     * const camposBase = await prisma.camposBase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends camposBaseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, camposBaseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'camposBase'> extends True ? CheckSelect<T, Prisma__camposBaseClient<camposBase>, Prisma__camposBaseClient<camposBaseGetPayload<T>>> : CheckSelect<T, Prisma__camposBaseClient<camposBase | null >, Prisma__camposBaseClient<camposBaseGetPayload<T> | null >>

    /**
     * Find the first CamposBase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposBaseFindFirstArgs} args - Arguments to find a CamposBase
     * @example
     * // Get one CamposBase
     * const camposBase = await prisma.camposBase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends camposBaseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, camposBaseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'camposBase'> extends True ? CheckSelect<T, Prisma__camposBaseClient<camposBase>, Prisma__camposBaseClient<camposBaseGetPayload<T>>> : CheckSelect<T, Prisma__camposBaseClient<camposBase | null >, Prisma__camposBaseClient<camposBaseGetPayload<T> | null >>

    /**
     * Find zero or more CamposBases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposBaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CamposBases
     * const camposBases = await prisma.camposBase.findMany()
     * 
     * // Get first 10 CamposBases
     * const camposBases = await prisma.camposBase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const camposBaseWithIdOnly = await prisma.camposBase.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends camposBaseFindManyArgs>(
      args?: SelectSubset<T, camposBaseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<camposBase>>, PrismaPromise<Array<camposBaseGetPayload<T>>>>

    /**
     * Create a CamposBase.
     * @param {camposBaseCreateArgs} args - Arguments to create a CamposBase.
     * @example
     * // Create one CamposBase
     * const CamposBase = await prisma.camposBase.create({
     *   data: {
     *     // ... data to create a CamposBase
     *   }
     * })
     * 
    **/
    create<T extends camposBaseCreateArgs>(
      args: SelectSubset<T, camposBaseCreateArgs>
    ): CheckSelect<T, Prisma__camposBaseClient<camposBase>, Prisma__camposBaseClient<camposBaseGetPayload<T>>>

    /**
     * Create many CamposBases.
     *     @param {camposBaseCreateManyArgs} args - Arguments to create many CamposBases.
     *     @example
     *     // Create many CamposBases
     *     const camposBase = await prisma.camposBase.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends camposBaseCreateManyArgs>(
      args?: SelectSubset<T, camposBaseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CamposBase.
     * @param {camposBaseDeleteArgs} args - Arguments to delete one CamposBase.
     * @example
     * // Delete one CamposBase
     * const CamposBase = await prisma.camposBase.delete({
     *   where: {
     *     // ... filter to delete one CamposBase
     *   }
     * })
     * 
    **/
    delete<T extends camposBaseDeleteArgs>(
      args: SelectSubset<T, camposBaseDeleteArgs>
    ): CheckSelect<T, Prisma__camposBaseClient<camposBase>, Prisma__camposBaseClient<camposBaseGetPayload<T>>>

    /**
     * Update one CamposBase.
     * @param {camposBaseUpdateArgs} args - Arguments to update one CamposBase.
     * @example
     * // Update one CamposBase
     * const camposBase = await prisma.camposBase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends camposBaseUpdateArgs>(
      args: SelectSubset<T, camposBaseUpdateArgs>
    ): CheckSelect<T, Prisma__camposBaseClient<camposBase>, Prisma__camposBaseClient<camposBaseGetPayload<T>>>

    /**
     * Delete zero or more CamposBases.
     * @param {camposBaseDeleteManyArgs} args - Arguments to filter CamposBases to delete.
     * @example
     * // Delete a few CamposBases
     * const { count } = await prisma.camposBase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends camposBaseDeleteManyArgs>(
      args?: SelectSubset<T, camposBaseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CamposBases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposBaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CamposBases
     * const camposBase = await prisma.camposBase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends camposBaseUpdateManyArgs>(
      args: SelectSubset<T, camposBaseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CamposBase.
     * @param {camposBaseUpsertArgs} args - Arguments to update or create a CamposBase.
     * @example
     * // Update or create a CamposBase
     * const camposBase = await prisma.camposBase.upsert({
     *   create: {
     *     // ... data to create a CamposBase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CamposBase we want to update
     *   }
     * })
    **/
    upsert<T extends camposBaseUpsertArgs>(
      args: SelectSubset<T, camposBaseUpsertArgs>
    ): CheckSelect<T, Prisma__camposBaseClient<camposBase>, Prisma__camposBaseClient<camposBaseGetPayload<T>>>

    /**
     * Find zero or more CamposBases that matches the filter.
     * @param {camposBaseFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const camposBase = await prisma.camposBase.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: camposBaseFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a CamposBase.
     * @param {camposBaseAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const camposBase = await prisma.camposBase.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: camposBaseAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one CamposBase that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {camposBaseFindUniqueOrThrowArgs} args - Arguments to find a CamposBase
     * @example
     * // Get one CamposBase
     * const camposBase = await prisma.camposBase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends camposBaseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, camposBaseFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__camposBaseClient<camposBase>, Prisma__camposBaseClient<camposBaseGetPayload<T>>>

    /**
     * Find the first CamposBase that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposBaseFindFirstOrThrowArgs} args - Arguments to find a CamposBase
     * @example
     * // Get one CamposBase
     * const camposBase = await prisma.camposBase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends camposBaseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, camposBaseFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__camposBaseClient<camposBase>, Prisma__camposBaseClient<camposBaseGetPayload<T>>>

    /**
     * Count the number of CamposBases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposBaseCountArgs} args - Arguments to filter CamposBases to count.
     * @example
     * // Count the number of CamposBases
     * const count = await prisma.camposBase.count({
     *   where: {
     *     // ... the filter for the CamposBases we want to count
     *   }
     * })
    **/
    count<T extends camposBaseCountArgs>(
      args?: Subset<T, camposBaseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CamposBaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CamposBase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CamposBaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CamposBaseAggregateArgs>(args: Subset<T, CamposBaseAggregateArgs>): PrismaPromise<GetCamposBaseAggregateType<T>>

    /**
     * Group by CamposBase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CamposBaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CamposBaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CamposBaseGroupByArgs['orderBy'] }
        : { orderBy?: CamposBaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CamposBaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCamposBaseGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for camposBase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__camposBaseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    NOMBRE_CAMPO<T extends NombresCampoArgs = {}>(args?: Subset<T, NombresCampoArgs>): CheckSelect<T, Prisma__NombresCampoClient<NombresCampo | null >, Prisma__NombresCampoClient<NombresCampoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * camposBase base type for findUnique actions
   */
  export type camposBaseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the camposBase
     * 
    **/
    select?: camposBaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposBaseInclude | null
    /**
     * Filter, which camposBase to fetch.
     * 
    **/
    where: camposBaseWhereUniqueInput
  }

  /**
   * camposBase: findUnique
   */
  export interface camposBaseFindUniqueArgs extends camposBaseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * camposBase base type for findFirst actions
   */
  export type camposBaseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the camposBase
     * 
    **/
    select?: camposBaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposBaseInclude | null
    /**
     * Filter, which camposBase to fetch.
     * 
    **/
    where?: camposBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of camposBases to fetch.
     * 
    **/
    orderBy?: Enumerable<camposBaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for camposBases.
     * 
    **/
    cursor?: camposBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` camposBases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` camposBases.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of camposBases.
     * 
    **/
    distinct?: Enumerable<CamposBaseScalarFieldEnum>
  }

  /**
   * camposBase: findFirst
   */
  export interface camposBaseFindFirstArgs extends camposBaseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * camposBase findMany
   */
  export type camposBaseFindManyArgs = {
    /**
     * Select specific fields to fetch from the camposBase
     * 
    **/
    select?: camposBaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposBaseInclude | null
    /**
     * Filter, which camposBases to fetch.
     * 
    **/
    where?: camposBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of camposBases to fetch.
     * 
    **/
    orderBy?: Enumerable<camposBaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing camposBases.
     * 
    **/
    cursor?: camposBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` camposBases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` camposBases.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CamposBaseScalarFieldEnum>
  }


  /**
   * camposBase create
   */
  export type camposBaseCreateArgs = {
    /**
     * Select specific fields to fetch from the camposBase
     * 
    **/
    select?: camposBaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposBaseInclude | null
    /**
     * The data needed to create a camposBase.
     * 
    **/
    data: XOR<camposBaseCreateInput, camposBaseUncheckedCreateInput>
  }


  /**
   * camposBase createMany
   */
  export type camposBaseCreateManyArgs = {
    /**
     * The data used to create many camposBases.
     * 
    **/
    data: Enumerable<camposBaseCreateManyInput>
  }


  /**
   * camposBase update
   */
  export type camposBaseUpdateArgs = {
    /**
     * Select specific fields to fetch from the camposBase
     * 
    **/
    select?: camposBaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposBaseInclude | null
    /**
     * The data needed to update a camposBase.
     * 
    **/
    data: XOR<camposBaseUpdateInput, camposBaseUncheckedUpdateInput>
    /**
     * Choose, which camposBase to update.
     * 
    **/
    where: camposBaseWhereUniqueInput
  }


  /**
   * camposBase updateMany
   */
  export type camposBaseUpdateManyArgs = {
    /**
     * The data used to update camposBases.
     * 
    **/
    data: XOR<camposBaseUpdateManyMutationInput, camposBaseUncheckedUpdateManyInput>
    /**
     * Filter which camposBases to update
     * 
    **/
    where?: camposBaseWhereInput
  }


  /**
   * camposBase upsert
   */
  export type camposBaseUpsertArgs = {
    /**
     * Select specific fields to fetch from the camposBase
     * 
    **/
    select?: camposBaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposBaseInclude | null
    /**
     * The filter to search for the camposBase to update in case it exists.
     * 
    **/
    where: camposBaseWhereUniqueInput
    /**
     * In case the camposBase found by the `where` argument doesn't exist, create a new camposBase with this data.
     * 
    **/
    create: XOR<camposBaseCreateInput, camposBaseUncheckedCreateInput>
    /**
     * In case the camposBase was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<camposBaseUpdateInput, camposBaseUncheckedUpdateInput>
  }


  /**
   * camposBase delete
   */
  export type camposBaseDeleteArgs = {
    /**
     * Select specific fields to fetch from the camposBase
     * 
    **/
    select?: camposBaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposBaseInclude | null
    /**
     * Filter which camposBase to delete.
     * 
    **/
    where: camposBaseWhereUniqueInput
  }


  /**
   * camposBase deleteMany
   */
  export type camposBaseDeleteManyArgs = {
    /**
     * Filter which camposBases to delete
     * 
    **/
    where?: camposBaseWhereInput
  }


  /**
   * camposBase findRaw
   */
  export type camposBaseFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * camposBase aggregateRaw
   */
  export type camposBaseAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * camposBase: findUniqueOrThrow
   */
  export type camposBaseFindUniqueOrThrowArgs = camposBaseFindUniqueArgsBase
      

  /**
   * camposBase: findFirstOrThrow
   */
  export type camposBaseFindFirstOrThrowArgs = camposBaseFindFirstArgsBase
      

  /**
   * camposBase without action
   */
  export type camposBaseArgs = {
    /**
     * Select specific fields to fetch from the camposBase
     * 
    **/
    select?: camposBaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposBaseInclude | null
  }



  /**
   * Model camposCartas
   */


  export type AggregateCamposCartas = {
    _count: CamposCartasCountAggregateOutputType | null
    _min: CamposCartasMinAggregateOutputType | null
    _max: CamposCartasMaxAggregateOutputType | null
  }

  export type CamposCartasMinAggregateOutputType = {
    id: string | null
    DESCRIPCION_CAMPO: string | null
    TIPO_CAMPO: string | null
  }

  export type CamposCartasMaxAggregateOutputType = {
    id: string | null
    DESCRIPCION_CAMPO: string | null
    TIPO_CAMPO: string | null
  }

  export type CamposCartasCountAggregateOutputType = {
    id: number
    DESCRIPCION_CAMPO: number
    TIPO_CAMPO: number
    _all: number
  }


  export type CamposCartasMinAggregateInputType = {
    id?: true
    DESCRIPCION_CAMPO?: true
    TIPO_CAMPO?: true
  }

  export type CamposCartasMaxAggregateInputType = {
    id?: true
    DESCRIPCION_CAMPO?: true
    TIPO_CAMPO?: true
  }

  export type CamposCartasCountAggregateInputType = {
    id?: true
    DESCRIPCION_CAMPO?: true
    TIPO_CAMPO?: true
    _all?: true
  }

  export type CamposCartasAggregateArgs = {
    /**
     * Filter which camposCartas to aggregate.
     * 
    **/
    where?: camposCartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of camposCartas to fetch.
     * 
    **/
    orderBy?: Enumerable<camposCartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: camposCartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` camposCartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` camposCartas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned camposCartas
    **/
    _count?: true | CamposCartasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CamposCartasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CamposCartasMaxAggregateInputType
  }

  export type GetCamposCartasAggregateType<T extends CamposCartasAggregateArgs> = {
        [P in keyof T & keyof AggregateCamposCartas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCamposCartas[P]>
      : GetScalarType<T[P], AggregateCamposCartas[P]>
  }




  export type CamposCartasGroupByArgs = {
    where?: camposCartasWhereInput
    orderBy?: Enumerable<camposCartasOrderByWithAggregationInput>
    by: Array<CamposCartasScalarFieldEnum>
    having?: camposCartasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CamposCartasCountAggregateInputType | true
    _min?: CamposCartasMinAggregateInputType
    _max?: CamposCartasMaxAggregateInputType
  }


  export type CamposCartasGroupByOutputType = {
    id: string
    DESCRIPCION_CAMPO: string
    TIPO_CAMPO: string
    _count: CamposCartasCountAggregateOutputType | null
    _min: CamposCartasMinAggregateOutputType | null
    _max: CamposCartasMaxAggregateOutputType | null
  }

  type GetCamposCartasGroupByPayload<T extends CamposCartasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CamposCartasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CamposCartasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CamposCartasGroupByOutputType[P]>
            : GetScalarType<T[P], CamposCartasGroupByOutputType[P]>
        }
      >
    >


  export type camposCartasSelect = {
    id?: boolean
    NOMBRE_CAMPO?: boolean | NombresCampoArgs
    DESCRIPCION_CAMPO?: boolean
    TIPO_CAMPO?: boolean
    CONTENIDO_CAMPO?: boolean | ContenidosCampoArgs
  }

  export type camposCartasInclude = {

  }

  export type camposCartasGetPayload<
    S extends boolean | null | undefined | camposCartasArgs,
    U = keyof S
      > = S extends true
        ? camposCartas
    : S extends undefined
    ? never
    : S extends camposCartasArgs | camposCartasFindManyArgs
    ?'include' extends U
    ? camposCartas 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'NOMBRE_CAMPO' ? NombresCampoGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'CONTENIDO_CAMPO' ? ContenidosCampoGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof camposCartas ? camposCartas[P] : never
  } 
    : camposCartas
  : camposCartas


  type camposCartasCountArgs = Merge<
    Omit<camposCartasFindManyArgs, 'select' | 'include'> & {
      select?: CamposCartasCountAggregateInputType | true
    }
  >

  export interface camposCartasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one CamposCartas that matches the filter.
     * @param {camposCartasFindUniqueArgs} args - Arguments to find a CamposCartas
     * @example
     * // Get one CamposCartas
     * const camposCartas = await prisma.camposCartas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends camposCartasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, camposCartasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'camposCartas'> extends True ? CheckSelect<T, Prisma__camposCartasClient<camposCartas>, Prisma__camposCartasClient<camposCartasGetPayload<T>>> : CheckSelect<T, Prisma__camposCartasClient<camposCartas | null >, Prisma__camposCartasClient<camposCartasGetPayload<T> | null >>

    /**
     * Find the first CamposCartas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposCartasFindFirstArgs} args - Arguments to find a CamposCartas
     * @example
     * // Get one CamposCartas
     * const camposCartas = await prisma.camposCartas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends camposCartasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, camposCartasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'camposCartas'> extends True ? CheckSelect<T, Prisma__camposCartasClient<camposCartas>, Prisma__camposCartasClient<camposCartasGetPayload<T>>> : CheckSelect<T, Prisma__camposCartasClient<camposCartas | null >, Prisma__camposCartasClient<camposCartasGetPayload<T> | null >>

    /**
     * Find zero or more CamposCartas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposCartasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CamposCartas
     * const camposCartas = await prisma.camposCartas.findMany()
     * 
     * // Get first 10 CamposCartas
     * const camposCartas = await prisma.camposCartas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const camposCartasWithIdOnly = await prisma.camposCartas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends camposCartasFindManyArgs>(
      args?: SelectSubset<T, camposCartasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<camposCartas>>, PrismaPromise<Array<camposCartasGetPayload<T>>>>

    /**
     * Create a CamposCartas.
     * @param {camposCartasCreateArgs} args - Arguments to create a CamposCartas.
     * @example
     * // Create one CamposCartas
     * const CamposCartas = await prisma.camposCartas.create({
     *   data: {
     *     // ... data to create a CamposCartas
     *   }
     * })
     * 
    **/
    create<T extends camposCartasCreateArgs>(
      args: SelectSubset<T, camposCartasCreateArgs>
    ): CheckSelect<T, Prisma__camposCartasClient<camposCartas>, Prisma__camposCartasClient<camposCartasGetPayload<T>>>

    /**
     * Create many CamposCartas.
     *     @param {camposCartasCreateManyArgs} args - Arguments to create many CamposCartas.
     *     @example
     *     // Create many CamposCartas
     *     const camposCartas = await prisma.camposCartas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends camposCartasCreateManyArgs>(
      args?: SelectSubset<T, camposCartasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CamposCartas.
     * @param {camposCartasDeleteArgs} args - Arguments to delete one CamposCartas.
     * @example
     * // Delete one CamposCartas
     * const CamposCartas = await prisma.camposCartas.delete({
     *   where: {
     *     // ... filter to delete one CamposCartas
     *   }
     * })
     * 
    **/
    delete<T extends camposCartasDeleteArgs>(
      args: SelectSubset<T, camposCartasDeleteArgs>
    ): CheckSelect<T, Prisma__camposCartasClient<camposCartas>, Prisma__camposCartasClient<camposCartasGetPayload<T>>>

    /**
     * Update one CamposCartas.
     * @param {camposCartasUpdateArgs} args - Arguments to update one CamposCartas.
     * @example
     * // Update one CamposCartas
     * const camposCartas = await prisma.camposCartas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends camposCartasUpdateArgs>(
      args: SelectSubset<T, camposCartasUpdateArgs>
    ): CheckSelect<T, Prisma__camposCartasClient<camposCartas>, Prisma__camposCartasClient<camposCartasGetPayload<T>>>

    /**
     * Delete zero or more CamposCartas.
     * @param {camposCartasDeleteManyArgs} args - Arguments to filter CamposCartas to delete.
     * @example
     * // Delete a few CamposCartas
     * const { count } = await prisma.camposCartas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends camposCartasDeleteManyArgs>(
      args?: SelectSubset<T, camposCartasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CamposCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposCartasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CamposCartas
     * const camposCartas = await prisma.camposCartas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends camposCartasUpdateManyArgs>(
      args: SelectSubset<T, camposCartasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CamposCartas.
     * @param {camposCartasUpsertArgs} args - Arguments to update or create a CamposCartas.
     * @example
     * // Update or create a CamposCartas
     * const camposCartas = await prisma.camposCartas.upsert({
     *   create: {
     *     // ... data to create a CamposCartas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CamposCartas we want to update
     *   }
     * })
    **/
    upsert<T extends camposCartasUpsertArgs>(
      args: SelectSubset<T, camposCartasUpsertArgs>
    ): CheckSelect<T, Prisma__camposCartasClient<camposCartas>, Prisma__camposCartasClient<camposCartasGetPayload<T>>>

    /**
     * Find zero or more CamposCartas that matches the filter.
     * @param {camposCartasFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const camposCartas = await prisma.camposCartas.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: camposCartasFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a CamposCartas.
     * @param {camposCartasAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const camposCartas = await prisma.camposCartas.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: camposCartasAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one CamposCartas that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {camposCartasFindUniqueOrThrowArgs} args - Arguments to find a CamposCartas
     * @example
     * // Get one CamposCartas
     * const camposCartas = await prisma.camposCartas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends camposCartasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, camposCartasFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__camposCartasClient<camposCartas>, Prisma__camposCartasClient<camposCartasGetPayload<T>>>

    /**
     * Find the first CamposCartas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposCartasFindFirstOrThrowArgs} args - Arguments to find a CamposCartas
     * @example
     * // Get one CamposCartas
     * const camposCartas = await prisma.camposCartas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends camposCartasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, camposCartasFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__camposCartasClient<camposCartas>, Prisma__camposCartasClient<camposCartasGetPayload<T>>>

    /**
     * Count the number of CamposCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camposCartasCountArgs} args - Arguments to filter CamposCartas to count.
     * @example
     * // Count the number of CamposCartas
     * const count = await prisma.camposCartas.count({
     *   where: {
     *     // ... the filter for the CamposCartas we want to count
     *   }
     * })
    **/
    count<T extends camposCartasCountArgs>(
      args?: Subset<T, camposCartasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CamposCartasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CamposCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CamposCartasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CamposCartasAggregateArgs>(args: Subset<T, CamposCartasAggregateArgs>): PrismaPromise<GetCamposCartasAggregateType<T>>

    /**
     * Group by CamposCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CamposCartasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CamposCartasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CamposCartasGroupByArgs['orderBy'] }
        : { orderBy?: CamposCartasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CamposCartasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCamposCartasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for camposCartas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__camposCartasClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    NOMBRE_CAMPO<T extends NombresCampoArgs = {}>(args?: Subset<T, NombresCampoArgs>): CheckSelect<T, Prisma__NombresCampoClient<NombresCampo | null >, Prisma__NombresCampoClient<NombresCampoGetPayload<T> | null >>;

    CONTENIDO_CAMPO<T extends ContenidosCampoArgs = {}>(args?: Subset<T, ContenidosCampoArgs>): CheckSelect<T, Prisma__ContenidosCampoClient<ContenidosCampo | null >, Prisma__ContenidosCampoClient<ContenidosCampoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * camposCartas base type for findUnique actions
   */
  export type camposCartasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the camposCartas
     * 
    **/
    select?: camposCartasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposCartasInclude | null
    /**
     * Filter, which camposCartas to fetch.
     * 
    **/
    where: camposCartasWhereUniqueInput
  }

  /**
   * camposCartas: findUnique
   */
  export interface camposCartasFindUniqueArgs extends camposCartasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * camposCartas base type for findFirst actions
   */
  export type camposCartasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the camposCartas
     * 
    **/
    select?: camposCartasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposCartasInclude | null
    /**
     * Filter, which camposCartas to fetch.
     * 
    **/
    where?: camposCartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of camposCartas to fetch.
     * 
    **/
    orderBy?: Enumerable<camposCartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for camposCartas.
     * 
    **/
    cursor?: camposCartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` camposCartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` camposCartas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of camposCartas.
     * 
    **/
    distinct?: Enumerable<CamposCartasScalarFieldEnum>
  }

  /**
   * camposCartas: findFirst
   */
  export interface camposCartasFindFirstArgs extends camposCartasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * camposCartas findMany
   */
  export type camposCartasFindManyArgs = {
    /**
     * Select specific fields to fetch from the camposCartas
     * 
    **/
    select?: camposCartasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposCartasInclude | null
    /**
     * Filter, which camposCartas to fetch.
     * 
    **/
    where?: camposCartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of camposCartas to fetch.
     * 
    **/
    orderBy?: Enumerable<camposCartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing camposCartas.
     * 
    **/
    cursor?: camposCartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` camposCartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` camposCartas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CamposCartasScalarFieldEnum>
  }


  /**
   * camposCartas create
   */
  export type camposCartasCreateArgs = {
    /**
     * Select specific fields to fetch from the camposCartas
     * 
    **/
    select?: camposCartasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposCartasInclude | null
    /**
     * The data needed to create a camposCartas.
     * 
    **/
    data: XOR<camposCartasCreateInput, camposCartasUncheckedCreateInput>
  }


  /**
   * camposCartas createMany
   */
  export type camposCartasCreateManyArgs = {
    /**
     * The data used to create many camposCartas.
     * 
    **/
    data: Enumerable<camposCartasCreateManyInput>
  }


  /**
   * camposCartas update
   */
  export type camposCartasUpdateArgs = {
    /**
     * Select specific fields to fetch from the camposCartas
     * 
    **/
    select?: camposCartasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposCartasInclude | null
    /**
     * The data needed to update a camposCartas.
     * 
    **/
    data: XOR<camposCartasUpdateInput, camposCartasUncheckedUpdateInput>
    /**
     * Choose, which camposCartas to update.
     * 
    **/
    where: camposCartasWhereUniqueInput
  }


  /**
   * camposCartas updateMany
   */
  export type camposCartasUpdateManyArgs = {
    /**
     * The data used to update camposCartas.
     * 
    **/
    data: XOR<camposCartasUpdateManyMutationInput, camposCartasUncheckedUpdateManyInput>
    /**
     * Filter which camposCartas to update
     * 
    **/
    where?: camposCartasWhereInput
  }


  /**
   * camposCartas upsert
   */
  export type camposCartasUpsertArgs = {
    /**
     * Select specific fields to fetch from the camposCartas
     * 
    **/
    select?: camposCartasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposCartasInclude | null
    /**
     * The filter to search for the camposCartas to update in case it exists.
     * 
    **/
    where: camposCartasWhereUniqueInput
    /**
     * In case the camposCartas found by the `where` argument doesn't exist, create a new camposCartas with this data.
     * 
    **/
    create: XOR<camposCartasCreateInput, camposCartasUncheckedCreateInput>
    /**
     * In case the camposCartas was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<camposCartasUpdateInput, camposCartasUncheckedUpdateInput>
  }


  /**
   * camposCartas delete
   */
  export type camposCartasDeleteArgs = {
    /**
     * Select specific fields to fetch from the camposCartas
     * 
    **/
    select?: camposCartasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposCartasInclude | null
    /**
     * Filter which camposCartas to delete.
     * 
    **/
    where: camposCartasWhereUniqueInput
  }


  /**
   * camposCartas deleteMany
   */
  export type camposCartasDeleteManyArgs = {
    /**
     * Filter which camposCartas to delete
     * 
    **/
    where?: camposCartasWhereInput
  }


  /**
   * camposCartas findRaw
   */
  export type camposCartasFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * camposCartas aggregateRaw
   */
  export type camposCartasAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * camposCartas: findUniqueOrThrow
   */
  export type camposCartasFindUniqueOrThrowArgs = camposCartasFindUniqueArgsBase
      

  /**
   * camposCartas: findFirstOrThrow
   */
  export type camposCartasFindFirstOrThrowArgs = camposCartasFindFirstArgsBase
      

  /**
   * camposCartas without action
   */
  export type camposCartasArgs = {
    /**
     * Select specific fields to fetch from the camposCartas
     * 
    **/
    select?: camposCartasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camposCartasInclude | null
  }



  /**
   * Model filasCartas
   */


  export type AggregateFilasCartas = {
    _count: FilasCartasCountAggregateOutputType | null
    _min: FilasCartasMinAggregateOutputType | null
    _max: FilasCartasMaxAggregateOutputType | null
  }

  export type FilasCartasMinAggregateOutputType = {
    id: string | null
    ACREDITADORA: string | null
    HIDE_FLAG: boolean | null
    filaJSON: string | null
    campoBase: string | null
  }

  export type FilasCartasMaxAggregateOutputType = {
    id: string | null
    ACREDITADORA: string | null
    HIDE_FLAG: boolean | null
    filaJSON: string | null
    campoBase: string | null
  }

  export type FilasCartasCountAggregateOutputType = {
    id: number
    ACREDITADORA: number
    HIDE_FLAG: number
    filaJSON: number
    campoBase: number
    _all: number
  }


  export type FilasCartasMinAggregateInputType = {
    id?: true
    ACREDITADORA?: true
    HIDE_FLAG?: true
    filaJSON?: true
    campoBase?: true
  }

  export type FilasCartasMaxAggregateInputType = {
    id?: true
    ACREDITADORA?: true
    HIDE_FLAG?: true
    filaJSON?: true
    campoBase?: true
  }

  export type FilasCartasCountAggregateInputType = {
    id?: true
    ACREDITADORA?: true
    HIDE_FLAG?: true
    filaJSON?: true
    campoBase?: true
    _all?: true
  }

  export type FilasCartasAggregateArgs = {
    /**
     * Filter which filasCartas to aggregate.
     * 
    **/
    where?: filasCartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of filasCartas to fetch.
     * 
    **/
    orderBy?: Enumerable<filasCartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: filasCartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` filasCartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` filasCartas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned filasCartas
    **/
    _count?: true | FilasCartasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilasCartasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilasCartasMaxAggregateInputType
  }

  export type GetFilasCartasAggregateType<T extends FilasCartasAggregateArgs> = {
        [P in keyof T & keyof AggregateFilasCartas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilasCartas[P]>
      : GetScalarType<T[P], AggregateFilasCartas[P]>
  }




  export type FilasCartasGroupByArgs = {
    where?: filasCartasWhereInput
    orderBy?: Enumerable<filasCartasOrderByWithAggregationInput>
    by: Array<FilasCartasScalarFieldEnum>
    having?: filasCartasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilasCartasCountAggregateInputType | true
    _min?: FilasCartasMinAggregateInputType
    _max?: FilasCartasMaxAggregateInputType
  }


  export type FilasCartasGroupByOutputType = {
    id: string
    ACREDITADORA: string
    HIDE_FLAG: boolean
    filaJSON: string
    campoBase: string
    _count: FilasCartasCountAggregateOutputType | null
    _min: FilasCartasMinAggregateOutputType | null
    _max: FilasCartasMaxAggregateOutputType | null
  }

  type GetFilasCartasGroupByPayload<T extends FilasCartasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FilasCartasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilasCartasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilasCartasGroupByOutputType[P]>
            : GetScalarType<T[P], FilasCartasGroupByOutputType[P]>
        }
      >
    >


  export type filasCartasSelect = {
    id?: boolean
    ACREDITADORA?: boolean
    HIDE_FLAG?: boolean
    filaJSON?: boolean
    campoBase?: boolean
  }

  export type filasCartasGetPayload<
    S extends boolean | null | undefined | filasCartasArgs,
    U = keyof S
      > = S extends true
        ? filasCartas
    : S extends undefined
    ? never
    : S extends filasCartasArgs | filasCartasFindManyArgs
    ?'include' extends U
    ? filasCartas 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof filasCartas ? filasCartas[P] : never
  } 
    : filasCartas
  : filasCartas


  type filasCartasCountArgs = Merge<
    Omit<filasCartasFindManyArgs, 'select' | 'include'> & {
      select?: FilasCartasCountAggregateInputType | true
    }
  >

  export interface filasCartasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one FilasCartas that matches the filter.
     * @param {filasCartasFindUniqueArgs} args - Arguments to find a FilasCartas
     * @example
     * // Get one FilasCartas
     * const filasCartas = await prisma.filasCartas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends filasCartasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, filasCartasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'filasCartas'> extends True ? CheckSelect<T, Prisma__filasCartasClient<filasCartas>, Prisma__filasCartasClient<filasCartasGetPayload<T>>> : CheckSelect<T, Prisma__filasCartasClient<filasCartas | null >, Prisma__filasCartasClient<filasCartasGetPayload<T> | null >>

    /**
     * Find the first FilasCartas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filasCartasFindFirstArgs} args - Arguments to find a FilasCartas
     * @example
     * // Get one FilasCartas
     * const filasCartas = await prisma.filasCartas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends filasCartasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, filasCartasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'filasCartas'> extends True ? CheckSelect<T, Prisma__filasCartasClient<filasCartas>, Prisma__filasCartasClient<filasCartasGetPayload<T>>> : CheckSelect<T, Prisma__filasCartasClient<filasCartas | null >, Prisma__filasCartasClient<filasCartasGetPayload<T> | null >>

    /**
     * Find zero or more FilasCartas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filasCartasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FilasCartas
     * const filasCartas = await prisma.filasCartas.findMany()
     * 
     * // Get first 10 FilasCartas
     * const filasCartas = await prisma.filasCartas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filasCartasWithIdOnly = await prisma.filasCartas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends filasCartasFindManyArgs>(
      args?: SelectSubset<T, filasCartasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<filasCartas>>, PrismaPromise<Array<filasCartasGetPayload<T>>>>

    /**
     * Create a FilasCartas.
     * @param {filasCartasCreateArgs} args - Arguments to create a FilasCartas.
     * @example
     * // Create one FilasCartas
     * const FilasCartas = await prisma.filasCartas.create({
     *   data: {
     *     // ... data to create a FilasCartas
     *   }
     * })
     * 
    **/
    create<T extends filasCartasCreateArgs>(
      args: SelectSubset<T, filasCartasCreateArgs>
    ): CheckSelect<T, Prisma__filasCartasClient<filasCartas>, Prisma__filasCartasClient<filasCartasGetPayload<T>>>

    /**
     * Create many FilasCartas.
     *     @param {filasCartasCreateManyArgs} args - Arguments to create many FilasCartas.
     *     @example
     *     // Create many FilasCartas
     *     const filasCartas = await prisma.filasCartas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends filasCartasCreateManyArgs>(
      args?: SelectSubset<T, filasCartasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FilasCartas.
     * @param {filasCartasDeleteArgs} args - Arguments to delete one FilasCartas.
     * @example
     * // Delete one FilasCartas
     * const FilasCartas = await prisma.filasCartas.delete({
     *   where: {
     *     // ... filter to delete one FilasCartas
     *   }
     * })
     * 
    **/
    delete<T extends filasCartasDeleteArgs>(
      args: SelectSubset<T, filasCartasDeleteArgs>
    ): CheckSelect<T, Prisma__filasCartasClient<filasCartas>, Prisma__filasCartasClient<filasCartasGetPayload<T>>>

    /**
     * Update one FilasCartas.
     * @param {filasCartasUpdateArgs} args - Arguments to update one FilasCartas.
     * @example
     * // Update one FilasCartas
     * const filasCartas = await prisma.filasCartas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends filasCartasUpdateArgs>(
      args: SelectSubset<T, filasCartasUpdateArgs>
    ): CheckSelect<T, Prisma__filasCartasClient<filasCartas>, Prisma__filasCartasClient<filasCartasGetPayload<T>>>

    /**
     * Delete zero or more FilasCartas.
     * @param {filasCartasDeleteManyArgs} args - Arguments to filter FilasCartas to delete.
     * @example
     * // Delete a few FilasCartas
     * const { count } = await prisma.filasCartas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends filasCartasDeleteManyArgs>(
      args?: SelectSubset<T, filasCartasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FilasCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filasCartasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FilasCartas
     * const filasCartas = await prisma.filasCartas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends filasCartasUpdateManyArgs>(
      args: SelectSubset<T, filasCartasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FilasCartas.
     * @param {filasCartasUpsertArgs} args - Arguments to update or create a FilasCartas.
     * @example
     * // Update or create a FilasCartas
     * const filasCartas = await prisma.filasCartas.upsert({
     *   create: {
     *     // ... data to create a FilasCartas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FilasCartas we want to update
     *   }
     * })
    **/
    upsert<T extends filasCartasUpsertArgs>(
      args: SelectSubset<T, filasCartasUpsertArgs>
    ): CheckSelect<T, Prisma__filasCartasClient<filasCartas>, Prisma__filasCartasClient<filasCartasGetPayload<T>>>

    /**
     * Find zero or more FilasCartas that matches the filter.
     * @param {filasCartasFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const filasCartas = await prisma.filasCartas.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: filasCartasFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a FilasCartas.
     * @param {filasCartasAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const filasCartas = await prisma.filasCartas.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: filasCartasAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one FilasCartas that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {filasCartasFindUniqueOrThrowArgs} args - Arguments to find a FilasCartas
     * @example
     * // Get one FilasCartas
     * const filasCartas = await prisma.filasCartas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends filasCartasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, filasCartasFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__filasCartasClient<filasCartas>, Prisma__filasCartasClient<filasCartasGetPayload<T>>>

    /**
     * Find the first FilasCartas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filasCartasFindFirstOrThrowArgs} args - Arguments to find a FilasCartas
     * @example
     * // Get one FilasCartas
     * const filasCartas = await prisma.filasCartas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends filasCartasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, filasCartasFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__filasCartasClient<filasCartas>, Prisma__filasCartasClient<filasCartasGetPayload<T>>>

    /**
     * Count the number of FilasCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filasCartasCountArgs} args - Arguments to filter FilasCartas to count.
     * @example
     * // Count the number of FilasCartas
     * const count = await prisma.filasCartas.count({
     *   where: {
     *     // ... the filter for the FilasCartas we want to count
     *   }
     * })
    **/
    count<T extends filasCartasCountArgs>(
      args?: Subset<T, filasCartasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilasCartasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FilasCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilasCartasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilasCartasAggregateArgs>(args: Subset<T, FilasCartasAggregateArgs>): PrismaPromise<GetFilasCartasAggregateType<T>>

    /**
     * Group by FilasCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilasCartasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilasCartasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilasCartasGroupByArgs['orderBy'] }
        : { orderBy?: FilasCartasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilasCartasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilasCartasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for filasCartas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__filasCartasClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * filasCartas base type for findUnique actions
   */
  export type filasCartasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the filasCartas
     * 
    **/
    select?: filasCartasSelect | null
    /**
     * Filter, which filasCartas to fetch.
     * 
    **/
    where: filasCartasWhereUniqueInput
  }

  /**
   * filasCartas: findUnique
   */
  export interface filasCartasFindUniqueArgs extends filasCartasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * filasCartas base type for findFirst actions
   */
  export type filasCartasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the filasCartas
     * 
    **/
    select?: filasCartasSelect | null
    /**
     * Filter, which filasCartas to fetch.
     * 
    **/
    where?: filasCartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of filasCartas to fetch.
     * 
    **/
    orderBy?: Enumerable<filasCartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for filasCartas.
     * 
    **/
    cursor?: filasCartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` filasCartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` filasCartas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of filasCartas.
     * 
    **/
    distinct?: Enumerable<FilasCartasScalarFieldEnum>
  }

  /**
   * filasCartas: findFirst
   */
  export interface filasCartasFindFirstArgs extends filasCartasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * filasCartas findMany
   */
  export type filasCartasFindManyArgs = {
    /**
     * Select specific fields to fetch from the filasCartas
     * 
    **/
    select?: filasCartasSelect | null
    /**
     * Filter, which filasCartas to fetch.
     * 
    **/
    where?: filasCartasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of filasCartas to fetch.
     * 
    **/
    orderBy?: Enumerable<filasCartasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing filasCartas.
     * 
    **/
    cursor?: filasCartasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` filasCartas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` filasCartas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FilasCartasScalarFieldEnum>
  }


  /**
   * filasCartas create
   */
  export type filasCartasCreateArgs = {
    /**
     * Select specific fields to fetch from the filasCartas
     * 
    **/
    select?: filasCartasSelect | null
    /**
     * The data needed to create a filasCartas.
     * 
    **/
    data: XOR<filasCartasCreateInput, filasCartasUncheckedCreateInput>
  }


  /**
   * filasCartas createMany
   */
  export type filasCartasCreateManyArgs = {
    /**
     * The data used to create many filasCartas.
     * 
    **/
    data: Enumerable<filasCartasCreateManyInput>
  }


  /**
   * filasCartas update
   */
  export type filasCartasUpdateArgs = {
    /**
     * Select specific fields to fetch from the filasCartas
     * 
    **/
    select?: filasCartasSelect | null
    /**
     * The data needed to update a filasCartas.
     * 
    **/
    data: XOR<filasCartasUpdateInput, filasCartasUncheckedUpdateInput>
    /**
     * Choose, which filasCartas to update.
     * 
    **/
    where: filasCartasWhereUniqueInput
  }


  /**
   * filasCartas updateMany
   */
  export type filasCartasUpdateManyArgs = {
    /**
     * The data used to update filasCartas.
     * 
    **/
    data: XOR<filasCartasUpdateManyMutationInput, filasCartasUncheckedUpdateManyInput>
    /**
     * Filter which filasCartas to update
     * 
    **/
    where?: filasCartasWhereInput
  }


  /**
   * filasCartas upsert
   */
  export type filasCartasUpsertArgs = {
    /**
     * Select specific fields to fetch from the filasCartas
     * 
    **/
    select?: filasCartasSelect | null
    /**
     * The filter to search for the filasCartas to update in case it exists.
     * 
    **/
    where: filasCartasWhereUniqueInput
    /**
     * In case the filasCartas found by the `where` argument doesn't exist, create a new filasCartas with this data.
     * 
    **/
    create: XOR<filasCartasCreateInput, filasCartasUncheckedCreateInput>
    /**
     * In case the filasCartas was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<filasCartasUpdateInput, filasCartasUncheckedUpdateInput>
  }


  /**
   * filasCartas delete
   */
  export type filasCartasDeleteArgs = {
    /**
     * Select specific fields to fetch from the filasCartas
     * 
    **/
    select?: filasCartasSelect | null
    /**
     * Filter which filasCartas to delete.
     * 
    **/
    where: filasCartasWhereUniqueInput
  }


  /**
   * filasCartas deleteMany
   */
  export type filasCartasDeleteManyArgs = {
    /**
     * Filter which filasCartas to delete
     * 
    **/
    where?: filasCartasWhereInput
  }


  /**
   * filasCartas findRaw
   */
  export type filasCartasFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * filasCartas aggregateRaw
   */
  export type filasCartasAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * filasCartas: findUniqueOrThrow
   */
  export type filasCartasFindUniqueOrThrowArgs = filasCartasFindUniqueArgsBase
      

  /**
   * filasCartas: findFirstOrThrow
   */
  export type filasCartasFindFirstOrThrowArgs = filasCartasFindFirstArgsBase
      

  /**
   * filasCartas without action
   */
  export type filasCartasArgs = {
    /**
     * Select specific fields to fetch from the filasCartas
     * 
    **/
    select?: filasCartasSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CamposBaseScalarFieldEnum: {
    id: 'id',
    DESCRIPCION_CAMPO: 'DESCRIPCION_CAMPO',
    TIPO_CAMPO: 'TIPO_CAMPO'
  };

  export type CamposBaseScalarFieldEnum = (typeof CamposBaseScalarFieldEnum)[keyof typeof CamposBaseScalarFieldEnum]


  export const CamposCartasScalarFieldEnum: {
    id: 'id',
    DESCRIPCION_CAMPO: 'DESCRIPCION_CAMPO',
    TIPO_CAMPO: 'TIPO_CAMPO'
  };

  export type CamposCartasScalarFieldEnum = (typeof CamposCartasScalarFieldEnum)[keyof typeof CamposCartasScalarFieldEnum]


  export const CartasScalarFieldEnum: {
    id: 'id',
    ANIO_PROGRAMA: 'ANIO_PROGRAMA',
    IDs_FILAS_CARTAS: 'IDs_FILAS_CARTAS',
    MATERIA: 'MATERIA',
    NOMBRE_CARRERA: 'NOMBRE_CARRERA',
    NOMBRE_CARTA: 'NOMBRE_CARTA',
    PROFESOR: 'PROFESOR',
    SEMESTRE: 'SEMESTRE'
  };

  export type CartasScalarFieldEnum = (typeof CartasScalarFieldEnum)[keyof typeof CartasScalarFieldEnum]


  export const FilasCartasScalarFieldEnum: {
    id: 'id',
    ACREDITADORA: 'ACREDITADORA',
    HIDE_FLAG: 'HIDE_FLAG',
    filaJSON: 'filaJSON',
    campoBase: 'campoBase'
  };

  export type FilasCartasScalarFieldEnum = (typeof FilasCartasScalarFieldEnum)[keyof typeof FilasCartasScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type CartasWhereInput = {
    AND?: Enumerable<CartasWhereInput>
    OR?: Enumerable<CartasWhereInput>
    NOT?: Enumerable<CartasWhereInput>
    id?: StringFilter | string
    ANIO_PROGRAMA?: IntFilter | number
    IDs_FILAS_CARTAS?: StringNullableListFilter
    MATERIA?: StringFilter | string
    NOMBRE_CARRERA?: StringFilter | string
    NOMBRE_CARTA?: StringFilter | string
    PROFESOR?: StringFilter | string
    SEMESTRE?: IntFilter | number
  }

  export type CartasOrderByWithRelationInput = {
    id?: SortOrder
    ANIO_PROGRAMA?: SortOrder
    IDs_FILAS_CARTAS?: SortOrder
    MATERIA?: SortOrder
    NOMBRE_CARRERA?: SortOrder
    NOMBRE_CARTA?: SortOrder
    PROFESOR?: SortOrder
    SEMESTRE?: SortOrder
  }

  export type CartasWhereUniqueInput = {
    id?: string
  }

  export type CartasOrderByWithAggregationInput = {
    id?: SortOrder
    ANIO_PROGRAMA?: SortOrder
    IDs_FILAS_CARTAS?: SortOrder
    MATERIA?: SortOrder
    NOMBRE_CARRERA?: SortOrder
    NOMBRE_CARTA?: SortOrder
    PROFESOR?: SortOrder
    SEMESTRE?: SortOrder
    _count?: CartasCountOrderByAggregateInput
    _avg?: CartasAvgOrderByAggregateInput
    _max?: CartasMaxOrderByAggregateInput
    _min?: CartasMinOrderByAggregateInput
    _sum?: CartasSumOrderByAggregateInput
  }

  export type CartasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CartasScalarWhereWithAggregatesInput>
    OR?: Enumerable<CartasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CartasScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    ANIO_PROGRAMA?: IntWithAggregatesFilter | number
    IDs_FILAS_CARTAS?: StringNullableListFilter
    MATERIA?: StringWithAggregatesFilter | string
    NOMBRE_CARRERA?: StringWithAggregatesFilter | string
    NOMBRE_CARTA?: StringWithAggregatesFilter | string
    PROFESOR?: StringWithAggregatesFilter | string
    SEMESTRE?: IntWithAggregatesFilter | number
  }

  export type camposBaseWhereInput = {
    AND?: Enumerable<camposBaseWhereInput>
    OR?: Enumerable<camposBaseWhereInput>
    NOT?: Enumerable<camposBaseWhereInput>
    id?: StringFilter | string
    NOMBRE_CAMPO?: XOR<NombresCampoCompositeFilter, NombresCampoObjectEqualityInput>
    DESCRIPCION_CAMPO?: StringFilter | string
    TIPO_CAMPO?: StringFilter | string
  }

  export type camposBaseOrderByWithRelationInput = {
    id?: SortOrder
    NOMBRE_CAMPO?: NombresCampoOrderByInput
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
  }

  export type camposBaseWhereUniqueInput = {
    id?: string
  }

  export type camposBaseOrderByWithAggregationInput = {
    id?: SortOrder
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
    _count?: camposBaseCountOrderByAggregateInput
    _max?: camposBaseMaxOrderByAggregateInput
    _min?: camposBaseMinOrderByAggregateInput
  }

  export type camposBaseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<camposBaseScalarWhereWithAggregatesInput>
    OR?: Enumerable<camposBaseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<camposBaseScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    DESCRIPCION_CAMPO?: StringWithAggregatesFilter | string
    TIPO_CAMPO?: StringWithAggregatesFilter | string
  }

  export type camposCartasWhereInput = {
    AND?: Enumerable<camposCartasWhereInput>
    OR?: Enumerable<camposCartasWhereInput>
    NOT?: Enumerable<camposCartasWhereInput>
    id?: StringFilter | string
    NOMBRE_CAMPO?: XOR<NombresCampoCompositeFilter, NombresCampoObjectEqualityInput>
    DESCRIPCION_CAMPO?: StringFilter | string
    TIPO_CAMPO?: StringFilter | string
    CONTENIDO_CAMPO?: XOR<ContenidosCampoCompositeFilter, ContenidosCampoObjectEqualityInput>
  }

  export type camposCartasOrderByWithRelationInput = {
    id?: SortOrder
    NOMBRE_CAMPO?: NombresCampoOrderByInput
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
    CONTENIDO_CAMPO?: ContenidosCampoOrderByInput
  }

  export type camposCartasWhereUniqueInput = {
    id?: string
  }

  export type camposCartasOrderByWithAggregationInput = {
    id?: SortOrder
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
    _count?: camposCartasCountOrderByAggregateInput
    _max?: camposCartasMaxOrderByAggregateInput
    _min?: camposCartasMinOrderByAggregateInput
  }

  export type camposCartasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<camposCartasScalarWhereWithAggregatesInput>
    OR?: Enumerable<camposCartasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<camposCartasScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    DESCRIPCION_CAMPO?: StringWithAggregatesFilter | string
    TIPO_CAMPO?: StringWithAggregatesFilter | string
  }

  export type filasCartasWhereInput = {
    AND?: Enumerable<filasCartasWhereInput>
    OR?: Enumerable<filasCartasWhereInput>
    NOT?: Enumerable<filasCartasWhereInput>
    id?: StringFilter | string
    ACREDITADORA?: StringFilter | string
    HIDE_FLAG?: BoolFilter | boolean
    filaJSON?: StringFilter | string
    campoBase?: StringFilter | string
  }

  export type filasCartasOrderByWithRelationInput = {
    id?: SortOrder
    ACREDITADORA?: SortOrder
    HIDE_FLAG?: SortOrder
    filaJSON?: SortOrder
    campoBase?: SortOrder
  }

  export type filasCartasWhereUniqueInput = {
    id?: string
  }

  export type filasCartasOrderByWithAggregationInput = {
    id?: SortOrder
    ACREDITADORA?: SortOrder
    HIDE_FLAG?: SortOrder
    filaJSON?: SortOrder
    campoBase?: SortOrder
    _count?: filasCartasCountOrderByAggregateInput
    _max?: filasCartasMaxOrderByAggregateInput
    _min?: filasCartasMinOrderByAggregateInput
  }

  export type filasCartasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<filasCartasScalarWhereWithAggregatesInput>
    OR?: Enumerable<filasCartasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<filasCartasScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    ACREDITADORA?: StringWithAggregatesFilter | string
    HIDE_FLAG?: BoolWithAggregatesFilter | boolean
    filaJSON?: StringWithAggregatesFilter | string
    campoBase?: StringWithAggregatesFilter | string
  }

  export type CartasCreateInput = {
    id?: string
    ANIO_PROGRAMA: number
    IDs_FILAS_CARTAS?: CartasCreateIDs_FILAS_CARTASInput | Enumerable<string>
    MATERIA: string
    NOMBRE_CARRERA: string
    NOMBRE_CARTA: string
    PROFESOR: string
    SEMESTRE: number
  }

  export type CartasUncheckedCreateInput = {
    id?: string
    ANIO_PROGRAMA: number
    IDs_FILAS_CARTAS?: CartasCreateIDs_FILAS_CARTASInput | Enumerable<string>
    MATERIA: string
    NOMBRE_CARRERA: string
    NOMBRE_CARTA: string
    PROFESOR: string
    SEMESTRE: number
  }

  export type CartasUpdateInput = {
    ANIO_PROGRAMA?: IntFieldUpdateOperationsInput | number
    IDs_FILAS_CARTAS?: CartasUpdateIDs_FILAS_CARTASInput | Enumerable<string>
    MATERIA?: StringFieldUpdateOperationsInput | string
    NOMBRE_CARRERA?: StringFieldUpdateOperationsInput | string
    NOMBRE_CARTA?: StringFieldUpdateOperationsInput | string
    PROFESOR?: StringFieldUpdateOperationsInput | string
    SEMESTRE?: IntFieldUpdateOperationsInput | number
  }

  export type CartasUncheckedUpdateInput = {
    ANIO_PROGRAMA?: IntFieldUpdateOperationsInput | number
    IDs_FILAS_CARTAS?: CartasUpdateIDs_FILAS_CARTASInput | Enumerable<string>
    MATERIA?: StringFieldUpdateOperationsInput | string
    NOMBRE_CARRERA?: StringFieldUpdateOperationsInput | string
    NOMBRE_CARTA?: StringFieldUpdateOperationsInput | string
    PROFESOR?: StringFieldUpdateOperationsInput | string
    SEMESTRE?: IntFieldUpdateOperationsInput | number
  }

  export type CartasCreateManyInput = {
    id?: string
    ANIO_PROGRAMA: number
    IDs_FILAS_CARTAS?: CartasCreateIDs_FILAS_CARTASInput | Enumerable<string>
    MATERIA: string
    NOMBRE_CARRERA: string
    NOMBRE_CARTA: string
    PROFESOR: string
    SEMESTRE: number
  }

  export type CartasUpdateManyMutationInput = {
    ANIO_PROGRAMA?: IntFieldUpdateOperationsInput | number
    IDs_FILAS_CARTAS?: CartasUpdateIDs_FILAS_CARTASInput | Enumerable<string>
    MATERIA?: StringFieldUpdateOperationsInput | string
    NOMBRE_CARRERA?: StringFieldUpdateOperationsInput | string
    NOMBRE_CARTA?: StringFieldUpdateOperationsInput | string
    PROFESOR?: StringFieldUpdateOperationsInput | string
    SEMESTRE?: IntFieldUpdateOperationsInput | number
  }

  export type CartasUncheckedUpdateManyInput = {
    ANIO_PROGRAMA?: IntFieldUpdateOperationsInput | number
    IDs_FILAS_CARTAS?: CartasUpdateIDs_FILAS_CARTASInput | Enumerable<string>
    MATERIA?: StringFieldUpdateOperationsInput | string
    NOMBRE_CARRERA?: StringFieldUpdateOperationsInput | string
    NOMBRE_CARTA?: StringFieldUpdateOperationsInput | string
    PROFESOR?: StringFieldUpdateOperationsInput | string
    SEMESTRE?: IntFieldUpdateOperationsInput | number
  }

  export type camposBaseCreateInput = {
    id?: string
    NOMBRE_CAMPO: XOR<NombresCampoCreateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO: string
    TIPO_CAMPO: string
  }

  export type camposBaseUncheckedCreateInput = {
    id?: string
    NOMBRE_CAMPO: XOR<NombresCampoCreateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO: string
    TIPO_CAMPO: string
  }

  export type camposBaseUpdateInput = {
    NOMBRE_CAMPO?: XOR<NombresCampoUpdateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO?: StringFieldUpdateOperationsInput | string
    TIPO_CAMPO?: StringFieldUpdateOperationsInput | string
  }

  export type camposBaseUncheckedUpdateInput = {
    NOMBRE_CAMPO?: XOR<NombresCampoUpdateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO?: StringFieldUpdateOperationsInput | string
    TIPO_CAMPO?: StringFieldUpdateOperationsInput | string
  }

  export type camposBaseCreateManyInput = {
    id?: string
    NOMBRE_CAMPO: XOR<NombresCampoCreateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO: string
    TIPO_CAMPO: string
  }

  export type camposBaseUpdateManyMutationInput = {
    NOMBRE_CAMPO?: XOR<NombresCampoUpdateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO?: StringFieldUpdateOperationsInput | string
    TIPO_CAMPO?: StringFieldUpdateOperationsInput | string
  }

  export type camposBaseUncheckedUpdateManyInput = {
    NOMBRE_CAMPO?: XOR<NombresCampoUpdateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO?: StringFieldUpdateOperationsInput | string
    TIPO_CAMPO?: StringFieldUpdateOperationsInput | string
  }

  export type camposCartasCreateInput = {
    id?: string
    NOMBRE_CAMPO: XOR<NombresCampoCreateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO: string
    TIPO_CAMPO: string
    CONTENIDO_CAMPO: XOR<ContenidosCampoCreateEnvelopeInput, ContenidosCampoCreateInput>
  }

  export type camposCartasUncheckedCreateInput = {
    id?: string
    NOMBRE_CAMPO: XOR<NombresCampoCreateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO: string
    TIPO_CAMPO: string
    CONTENIDO_CAMPO: XOR<ContenidosCampoCreateEnvelopeInput, ContenidosCampoCreateInput>
  }

  export type camposCartasUpdateInput = {
    NOMBRE_CAMPO?: XOR<NombresCampoUpdateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO?: StringFieldUpdateOperationsInput | string
    TIPO_CAMPO?: StringFieldUpdateOperationsInput | string
    CONTENIDO_CAMPO?: XOR<ContenidosCampoUpdateEnvelopeInput, ContenidosCampoCreateInput>
  }

  export type camposCartasUncheckedUpdateInput = {
    NOMBRE_CAMPO?: XOR<NombresCampoUpdateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO?: StringFieldUpdateOperationsInput | string
    TIPO_CAMPO?: StringFieldUpdateOperationsInput | string
    CONTENIDO_CAMPO?: XOR<ContenidosCampoUpdateEnvelopeInput, ContenidosCampoCreateInput>
  }

  export type camposCartasCreateManyInput = {
    id?: string
    NOMBRE_CAMPO: XOR<NombresCampoCreateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO: string
    TIPO_CAMPO: string
    CONTENIDO_CAMPO: XOR<ContenidosCampoCreateEnvelopeInput, ContenidosCampoCreateInput>
  }

  export type camposCartasUpdateManyMutationInput = {
    NOMBRE_CAMPO?: XOR<NombresCampoUpdateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO?: StringFieldUpdateOperationsInput | string
    TIPO_CAMPO?: StringFieldUpdateOperationsInput | string
    CONTENIDO_CAMPO?: XOR<ContenidosCampoUpdateEnvelopeInput, ContenidosCampoCreateInput>
  }

  export type camposCartasUncheckedUpdateManyInput = {
    NOMBRE_CAMPO?: XOR<NombresCampoUpdateEnvelopeInput, NombresCampoCreateInput>
    DESCRIPCION_CAMPO?: StringFieldUpdateOperationsInput | string
    TIPO_CAMPO?: StringFieldUpdateOperationsInput | string
    CONTENIDO_CAMPO?: XOR<ContenidosCampoUpdateEnvelopeInput, ContenidosCampoCreateInput>
  }

  export type filasCartasCreateInput = {
    id?: string
    ACREDITADORA: string
    HIDE_FLAG: boolean
    filaJSON: string
    campoBase: string
  }

  export type filasCartasUncheckedCreateInput = {
    id?: string
    ACREDITADORA: string
    HIDE_FLAG: boolean
    filaJSON: string
    campoBase: string
  }

  export type filasCartasUpdateInput = {
    ACREDITADORA?: StringFieldUpdateOperationsInput | string
    HIDE_FLAG?: BoolFieldUpdateOperationsInput | boolean
    filaJSON?: StringFieldUpdateOperationsInput | string
    campoBase?: StringFieldUpdateOperationsInput | string
  }

  export type filasCartasUncheckedUpdateInput = {
    ACREDITADORA?: StringFieldUpdateOperationsInput | string
    HIDE_FLAG?: BoolFieldUpdateOperationsInput | boolean
    filaJSON?: StringFieldUpdateOperationsInput | string
    campoBase?: StringFieldUpdateOperationsInput | string
  }

  export type filasCartasCreateManyInput = {
    id?: string
    ACREDITADORA: string
    HIDE_FLAG: boolean
    filaJSON: string
    campoBase: string
  }

  export type filasCartasUpdateManyMutationInput = {
    ACREDITADORA?: StringFieldUpdateOperationsInput | string
    HIDE_FLAG?: BoolFieldUpdateOperationsInput | boolean
    filaJSON?: StringFieldUpdateOperationsInput | string
    campoBase?: StringFieldUpdateOperationsInput | string
  }

  export type filasCartasUncheckedUpdateManyInput = {
    ACREDITADORA?: StringFieldUpdateOperationsInput | string
    HIDE_FLAG?: BoolFieldUpdateOperationsInput | boolean
    filaJSON?: StringFieldUpdateOperationsInput | string
    campoBase?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type CartasCountOrderByAggregateInput = {
    id?: SortOrder
    ANIO_PROGRAMA?: SortOrder
    IDs_FILAS_CARTAS?: SortOrder
    MATERIA?: SortOrder
    NOMBRE_CARRERA?: SortOrder
    NOMBRE_CARTA?: SortOrder
    PROFESOR?: SortOrder
    SEMESTRE?: SortOrder
  }

  export type CartasAvgOrderByAggregateInput = {
    ANIO_PROGRAMA?: SortOrder
    SEMESTRE?: SortOrder
  }

  export type CartasMaxOrderByAggregateInput = {
    id?: SortOrder
    ANIO_PROGRAMA?: SortOrder
    MATERIA?: SortOrder
    NOMBRE_CARRERA?: SortOrder
    NOMBRE_CARTA?: SortOrder
    PROFESOR?: SortOrder
    SEMESTRE?: SortOrder
  }

  export type CartasMinOrderByAggregateInput = {
    id?: SortOrder
    ANIO_PROGRAMA?: SortOrder
    MATERIA?: SortOrder
    NOMBRE_CARRERA?: SortOrder
    NOMBRE_CARTA?: SortOrder
    PROFESOR?: SortOrder
    SEMESTRE?: SortOrder
  }

  export type CartasSumOrderByAggregateInput = {
    ANIO_PROGRAMA?: SortOrder
    SEMESTRE?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NombresCampoCompositeFilter = {
    equals?: NombresCampoObjectEqualityInput
    is?: NombresCampoWhereInput
    isNot?: NombresCampoWhereInput
  }

  export type NombresCampoObjectEqualityInput = {
    CETYS: string
    CACEI: string
    WASC: string
    ABET: string
  }

  export type NombresCampoOrderByInput = {
    CETYS?: SortOrder
    CACEI?: SortOrder
    WASC?: SortOrder
    ABET?: SortOrder
  }

  export type camposBaseCountOrderByAggregateInput = {
    id?: SortOrder
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
  }

  export type camposBaseMaxOrderByAggregateInput = {
    id?: SortOrder
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
  }

  export type camposBaseMinOrderByAggregateInput = {
    id?: SortOrder
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
  }

  export type ContenidosCampoCompositeFilter = {
    equals?: ContenidosCampoObjectEqualityInput
    is?: ContenidosCampoWhereInput
    isNot?: ContenidosCampoWhereInput
  }

  export type ContenidosCampoObjectEqualityInput = {
    CETYS: string
    CACEI: string
    WASC: string
    ABET: string
  }

  export type ContenidosCampoOrderByInput = {
    CETYS?: SortOrder
    CACEI?: SortOrder
    WASC?: SortOrder
    ABET?: SortOrder
  }

  export type camposCartasCountOrderByAggregateInput = {
    id?: SortOrder
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
  }

  export type camposCartasMaxOrderByAggregateInput = {
    id?: SortOrder
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
  }

  export type camposCartasMinOrderByAggregateInput = {
    id?: SortOrder
    DESCRIPCION_CAMPO?: SortOrder
    TIPO_CAMPO?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type filasCartasCountOrderByAggregateInput = {
    id?: SortOrder
    ACREDITADORA?: SortOrder
    HIDE_FLAG?: SortOrder
    filaJSON?: SortOrder
    campoBase?: SortOrder
  }

  export type filasCartasMaxOrderByAggregateInput = {
    id?: SortOrder
    ACREDITADORA?: SortOrder
    HIDE_FLAG?: SortOrder
    filaJSON?: SortOrder
    campoBase?: SortOrder
  }

  export type filasCartasMinOrderByAggregateInput = {
    id?: SortOrder
    ACREDITADORA?: SortOrder
    HIDE_FLAG?: SortOrder
    filaJSON?: SortOrder
    campoBase?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type CartasCreateIDs_FILAS_CARTASInput = {
    set: Enumerable<string>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CartasUpdateIDs_FILAS_CARTASInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NombresCampoCreateEnvelopeInput = {
    set?: NombresCampoCreateInput
  }

  export type NombresCampoCreateInput = {
    CETYS: string
    CACEI: string
    WASC: string
    ABET: string
  }

  export type NombresCampoUpdateEnvelopeInput = {
    set?: NombresCampoCreateInput
    update?: NombresCampoUpdateInput
  }

  export type ContenidosCampoCreateEnvelopeInput = {
    set?: ContenidosCampoCreateInput
  }

  export type ContenidosCampoCreateInput = {
    CETYS: string
    CACEI: string
    WASC: string
    ABET: string
  }

  export type ContenidosCampoUpdateEnvelopeInput = {
    set?: ContenidosCampoCreateInput
    update?: ContenidosCampoUpdateInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NombresCampoWhereInput = {
    AND?: Enumerable<NombresCampoWhereInput>
    OR?: Enumerable<NombresCampoWhereInput>
    NOT?: Enumerable<NombresCampoWhereInput>
    CETYS?: StringFilter | string
    CACEI?: StringFilter | string
    WASC?: StringFilter | string
    ABET?: StringFilter | string
  }

  export type ContenidosCampoWhereInput = {
    AND?: Enumerable<ContenidosCampoWhereInput>
    OR?: Enumerable<ContenidosCampoWhereInput>
    NOT?: Enumerable<ContenidosCampoWhereInput>
    CETYS?: StringFilter | string
    CACEI?: StringFilter | string
    WASC?: StringFilter | string
    ABET?: StringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NombresCampoUpdateInput = {
    CETYS?: StringFieldUpdateOperationsInput | string
    CACEI?: StringFieldUpdateOperationsInput | string
    WASC?: StringFieldUpdateOperationsInput | string
    ABET?: StringFieldUpdateOperationsInput | string
  }

  export type ContenidosCampoUpdateInput = {
    CETYS?: StringFieldUpdateOperationsInput | string
    CACEI?: StringFieldUpdateOperationsInput | string
    WASC?: StringFieldUpdateOperationsInput | string
    ABET?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}