import type { Draft } from 'immer';
import { useAtom } from 'jotai';
import type { WritableAtom } from 'jotai';
declare type Scope = NonNullable<Parameters<typeof useAtom>[1]>;
export declare function useImmerAtom<Value, Result extends void | Promise<void>>(anAtom: WritableAtom<Value, (draft: Draft<Value>) => void, Result>, scope?: Scope): [Value, (fn: (draft: Draft<Value>) => void) => Result];
export declare function useImmerAtom<Value, Result extends void | Promise<void>>(anAtom: WritableAtom<Value, (value: Value) => Value, Result>, scope?: Scope): [Value, (fn: (draft: Draft<Value>) => void) => Result];
export {};
