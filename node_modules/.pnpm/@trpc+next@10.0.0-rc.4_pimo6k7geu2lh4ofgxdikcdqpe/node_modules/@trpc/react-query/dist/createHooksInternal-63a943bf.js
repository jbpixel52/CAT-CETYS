'use strict';

var shared = require('@trpc/server/shared');
var client = require('@trpc/client');
var reactQuery = require('@tanstack/react-query');
var React = require('react');
var getArrayQueryKey = require('./getArrayQueryKey-5ab807a3.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * We treat `undefined` as an input the same as omitting an `input`
 * https://github.com/trpc/trpc/issues/2290
 */ function getQueryKey(path, input) {
    return input === undefined ? [
        path
    ] : [
        path,
        input
    ];
}

/**
 * Create proxy for decorating procedures
 * @internal
 */ function createReactProxyDecoration(name, hooks) {
    return shared.createRecursiveProxy((opts)=>{
        const args = opts.args;
        const pathCopy = [
            name,
            ...opts.path
        ];
        // The last arg is for instance `.useMutation` or `.useQuery()`
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const lastArg = pathCopy.pop();
        // The `path` ends up being something like `post.byId`
        const path = pathCopy.join('.');
        if (lastArg === 'useMutation') {
            return hooks[lastArg](path, ...args);
        }
        const [input, ...rest] = args;
        const queryKey = getQueryKey(path, input);
        return hooks[lastArg](queryKey, ...rest);
    });
}

const contextProps = [
    'client',
    'ssrContext',
    'ssrState',
    'abortOnUnmount'
];
const TRPCContext = /*#__PURE__*/ React.createContext(null);

/**
 * @internal
 */ function createReactQueryUtilsProxy(context) {
    return shared.createFlatProxy((key)=>{
        const contextName = key;
        if (contextName === 'client') {
            return client.createTRPCClientProxy(context.client);
        }
        if (contextProps.includes(contextName)) {
            return context[contextName];
        }
        return shared.createRecursiveProxy(({ path , args  })=>{
            const pathCopy = [
                key,
                ...path
            ];
            const utilName = pathCopy.pop();
            const fullPath = pathCopy.join('.');
            const getOpts = (name)=>{
                if ([
                    'setData',
                    'setInfiniteData'
                ].includes(name)) {
                    const [updater, input, ...rest] = args;
                    const queryKey = getQueryKey(fullPath, input);
                    return {
                        queryKey,
                        updater,
                        rest
                    };
                }
                const [input1, ...rest1] = args;
                const queryKey1 = getQueryKey(fullPath, input1);
                return {
                    queryKey: queryKey1,
                    rest: rest1
                };
            };
            const { queryKey , rest , updater  } = getOpts(utilName);
            const contextMap = {
                fetch: ()=>context.fetchQuery(queryKey, ...rest),
                fetchInfinite: ()=>context.fetchInfiniteQuery(queryKey, ...rest),
                prefetch: ()=>context.prefetchQuery(queryKey, ...rest),
                prefetchInfinite: ()=>context.prefetchInfiniteQuery(queryKey, ...rest),
                invalidate: ()=>context.invalidateQueries(queryKey, ...rest),
                refetch: ()=>context.refetchQueries(queryKey, ...rest),
                cancel: ()=>context.cancelQuery(queryKey, ...rest),
                setData: ()=>context.setQueryData(queryKey, updater, ...rest),
                setInfiniteData: ()=>context.setInfiniteQueryData(queryKey, updater, ...rest),
                getData: ()=>context.getQueryData(queryKey),
                getInfiniteData: ()=>context.getInfiniteQueryData(queryKey)
            };
            return contextMap[utilName]();
        });
    });
}

function getClientArgs(pathAndInput, opts) {
    const [path, input] = pathAndInput;
    return [
        path,
        input,
        opts?.trpc
    ];
}
/**
 * Makes a stable reference of the `trpc` prop
 */ function useHookResult(value) {
    const ref = React.useRef(value);
    ref.current.path = value.path;
    return ref.current;
}
/**
 * Create strongly typed react hooks
 * @internal
 */ function createHooksInternal(config) {
    const mutationSuccessOverride = config?.unstable_overrides?.useMutation?.onSuccess ?? ((options)=>options.originalFn());
    const Context = config?.context ?? TRPCContext;
    const ReactQueryContext = config?.reactQueryContext;
    const createClient = (opts)=>{
        return client.createTRPCClient(opts);
    };
    const TRPCProvider = (props)=>{
        const { abortOnUnmount =false , client , queryClient , ssrContext  } = props;
        const [ssrState, setSSRState] = React.useState(props.ssrState ?? false);
        React.useEffect(()=>{
            // Only updating state to `mounted` if we are using SSR.
            // This makes it so we don't have an unnecessary re-render when opting out of SSR.
            setSSRState((state)=>state ? 'mounted' : false);
        }, []);
        return /*#__PURE__*/ React__default["default"].createElement(Context.Provider, {
            value: {
                abortOnUnmount,
                queryClient,
                client,
                ssrContext: ssrContext || null,
                ssrState,
                fetchQuery: React.useCallback((pathAndInput, opts)=>{
                    return queryClient.fetchQuery(getArrayQueryKey.getArrayQueryKey(pathAndInput), ()=>client.query(...getClientArgs(pathAndInput, opts)), opts);
                }, [
                    client,
                    queryClient
                ]),
                fetchInfiniteQuery: React.useCallback((pathAndInput, opts)=>{
                    return queryClient.fetchInfiniteQuery(getArrayQueryKey.getArrayQueryKey(pathAndInput), ({ pageParam  })=>{
                        const [path, input] = pathAndInput;
                        const actualInput = {
                            ...input,
                            cursor: pageParam
                        };
                        return client.query(...getClientArgs([
                            path,
                            actualInput
                        ], opts));
                    }, opts);
                }, [
                    client,
                    queryClient
                ]),
                prefetchQuery: React.useCallback((pathAndInput, opts)=>{
                    return queryClient.prefetchQuery(getArrayQueryKey.getArrayQueryKey(pathAndInput), ()=>client.query(...getClientArgs(pathAndInput, opts)), opts);
                }, [
                    client,
                    queryClient
                ]),
                prefetchInfiniteQuery: React.useCallback((pathAndInput, opts)=>{
                    return queryClient.prefetchInfiniteQuery(getArrayQueryKey.getArrayQueryKey(pathAndInput), ({ pageParam  })=>{
                        const [path, input] = pathAndInput;
                        const actualInput = {
                            ...input,
                            cursor: pageParam
                        };
                        return client.query(...getClientArgs([
                            path,
                            actualInput
                        ], opts));
                    }, opts);
                }, [
                    client,
                    queryClient
                ]),
                invalidateQueries: React.useCallback((...args)=>{
                    const [queryKey, ...rest] = args;
                    return queryClient.invalidateQueries(getArrayQueryKey.getArrayQueryKey(queryKey), ...rest);
                }, [
                    queryClient
                ]),
                refetchQueries: React.useCallback((...args)=>{
                    const [queryKey, ...rest] = args;
                    return queryClient.refetchQueries(getArrayQueryKey.getArrayQueryKey(queryKey), ...rest);
                }, [
                    queryClient
                ]),
                cancelQuery: React.useCallback((pathAndInput)=>{
                    return queryClient.cancelQueries(getArrayQueryKey.getArrayQueryKey(pathAndInput));
                }, [
                    queryClient
                ]),
                setQueryData: React.useCallback((...args)=>{
                    const [queryKey, ...rest] = args;
                    return queryClient.setQueryData(getArrayQueryKey.getArrayQueryKey(queryKey), ...rest);
                }, [
                    queryClient
                ]),
                getQueryData: React.useCallback((...args)=>{
                    const [queryKey, ...rest] = args;
                    return queryClient.getQueryData(getArrayQueryKey.getArrayQueryKey(queryKey), ...rest);
                }, [
                    queryClient
                ]),
                setInfiniteQueryData: React.useCallback((...args)=>{
                    const [queryKey, ...rest] = args;
                    return queryClient.setQueryData(getArrayQueryKey.getArrayQueryKey(queryKey), ...rest);
                }, [
                    queryClient
                ]),
                getInfiniteQueryData: React.useCallback((...args)=>{
                    const [queryKey, ...rest] = args;
                    return queryClient.getQueryData(getArrayQueryKey.getArrayQueryKey(queryKey), ...rest);
                }, [
                    queryClient
                ])
            }
        }, props.children);
    };
    function useContext() {
        return React__default["default"].useContext(Context);
    }
    /**
   * Hack to make sure errors return `status`='error` when doing SSR
   * @link https://github.com/trpc/trpc/pull/1645
   */ function useSSRQueryOptionsIfNeeded(pathAndInput, opts) {
        const { queryClient , ssrState  } = useContext();
        return ssrState && ssrState !== 'mounted' && queryClient.getQueryCache().find(getArrayQueryKey.getArrayQueryKey(pathAndInput))?.state.status === 'error' ? {
            retryOnMount: false,
            ...opts
        } : opts;
    }
    function useQuery(pathAndInput, opts) {
        const { abortOnUnmount , client , ssrState , queryClient , prefetchQuery  } = useContext();
        if (typeof window === 'undefined' && ssrState === 'prepass' && opts?.trpc?.ssr !== false && opts?.enabled !== false && !queryClient.getQueryCache().find(getArrayQueryKey.getArrayQueryKey(pathAndInput))) {
            void prefetchQuery(pathAndInput, opts);
        }
        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, opts);
        // request option should take priority over global
        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? abortOnUnmount;
        const hook = reactQuery.useQuery(getArrayQueryKey.getArrayQueryKey(pathAndInput), (queryFunctionContext)=>{
            const actualOpts = {
                ...ssrOpts,
                trpc: {
                    ...ssrOpts?.trpc,
                    ...shouldAbortOnUnmount ? {
                        signal: queryFunctionContext.signal
                    } : {}
                }
            };
            return client.query(...getClientArgs(pathAndInput, actualOpts));
        }, {
            context: ReactQueryContext,
            ...ssrOpts
        });
        hook.trpc = useHookResult({
            path: pathAndInput[0]
        });
        return hook;
    }
    function useMutation(path, opts) {
        const { client  } = useContext();
        const queryClient = reactQuery.useQueryClient({
            context: ReactQueryContext
        });
        const hook = reactQuery.useMutation((input)=>{
            const actualPath = Array.isArray(path) ? path[0] : path;
            return client.mutation(...getClientArgs([
                actualPath,
                input
            ], opts));
        }, {
            context: ReactQueryContext,
            ...opts,
            onSuccess (...args) {
                const originalFn = ()=>opts?.onSuccess?.(...args);
                return mutationSuccessOverride({
                    originalFn,
                    queryClient
                });
            }
        });
        hook.trpc = useHookResult({
            path: Array.isArray(path) ? path[0] : path
        });
        return hook;
    }
    /* istanbul ignore next */ /**
   * ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️
   *  **Experimental.** API might change without major version bump
   * ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠
   */ function useSubscription(pathAndInput, opts) {
        const enabled = opts?.enabled ?? true;
        const queryKey = reactQuery.hashQueryKey(pathAndInput);
        const { client  } = useContext();
        return React.useEffect(()=>{
            if (!enabled) {
                return;
            }
            const [path, input] = pathAndInput;
            let isStopped = false;
            const subscription = client.subscription(path, input ?? undefined, {
                onStarted: ()=>{
                    if (!isStopped) {
                        opts.onStarted?.();
                    }
                },
                onData: (data)=>{
                    if (!isStopped) {
                        opts.onData(data);
                    }
                },
                onError: (err)=>{
                    if (!isStopped) {
                        opts.onError?.(err);
                    }
                }
            });
            return ()=>{
                isStopped = true;
                subscription.unsubscribe();
            };
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            queryKey,
            enabled
        ]);
    }
    function useInfiniteQuery(pathAndInput, opts) {
        const [path, input] = pathAndInput;
        const { client , ssrState , prefetchInfiniteQuery , queryClient , abortOnUnmount ,  } = useContext();
        if (typeof window === 'undefined' && ssrState === 'prepass' && opts?.trpc?.ssr !== false && opts?.enabled !== false && !queryClient.getQueryCache().find(getArrayQueryKey.getArrayQueryKey(pathAndInput))) {
            void prefetchInfiniteQuery(pathAndInput, opts);
        }
        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, opts);
        // request option should take priority over global
        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? abortOnUnmount;
        const hook = reactQuery.useInfiniteQuery(getArrayQueryKey.getArrayQueryKey(pathAndInput), (queryFunctionContext)=>{
            const actualOpts = {
                ...ssrOpts,
                trpc: {
                    ...ssrOpts?.trpc,
                    ...shouldAbortOnUnmount ? {
                        signal: queryFunctionContext.signal
                    } : {}
                }
            };
            const actualInput = {
                ...input ?? {},
                cursor: queryFunctionContext.pageParam
            };
            return client.query(...getClientArgs([
                path,
                actualInput
            ], actualOpts));
        }, {
            context: ReactQueryContext,
            ...ssrOpts
        });
        hook.trpc = useHookResult({
            path
        });
        return hook;
    }
    const useDehydratedState = (client, trpcState)=>{
        const transformed = React.useMemo(()=>{
            if (!trpcState) {
                return trpcState;
            }
            return client.runtime.transformer.deserialize(trpcState);
        }, [
            trpcState,
            client
        ]);
        return transformed;
    };
    return {
        Provider: TRPCProvider,
        createClient,
        useContext,
        useQuery,
        useMutation,
        useSubscription,
        useDehydratedState,
        useInfiniteQuery
    };
}

exports.createHooksInternal = createHooksInternal;
exports.createReactProxyDecoration = createReactProxyDecoration;
exports.createReactQueryUtilsProxy = createReactQueryUtilsProxy;
