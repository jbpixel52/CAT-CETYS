{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2099 Kent C. Dodds\n * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n */\n\n// This is a fork of match-sorter. Instead of offering\n// a unified API for filtering and sorting in a single pass,\n// match-sorter-utils provides the lower-level utilities of\n// ranking items and comparing ranks in a way that can\n// be incrementally applied to a system rather than\n// all-at-once.\n\n// 1. Use the rankItem function to rank an item\n// 2. Use the resulting rankingInfo.passed to filter\n// 3. Use the resulting rankingInfo.rank to sort\n\n// For bundling purposes (mainly remove-accents not being esm safe/ready),\n// we've also hard-coded remove-accents into this source.\n// The remove-accents package is still included as a dependency\n// for attribution purposes, but it will not be imported and bundled.\n\nimport { removeAccents } from './remove-accents'\n\nexport type AccessorAttributes = {\n  threshold?: Ranking\n  maxRanking: Ranking\n  minRanking: Ranking\n}\n\nexport interface RankingInfo {\n  rankedValue: any\n  rank: Ranking\n  accessorIndex: number\n  accessorThreshold: Ranking | undefined\n  passed: boolean\n}\n\nexport interface AccessorOptions<TItem> {\n  accessor: AccessorFn<TItem>\n  threshold?: Ranking\n  maxRanking?: Ranking\n  minRanking?: Ranking\n}\n\nexport type AccessorFn<TItem> = (item: TItem) => string | Array<string>\n\nexport type Accessor<TItem> = AccessorFn<TItem> | AccessorOptions<TItem>\n\nexport interface RankItemOptions<TItem = unknown> {\n  accessors?: ReadonlyArray<Accessor<TItem>>\n  threshold?: Ranking\n  keepDiacritics?: boolean\n}\n\nexport const rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0,\n} as const\n\nexport type Ranking = typeof rankings[keyof typeof rankings]\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, accessorIndex: Number, accessorThreshold: Number}} - the highest ranking\n */\nexport function rankItem<TItem>(\n  item: TItem,\n  value: string,\n  options?: RankItemOptions<TItem>\n): RankingInfo {\n  options = options || {}\n\n  options.threshold = options.threshold ?? rankings.MATCHES\n\n  if (!options.accessors) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    const rank = getMatchRanking(item as unknown as string, value, options)\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: item,\n      rank,\n      accessorIndex: -1,\n      accessorThreshold: options.threshold,\n      passed: rank >= options.threshold,\n    }\n  }\n\n  const valuesToRank = getAllValuesToRank(item, options.accessors)\n\n  const rankingInfo: RankingInfo = {\n    rankedValue: item,\n    rank: rankings.NO_MATCH as Ranking,\n    accessorIndex: -1,\n    accessorThreshold: options.threshold,\n    passed: false,\n  }\n\n  for (let i = 0; i < valuesToRank.length; i++) {\n    const rankValue = valuesToRank[i]!\n\n    let newRank = getMatchRanking(rankValue.itemValue, value, options)\n\n    const { minRanking, maxRanking, threshold = options.threshold } = rankValue.attributes\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking\n    }\n\n    newRank = Math.min(newRank, maxRanking) as Ranking\n\n    if (newRank >= threshold && newRank > rankingInfo.rank) {\n      rankingInfo.rank = newRank\n      rankingInfo.passed = true\n      rankingInfo.accessorIndex = i\n      rankingInfo.accessorThreshold = threshold\n      rankingInfo.rankedValue = rankValue.itemValue\n    }\n  }\n\n  return rankingInfo\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking<TItem>(\n  testString: string,\n  stringToRank: string,\n  options: RankItemOptions<TItem>\n): Ranking {\n  testString = prepareValueForComparison(testString, options)\n  stringToRank = prepareValueForComparison(stringToRank, options)\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL\n  }\n\n  // Lower casing before further comparison\n  testString = testString.toLowerCase()\n  stringToRank = stringToRank.toLowerCase()\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL\n  }\n\n  // starts with\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH\n  }\n\n  // word starts with\n  if (testString.includes(` ${stringToRank}`)) {\n    return rankings.WORD_STARTS_WITH\n  }\n\n  // contains\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH\n  }\n\n  // acronym\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank)\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string: string): string {\n  let acronym = ''\n  const wordsInString = string.split(' ')\n  wordsInString.forEach(wordInString => {\n    const splitByHyphenWords = wordInString.split('-')\n    splitByHyphenWords.forEach(splitByHyphenWord => {\n      acronym += splitByHyphenWord.substr(0, 1)\n    })\n  })\n  return acronym\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(\n  testString: string,\n  stringToRank: string\n): Ranking {\n  let matchingInOrderCharCount = 0\n  let charNumber = 0\n  function findMatchingCharacter(\n    matchChar: undefined | string,\n    string: string,\n    index: number\n  ) {\n    for (let j = index, J = string.length; j < J; j++) {\n      const stringChar = string[j]\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1\n        return j + 1\n      }\n    }\n    return -1\n  }\n  function getRanking(spread: number) {\n    const spreadPercentage = 1 / spread\n    const inOrderPercentage = matchingInOrderCharCount / stringToRank.length\n    const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage\n    return ranking as Ranking\n  }\n  const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0)\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH\n  }\n  charNumber = firstIndex\n  for (let i = 1, I = stringToRank.length; i < I; i++) {\n    const matchChar = stringToRank[i]\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber)\n    const found = charNumber > -1\n    if (!found) {\n      return rankings.NO_MATCH\n    }\n  }\n\n  const spread = charNumber - firstIndex\n  return getRanking(spread)\n}\n\n/**\n * Sorts items that have a rank, index, and accessorIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\nexport function compareItems<TItem>(a: RankingInfo, b: RankingInfo): number {\n  return a.rank === b.rank ? 0 : a.rank > b.rank ? -1 : 1\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison<TItem>(\n  value: string,\n  { keepDiacritics }: RankItemOptions<TItem>\n): string {\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = `${value}` // toString\n  if (!keepDiacritics) {\n    value = removeAccents(value)\n  }\n  return value\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues<TItem>(\n  item: TItem,\n  accessor: Accessor<TItem>\n): Array<string> {\n  let accessorFn = accessor as AccessorFn<TItem>\n\n  if (typeof accessor === 'object') {\n    accessorFn = accessor.accessor\n  }\n\n  const value = accessorFn(item)\n\n  // because `value` can also be undefined\n  if (value == null) {\n    return []\n  }\n\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  return [String(value)]\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank<TItem>(\n  item: TItem,\n  accessors: ReadonlyArray<Accessor<TItem>>\n) {\n  const allValues: Array<{\n    itemValue: string\n    attributes: AccessorAttributes\n  }> = []\n  for (let j = 0, J = accessors.length; j < J; j++) {\n    const accessor = accessors[j]!\n    const attributes = getAccessorAttributes(accessor)\n    const itemValues = getItemValues(item, accessor)\n    for (let i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i]!,\n        attributes,\n      })\n    }\n  }\n  return allValues\n}\n\nconst defaultKeyAttributes = {\n  maxRanking: Infinity as Ranking,\n  minRanking: -Infinity as Ranking,\n}\n/**\n * Gets all the attributes for the given accessor\n * @param accessor - the accessor from which the attributes will be retrieved\n * @return object containing the accessor's attributes\n */\nfunction getAccessorAttributes<TItem>(\n  accessor: Accessor<TItem>\n): AccessorAttributes {\n  if (typeof accessor === 'function') {\n    return defaultKeyAttributes\n  }\n  return { ...defaultKeyAttributes, ...accessor }\n}\n"],"names":["rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","CONTAINS","ACRONYM","MATCHES","NO_MATCH","rankItem","item","value","options","threshold","accessors","rank","getMatchRanking","rankedValue","accessorIndex","accessorThreshold","passed","valuesToRank","getAllValuesToRank","rankingInfo","i","length","rankValue","newRank","itemValue","minRanking","maxRanking","attributes","Math","min","testString","stringToRank","prepareValueForComparison","toLowerCase","startsWith","includes","getAcronym","getClosenessRanking","string","acronym","wordsInString","split","forEach","wordInString","splitByHyphenWords","splitByHyphenWord","substr","matchingInOrderCharCount","charNumber","findMatchingCharacter","matchChar","index","j","J","stringChar","getRanking","spread","spreadPercentage","inOrderPercentage","ranking","firstIndex","I","found","compareItems","a","b","keepDiacritics","removeAccents","getItemValues","accessor","accessorFn","Array","isArray","String","allValues","getAccessorAttributes","itemValues","push","defaultKeyAttributes","Infinity"],"mappings":"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"}