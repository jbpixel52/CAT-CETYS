{"version":3,"file":"getSortedRowModel.js","sources":["../../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["getSortedRowModel","table","memo","getState","sorting","getPreSortedRowModel","rowModel","rows","length","sortingState","sortedFlatRows","availableSorting","filter","sort","getColumn","id","getCanSort","columnInfoById","forEach","sortEntry","column","sortUndefined","columnDef","invertSorting","sortingFn","getSortingFn","sortData","sortedData","rowA","rowB","i","columnInfo","isDesc","desc","aValue","getValue","bValue","aUndefined","bUndefined","sortInt","index","row","push","subRows","flatRows","rowsById","key","process","env","NODE_ENV","debug","options","debugAll","debugTable","onChange","_autoResetPageIndex"],"mappings":"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"}