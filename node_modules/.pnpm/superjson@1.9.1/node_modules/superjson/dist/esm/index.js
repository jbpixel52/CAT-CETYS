var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { ClassRegistry } from './class-registry';
import { SymbolRegistry } from './symbol-registry';
import { CustomTransformerRegistry, } from './custom-transformer-registry';
import { allowErrorProps } from './error-props';
import { walker, applyReferentialEqualityAnnotations, applyValueAnnotations, generateReferentialEqualityAnnotations, } from './plainer';
import { copy } from 'copy-anything';
export var serialize = function (object) {
    var identities = new Map();
    var output = walker(object, identities);
    var res = {
        json: output.transformedValue
    };
    if (output.annotations) {
        res.meta = __assign(__assign({}, res.meta), { values: output.annotations });
    }
    var equalityAnnotations = generateReferentialEqualityAnnotations(identities);
    if (equalityAnnotations) {
        res.meta = __assign(__assign({}, res.meta), { referentialEqualities: equalityAnnotations });
    }
    return res;
};
export var deserialize = function (payload) {
    var json = payload.json, meta = payload.meta;
    var result = copy(json);
    if (meta === null || meta === void 0 ? void 0 : meta.values) {
        result = applyValueAnnotations(result, meta.values);
    }
    if (meta === null || meta === void 0 ? void 0 : meta.referentialEqualities) {
        result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);
    }
    return result;
};
export var stringify = function (object) {
    return JSON.stringify(serialize(object));
};
export var parse = function (string) {
    return deserialize(JSON.parse(string));
};
export var registerClass = function (v, options) {
    return ClassRegistry.register(v, options);
};
export var registerSymbol = function (v, identifier) {
    return SymbolRegistry.register(v, identifier);
};
export var registerCustom = function (transformer, name) {
    return CustomTransformerRegistry.register(__assign({ name: name }, transformer));
};
export default {
    stringify: stringify,
    parse: parse,
    serialize: serialize,
    deserialize: deserialize,
    registerClass: registerClass,
    registerSymbol: registerSymbol,
    registerCustom: registerCustom,
    allowErrorProps: allowErrorProps
};
//# sourceMappingURL=index.js.map