import { SuperJSONResult, SuperJSONValue, Class, JSONValue } from './types';
import { RegisterOptions } from './class-registry';
import { CustomTransfomer } from './custom-transformer-registry';
export declare const serialize: (object: SuperJSONValue) => SuperJSONResult;
export declare const deserialize: <T = unknown>(payload: SuperJSONResult) => T;
export declare const stringify: (object: SuperJSONValue) => string;
export declare const parse: <T = unknown>(string: string) => T;
export declare const registerClass: (v: Class, options?: string | RegisterOptions | undefined) => void;
export declare const registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
export declare const registerCustom: <I, O extends JSONValue>(transformer: Omit<CustomTransfomer<I, O>, "name">, name: string) => void;
declare const _default: {
    stringify: (object: any) => string;
    parse: <T = unknown>(string: string) => T;
    serialize: (object: any) => SuperJSONResult;
    deserialize: <T_1 = unknown>(payload: SuperJSONResult) => T_1;
    registerClass: (v: Class, options?: string | RegisterOptions | undefined) => void;
    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
    registerCustom: <I, O extends JSONValue>(transformer: Omit<CustomTransfomer<I, O>, "name">, name: string) => void;
    allowErrorProps: (...props: string[]) => void;
};
export default _default;
