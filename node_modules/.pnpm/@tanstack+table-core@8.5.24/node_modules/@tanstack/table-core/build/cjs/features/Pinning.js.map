{"version":3,"file":"Pinning.js","sources":["../../../src/features/Pinning.ts"],"sourcesContent":["import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n"],"names":["getDefaultPinningState","left","right","Pinning","getInitialState","state","columnPinning","getDefaultOptions","table","onColumnPinningChange","makeStateUpdater","createColumn","column","pin","position","columnIds","getLeafColumns","map","d","id","filter","Boolean","setColumnPinning","old","includes","getCanPin","leafColumns","some","columnDef","enablePinning","options","getIsPinned","leafColumnIds","getState","isLeft","isRight","getPinnedIndex","indexOf","createRow","row","getCenterVisibleCells","memo","_getAllVisibleCells","allCells","leftAndRight","key","process","env","NODE_ENV","debug","debugAll","debugRows","getLeftVisibleCells","cells","columnId","find","cell","getRightVisibleCells","createTable","updater","resetColumnPinning","defaultState","initialState","getIsSomeColumnsPinned","pinningState","length","getLeftLeafColumns","getAllLeafColumns","allColumns","debugColumns","getRightLeafColumns","getCenterLeafColumns"],"mappings":"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"}