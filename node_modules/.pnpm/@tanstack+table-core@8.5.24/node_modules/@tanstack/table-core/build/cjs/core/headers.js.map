{"version":3,"file":"headers.js","sources":["../../../src/core/headers.ts"],"sourcesContent":["import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n"],"names":["createHeader","table","column","options","id","header","index","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","length","map","push","getContext","_features","forEach","feature","Object","assign","Headers","createTable","getHeaderGroups","memo","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leafColumns","leftColumns","columnId","find","d","filter","Boolean","rightColumns","centerColumns","includes","headerGroups","buildHeaderGroups","key","process","env","NODE_ENV","debug","debugAll","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","flat","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","columns","Math","max","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","parent","undefined","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","min"],"mappings":"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"}